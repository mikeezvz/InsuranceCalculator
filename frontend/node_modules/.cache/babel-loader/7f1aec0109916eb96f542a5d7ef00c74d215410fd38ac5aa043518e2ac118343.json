{"ast":null,"code":"import { complement } from 'ramda';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func isNotArrayLike\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isArrayLike|isArrayLike}\n * @example\n *\n * RA.isNotArrayLike([]); //=> false\n * RA.isNotArrayLike(true); //=> true\n * RA.isNotArrayLike({}); //=> true\n * RA.isNotArrayLike({length: 10}); //=> true\n * RA.isNotArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> false\n */\nvar isNotArrayLike = complement(isArrayLike);\nexport default isNotArrayLike;","map":{"version":3,"names":["complement","isArrayLike","isNotArrayLike"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotArrayLike.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func isNotArrayLike\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isArrayLike|isArrayLike}\n * @example\n *\n * RA.isNotArrayLike([]); //=> false\n * RA.isNotArrayLike(true); //=> true\n * RA.isNotArrayLike({}); //=> true\n * RA.isNotArrayLike({length: 10}); //=> true\n * RA.isNotArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> false\n */\nvar isNotArrayLike = complement(isArrayLike);\nexport default isNotArrayLike;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAGF,UAAU,CAACC,WAAW,CAAC;AAC5C,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}