{"ast":null,"code":"import { either, curryN } from 'ramda';\nimport isArray from './isArray.js';\nimport isString from './isString.js';\n\n/**\n * Determine if input value is an indexed data type.\n *\n * @func isIndexed\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.26.0|v2.26.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isIndexed([1]) //=> true\n * RA.isIndexed('test') //=> true\n */\n\nvar isIndexed = curryN(1, either(isString, isArray));\nexport default isIndexed;","map":{"version":3,"names":["either","curryN","isArray","isString","isIndexed"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isIndexed.js"],"sourcesContent":["import { either, curryN } from 'ramda';\nimport isArray from './isArray.js';\nimport isString from './isString.js';\n\n/**\n * Determine if input value is an indexed data type.\n *\n * @func isIndexed\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.26.0|v2.26.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isIndexed([1]) //=> true\n * RA.isIndexed('test') //=> true\n */\n\nvar isIndexed = curryN(1, either(isString, isArray));\nexport default isIndexed;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,QAAQ,OAAO;AACtC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAGH,MAAM,CAAC,CAAC,EAAED,MAAM,CAACG,QAAQ,EAAED,OAAO,CAAC,CAAC;AACpD,eAAeE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}