{"ast":null,"code":"import { pathEq, complement } from 'ramda';\n\n/* eslint-disable max-len */\n/**\n * Determines whether a nested path on an object doesn't have a specific value,\n * in R.equals terms. Most likely used to filter a list.\n *\n * @func pathNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}\n * @category Relation\n * @sig a => [Idx] => {a} => Boolean\n * @sig Idx = String | Int | Symbol\n * @param {a} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} object The object to check the nested property in\n * @return {boolean} Returns Boolean `false` if the value equals the nested object property, `true` otherwise\n * @see {@link http://ramdajs.com/docs/#pathEq|R.pathEq}\n * @example\n *\n * const user1 = { address: { zipCode: 90210 } };\n * const user2 = { address: { zipCode: 55555 } };\n * const user3 = { name: 'Bob' };\n * const users = [ user1, user2, user3 ];\n * const isFamous = RA.pathNotEq(90210, ['address', 'zipCode']);\n * R.filter(isFamous, users); //=> [ user2, user3 ]\n */\n/* eslint-enable max-len */\nvar pathNotEq = complement(pathEq);\nexport default pathNotEq;","map":{"version":3,"names":["pathEq","complement","pathNotEq"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/pathNotEq.js"],"sourcesContent":["import { pathEq, complement } from 'ramda';\n\n/* eslint-disable max-len */\n/**\n * Determines whether a nested path on an object doesn't have a specific value,\n * in R.equals terms. Most likely used to filter a list.\n *\n * @func pathNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}\n * @category Relation\n * @sig a => [Idx] => {a} => Boolean\n * @sig Idx = String | Int | Symbol\n * @param {a} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} object The object to check the nested property in\n * @return {boolean} Returns Boolean `false` if the value equals the nested object property, `true` otherwise\n * @see {@link http://ramdajs.com/docs/#pathEq|R.pathEq}\n * @example\n *\n * const user1 = { address: { zipCode: 90210 } };\n * const user2 = { address: { zipCode: 55555 } };\n * const user3 = { name: 'Bob' };\n * const users = [ user1, user2, user3 ];\n * const isFamous = RA.pathNotEq(90210, ['address', 'zipCode']);\n * R.filter(isFamous, users); //=> [ user2, user3 ]\n */\n/* eslint-enable max-len */\nvar pathNotEq = complement(pathEq);\nexport default pathNotEq;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,QAAQ,OAAO;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGD,UAAU,CAACD,MAAM,CAAC;AAClC,eAAeE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}