{"ast":null,"code":"import { PathItemServersElement, OperationServersElement, ServersElement } from '@swagger-api/apidom-ns-openapi-3-0';\nimport NormalizeStorage from \"./normalize-header-examples/NormalizeStorage.mjs\";\n/**\n * Override of Server Objects.\n *\n * List of Server Objects can be defined in OpenAPI 3.1 on multiple levels:\n *\n *  - OpenAPI.servers\n *  - PathItem.servers\n *  - Operation.servers\n *\n * If an alternative server object is specified at the Path Item Object level, it will override OpenAPI.servers.\n * If an alternative server object is specified at the Operation Object level, it will override PathItem.servers and OpenAPI.servers respectively.\n */\n/* eslint-disable no-param-reassign */\nconst plugin = ({\n  storageField = 'x-normalized'\n} = {}) => toolbox => {\n  const {\n    namespace,\n    ancestorLineageToJSONPointer,\n    predicates\n  } = toolbox;\n  let storage;\n  return {\n    visitor: {\n      OpenApi3_1Element: {\n        enter(openapiElement) {\n          const isServersUndefined = typeof openapiElement.servers === 'undefined';\n          const isServersArrayElement = predicates.isArrayElement(openapiElement.servers);\n          const isServersEmpty = isServersArrayElement && openapiElement.servers.length === 0;\n          // @ts-ignore\n          const defaultServer = namespace.elements.Server.refract({\n            url: '/'\n          });\n          if (isServersUndefined || !isServersArrayElement) {\n            openapiElement.servers = new ServersElement([defaultServer]);\n          } else if (isServersArrayElement && isServersEmpty) {\n            openapiElement.servers.push(defaultServer);\n          }\n          storage = new NormalizeStorage(openapiElement, storageField, 'servers');\n        },\n        leave() {\n          storage = undefined;\n        }\n      },\n      PathItemElement(pathItemElement, key, parent, path, ancestors) {\n        // skip visiting this Path Item\n        if (ancestors.some(predicates.isComponentsElement)) return;\n        if (!ancestors.some(predicates.isOpenApi3_1Element)) return;\n        const pathItemJSONPointer = ancestorLineageToJSONPointer([...ancestors, parent, pathItemElement]);\n\n        // skip visiting this Path Item Object if it's already normalized\n        if (storage.includes(pathItemJSONPointer)) {\n          return;\n        }\n        const parentOpenapiElement = ancestors.find(predicates.isOpenApi3_1Element);\n        const isServersUndefined = typeof pathItemElement.servers === 'undefined';\n        const isServersArrayElement = predicates.isArrayElement(pathItemElement.servers);\n        const isServersEmpty = isServersArrayElement && pathItemElement.servers.length === 0;\n\n        // duplicate OpenAPI.servers into this Path Item object\n        if (predicates.isOpenApi3_1Element(parentOpenapiElement)) {\n          var _parentOpenapiElement;\n          const openapiServersContent = (_parentOpenapiElement = parentOpenapiElement.servers) === null || _parentOpenapiElement === void 0 ? void 0 : _parentOpenapiElement.content;\n          const openapiServers = openapiServersContent !== null && openapiServersContent !== void 0 ? openapiServersContent : [];\n          if (isServersUndefined || !isServersArrayElement) {\n            pathItemElement.servers = new PathItemServersElement(openapiServers);\n          } else if (isServersArrayElement && isServersEmpty) {\n            openapiServers.forEach(server => {\n              pathItemElement.servers.push(server);\n            });\n          }\n          storage.append(pathItemJSONPointer);\n        }\n      },\n      OperationElement(operationElement, key, parent, path, ancestors) {\n        // skip visiting this Operation\n        if (ancestors.some(predicates.isComponentsElement)) return;\n        if (!ancestors.some(predicates.isOpenApi3_1Element)) return;\n        const operationJSONPointer = ancestorLineageToJSONPointer([...ancestors, parent, operationElement]);\n\n        // skip visiting this Operation Object if it's already normalized\n        if (storage.includes(operationJSONPointer)) {\n          return;\n        }\n\n        // @TODO(vladimir.gorej@gmail.com): can be replaced by Array.prototype.findLast in future\n        const parentPathItemElement = [...ancestors].reverse().find(predicates.isPathItemElement);\n        const isServersUndefined = typeof operationElement.servers === 'undefined';\n        const isServersArrayElement = predicates.isArrayElement(operationElement.servers);\n        const isServersEmpty = isServersArrayElement && operationElement.servers.length === 0;\n        if (predicates.isPathItemElement(parentPathItemElement)) {\n          var _parentPathItemElemen;\n          const pathItemServersContent = (_parentPathItemElemen = parentPathItemElement.servers) === null || _parentPathItemElemen === void 0 ? void 0 : _parentPathItemElemen.content;\n          const pathItemServers = pathItemServersContent !== null && pathItemServersContent !== void 0 ? pathItemServersContent : [];\n          if (isServersUndefined || !isServersArrayElement) {\n            // duplicate parent PathItem.servers into this Operation object\n            operationElement.servers = new OperationServersElement(pathItemServers);\n          } else if (isServersArrayElement && isServersEmpty) {\n            pathItemServers.forEach(server => {\n              operationElement.servers.push(server);\n            });\n          }\n          storage.append(operationJSONPointer);\n        }\n      }\n    }\n  };\n};\n/* eslint-enable */\n\nexport default plugin;","map":{"version":3,"names":["PathItemServersElement","OperationServersElement","ServersElement","NormalizeStorage","plugin","storageField","toolbox","namespace","ancestorLineageToJSONPointer","predicates","storage","visitor","OpenApi3_1Element","enter","openapiElement","isServersUndefined","servers","isServersArrayElement","isArrayElement","isServersEmpty","length","defaultServer","elements","Server","refract","url","push","leave","undefined","PathItemElement","pathItemElement","key","parent","path","ancestors","some","isComponentsElement","isOpenApi3_1Element","pathItemJSONPointer","includes","parentOpenapiElement","find","_parentOpenapiElement","openapiServersContent","content","openapiServers","forEach","server","append","OperationElement","operationElement","operationJSONPointer","parentPathItemElement","reverse","isPathItemElement","_parentPathItemElemen","pathItemServersContent","pathItemServers"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-1/es/refractor/plugins/normalize-servers.mjs"],"sourcesContent":["import { PathItemServersElement, OperationServersElement, ServersElement } from '@swagger-api/apidom-ns-openapi-3-0';\nimport NormalizeStorage from \"./normalize-header-examples/NormalizeStorage.mjs\";\n/**\n * Override of Server Objects.\n *\n * List of Server Objects can be defined in OpenAPI 3.1 on multiple levels:\n *\n *  - OpenAPI.servers\n *  - PathItem.servers\n *  - Operation.servers\n *\n * If an alternative server object is specified at the Path Item Object level, it will override OpenAPI.servers.\n * If an alternative server object is specified at the Operation Object level, it will override PathItem.servers and OpenAPI.servers respectively.\n */\n/* eslint-disable no-param-reassign */\nconst plugin = ({\n  storageField = 'x-normalized'\n} = {}) => toolbox => {\n  const {\n    namespace,\n    ancestorLineageToJSONPointer,\n    predicates\n  } = toolbox;\n  let storage;\n  return {\n    visitor: {\n      OpenApi3_1Element: {\n        enter(openapiElement) {\n          const isServersUndefined = typeof openapiElement.servers === 'undefined';\n          const isServersArrayElement = predicates.isArrayElement(openapiElement.servers);\n          const isServersEmpty = isServersArrayElement && openapiElement.servers.length === 0;\n          // @ts-ignore\n          const defaultServer = namespace.elements.Server.refract({\n            url: '/'\n          });\n          if (isServersUndefined || !isServersArrayElement) {\n            openapiElement.servers = new ServersElement([defaultServer]);\n          } else if (isServersArrayElement && isServersEmpty) {\n            openapiElement.servers.push(defaultServer);\n          }\n          storage = new NormalizeStorage(openapiElement, storageField, 'servers');\n        },\n        leave() {\n          storage = undefined;\n        }\n      },\n      PathItemElement(pathItemElement, key, parent, path, ancestors) {\n        // skip visiting this Path Item\n        if (ancestors.some(predicates.isComponentsElement)) return;\n        if (!ancestors.some(predicates.isOpenApi3_1Element)) return;\n        const pathItemJSONPointer = ancestorLineageToJSONPointer([...ancestors, parent, pathItemElement]);\n\n        // skip visiting this Path Item Object if it's already normalized\n        if (storage.includes(pathItemJSONPointer)) {\n          return;\n        }\n        const parentOpenapiElement = ancestors.find(predicates.isOpenApi3_1Element);\n        const isServersUndefined = typeof pathItemElement.servers === 'undefined';\n        const isServersArrayElement = predicates.isArrayElement(pathItemElement.servers);\n        const isServersEmpty = isServersArrayElement && pathItemElement.servers.length === 0;\n\n        // duplicate OpenAPI.servers into this Path Item object\n        if (predicates.isOpenApi3_1Element(parentOpenapiElement)) {\n          var _parentOpenapiElement;\n          const openapiServersContent = (_parentOpenapiElement = parentOpenapiElement.servers) === null || _parentOpenapiElement === void 0 ? void 0 : _parentOpenapiElement.content;\n          const openapiServers = openapiServersContent !== null && openapiServersContent !== void 0 ? openapiServersContent : [];\n          if (isServersUndefined || !isServersArrayElement) {\n            pathItemElement.servers = new PathItemServersElement(openapiServers);\n          } else if (isServersArrayElement && isServersEmpty) {\n            openapiServers.forEach(server => {\n              pathItemElement.servers.push(server);\n            });\n          }\n          storage.append(pathItemJSONPointer);\n        }\n      },\n      OperationElement(operationElement, key, parent, path, ancestors) {\n        // skip visiting this Operation\n        if (ancestors.some(predicates.isComponentsElement)) return;\n        if (!ancestors.some(predicates.isOpenApi3_1Element)) return;\n        const operationJSONPointer = ancestorLineageToJSONPointer([...ancestors, parent, operationElement]);\n\n        // skip visiting this Operation Object if it's already normalized\n        if (storage.includes(operationJSONPointer)) {\n          return;\n        }\n\n        // @TODO(vladimir.gorej@gmail.com): can be replaced by Array.prototype.findLast in future\n        const parentPathItemElement = [...ancestors].reverse().find(predicates.isPathItemElement);\n        const isServersUndefined = typeof operationElement.servers === 'undefined';\n        const isServersArrayElement = predicates.isArrayElement(operationElement.servers);\n        const isServersEmpty = isServersArrayElement && operationElement.servers.length === 0;\n        if (predicates.isPathItemElement(parentPathItemElement)) {\n          var _parentPathItemElemen;\n          const pathItemServersContent = (_parentPathItemElemen = parentPathItemElement.servers) === null || _parentPathItemElemen === void 0 ? void 0 : _parentPathItemElemen.content;\n          const pathItemServers = pathItemServersContent !== null && pathItemServersContent !== void 0 ? pathItemServersContent : [];\n          if (isServersUndefined || !isServersArrayElement) {\n            // duplicate parent PathItem.servers into this Operation object\n            operationElement.servers = new OperationServersElement(pathItemServers);\n          } else if (isServersArrayElement && isServersEmpty) {\n            pathItemServers.forEach(server => {\n              operationElement.servers.push(server);\n            });\n          }\n          storage.append(operationJSONPointer);\n        }\n      }\n    }\n  };\n};\n/* eslint-enable */\n\nexport default plugin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}