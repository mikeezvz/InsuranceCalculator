{"ast":null,"code":"import _reduce from \"./internal/_reduce.js\";\nimport curry from \"./curry.js\";\n\n/**\n * Returns the number of items in a given `list` matching the predicate `f`\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} predicate to match items against\n * @return {Array} list of items to count in\n * @example\n *\n *      const even = x => x % 2 == 0;\n *\n *      R.count(even, [1, 2, 3, 4, 5]); // => 2\n *      R.map(R.count(even), [[1, 1, 1], [2, 3, 4, 5], [6]]); // => [0, 2, 1]\n */\nvar count = /*#__PURE__*/curry(function (pred, list) {\n  return _reduce(function (a, e) {\n    return pred(e) ? a + 1 : a;\n  }, 0, list);\n});\nexport default count;","map":{"version":3,"names":["_reduce","curry","count","pred","list","a","e"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/count.js"],"sourcesContent":["import _reduce from \"./internal/_reduce.js\";\nimport curry from \"./curry.js\";\n\n/**\n * Returns the number of items in a given `list` matching the predicate `f`\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} predicate to match items against\n * @return {Array} list of items to count in\n * @example\n *\n *      const even = x => x % 2 == 0;\n *\n *      R.count(even, [1, 2, 3, 4, 5]); // => 2\n *      R.map(R.count(even), [[1, 1, 1], [2, 3, 4, 5], [6]]); // => [0, 2, 1]\n */\nvar count = /*#__PURE__*/curry(function (pred, list) {\n  return _reduce(function (a, e) {\n    return pred(e) ? a + 1 : a;\n  }, 0, list);\n});\nexport default count;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAG,aAAaD,KAAK,CAAC,UAAUE,IAAI,EAAEC,IAAI,EAAE;EACnD,OAAOJ,OAAO,CAAC,UAAUK,CAAC,EAAEC,CAAC,EAAE;IAC7B,OAAOH,IAAI,CAACG,CAAC,CAAC,GAAGD,CAAC,GAAG,CAAC,GAAGA,CAAC;EAC5B,CAAC,EAAE,CAAC,EAAED,IAAI,CAAC;AACb,CAAC,CAAC;AACF,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}