{"ast":null,"code":"import { curryN, path, apply, init, bind } from 'ramda';\nimport isNotFunction from './isNotFunction.js';\nimport isEmptyArray from './isEmptyArray.js';\n\n/**\n * Invokes the method at path of object with given arguments.\n *\n * @func invokeArgs\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @category Object\n * @sig Array -> Array -> Object -> *\n * @param {Array.<string|number>} path The path of the method to invoke\n * @param {Array} args The arguments to invoke the method with\n * @param {Object} obj The object to query\n * @return {*}\n * @example\n *\n * RA.invokeArgs(['abs'], [-1], Math); //=> 1\n * RA.invokeArgs(['path', 'to', 'non-existent', 'method'], [-1], Math); //=> undefined\n */\n\nvar invokeArgs = curryN(3, function (mpath, args, obj) {\n  var method = path(mpath, obj);\n  var context = path(init(mpath), obj);\n  if (isNotFunction(method)) return undefined;\n  if (isEmptyArray(mpath)) return undefined;\n  var boundMethod = bind(method, context);\n  return apply(boundMethod, args);\n});\nexport default invokeArgs;","map":{"version":3,"names":["curryN","path","apply","init","bind","isNotFunction","isEmptyArray","invokeArgs","mpath","args","obj","method","context","undefined","boundMethod"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/invokeArgs.js"],"sourcesContent":["import { curryN, path, apply, init, bind } from 'ramda';\nimport isNotFunction from './isNotFunction.js';\nimport isEmptyArray from './isEmptyArray.js';\n\n/**\n * Invokes the method at path of object with given arguments.\n *\n * @func invokeArgs\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @category Object\n * @sig Array -> Array -> Object -> *\n * @param {Array.<string|number>} path The path of the method to invoke\n * @param {Array} args The arguments to invoke the method with\n * @param {Object} obj The object to query\n * @return {*}\n * @example\n *\n * RA.invokeArgs(['abs'], [-1], Math); //=> 1\n * RA.invokeArgs(['path', 'to', 'non-existent', 'method'], [-1], Math); //=> undefined\n */\n\nvar invokeArgs = curryN(3, function (mpath, args, obj) {\n  var method = path(mpath, obj);\n  var context = path(init(mpath), obj);\n  if (isNotFunction(method)) return undefined;\n  if (isEmptyArray(mpath)) return undefined;\n  var boundMethod = bind(method, context);\n  return apply(boundMethod, args);\n});\nexport default invokeArgs;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,OAAO;AACvD,OAAOC,aAAa,MAAM,oBAAoB;AAC9C,OAAOC,YAAY,MAAM,mBAAmB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GAAGP,MAAM,CAAC,CAAC,EAAE,UAAUQ,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAE;EACrD,IAAIC,MAAM,GAAGV,IAAI,CAACO,KAAK,EAAEE,GAAG,CAAC;EAC7B,IAAIE,OAAO,GAAGX,IAAI,CAACE,IAAI,CAACK,KAAK,CAAC,EAAEE,GAAG,CAAC;EACpC,IAAIL,aAAa,CAACM,MAAM,CAAC,EAAE,OAAOE,SAAS;EAC3C,IAAIP,YAAY,CAACE,KAAK,CAAC,EAAE,OAAOK,SAAS;EACzC,IAAIC,WAAW,GAAGV,IAAI,CAACO,MAAM,EAAEC,OAAO,CAAC;EACvC,OAAOV,KAAK,CAACY,WAAW,EAAEL,IAAI,CAAC;AACjC,CAAC,CAAC;AACF,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}