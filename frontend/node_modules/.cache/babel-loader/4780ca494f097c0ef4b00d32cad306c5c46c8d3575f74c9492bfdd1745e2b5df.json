{"ast":null,"code":"function _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nimport { map } from 'ramda';\nimport allP from '../../allP.js';\nimport resolveP from '../../resolveP.js';\nvar onFulfill = function onFulfill(value) {\n  return {\n    status: 'fulfilled',\n    value: value\n  };\n};\nvar onReject = function onReject(reason) {\n  return {\n    status: 'rejected',\n    reason: reason\n  };\n};\nvar allSettledPonyfill = function allSettledPonyfill(iterable) {\n  var array = map(function (p) {\n    return resolveP(p).then(onFulfill)[\"catch\"](onReject);\n  }, _toConsumableArray(iterable));\n  return allP(array);\n};\nexport default allSettledPonyfill;","map":{"version":3,"names":["_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","map","allP","resolveP","onFulfill","value","status","onReject","reason","allSettledPonyfill","iterable","array","p","then"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/internal/ponyfills/Promise.allSettled.js"],"sourcesContent":["function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { map } from 'ramda';\nimport allP from '../../allP.js';\nimport resolveP from '../../resolveP.js';\nvar onFulfill = function onFulfill(value) {\n  return {\n    status: 'fulfilled',\n    value: value\n  };\n};\nvar onReject = function onReject(reason) {\n  return {\n    status: 'rejected',\n    reason: reason\n  };\n};\nvar allSettledPonyfill = function allSettledPonyfill(iterable) {\n  var array = map(function (p) {\n    return resolveP(p).then(onFulfill)[\"catch\"](onReject);\n  }, _toConsumableArray(iterable));\n  return allP(array);\n};\nexport default allSettledPonyfill;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}