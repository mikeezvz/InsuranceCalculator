{"ast":null,"code":"import { complement } from 'ramda';\nimport isPair from './isPair.js';\n\n/**\n * Checks if input value is complement of a pair.\n *\n * @func isNotPair\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|v1.19.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link http://ramdajs.com/docs/#pair|R.pair}, {@link RA.isPair|isPair}\n * @example\n *\n * RA.isNotPair([]); // => true\n * RA.isNotPair([0]); // => true\n * RA.isNotPair([0, 1]); // => false\n * RA.isNotPair([0, 1, 2]); // => true\n * RA.isNotPair({0: 0, 1: 1}); // => true\n * RA.isNotPair({foo: 0, bar: 0}); // => true\n */\nvar isNotPair = complement(isPair);\nexport default isNotPair;","map":{"version":3,"names":["complement","isPair","isNotPair"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotPair.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isPair from './isPair.js';\n\n/**\n * Checks if input value is complement of a pair.\n *\n * @func isNotPair\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|v1.19.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link http://ramdajs.com/docs/#pair|R.pair}, {@link RA.isPair|isPair}\n * @example\n *\n * RA.isNotPair([]); // => true\n * RA.isNotPair([0]); // => true\n * RA.isNotPair([0, 1]); // => false\n * RA.isNotPair([0, 1, 2]); // => true\n * RA.isNotPair({0: 0, 1: 1}); // => true\n * RA.isNotPair({foo: 0, bar: 0}); // => true\n */\nvar isNotPair = complement(isPair);\nexport default isNotPair;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGF,UAAU,CAACC,MAAM,CAAC;AAClC,eAAeC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}