{"ast":null,"code":"import { trimCharsStart, isUndefined } from 'ramda-adjunct';\nimport { find, toValue } from '@swagger-api/apidom-core';\nimport { isSchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport { getHash } from \"../../../../util/url.mjs\";\nimport EvaluationJsonSchema$anchorError from \"../../../../errors/EvaluationJsonSchema$anchorError.mjs\";\nimport InvalidJsonSchema$anchorError from \"../../../../errors/InvalidJsonSchema$anchorError.mjs\"; // isAnchor :: String -> Boolean\nexport const isAnchor = uri => {\n  /**\n   *  MUST start with a letter ([A-Za-z]) or underscore (\"_\"), followed by any number of letters,\n   *  digits ([0-9]), hyphens (\"-\"), underscores (\"_\"), and periods (\".\").\n   *\n   *  https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.8.2.2\n   */\n  return /^[A-Za-z_][A-Za-z_0-9.-]*$/.test(uri);\n};\n\n// uriToAnchor :: String -> String\nexport const uriToAnchor = uri => {\n  const hash = getHash(uri);\n  return trimCharsStart('#', hash);\n};\n\n// parse :: String -> String\nexport const parse = anchor => {\n  if (!isAnchor(anchor)) {\n    throw new InvalidJsonSchema$anchorError(anchor);\n  }\n  return anchor;\n};\n\n// evaluates JSON Schema $anchor against ApiDOM fragment\nexport const evaluate = (anchor, element) => {\n  const token = parse(anchor);\n\n  // @ts-ignore\n  const result = find(e => isSchemaElement(e) && toValue(e.$anchor) === token, element);\n  if (isUndefined(result)) {\n    throw new EvaluationJsonSchema$anchorError(`Evaluation failed on token: \"${token}\"`);\n  }\n\n  // @ts-ignore\n  return result;\n};\nexport { EvaluationJsonSchema$anchorError, InvalidJsonSchema$anchorError };\nexport { default as JsonSchema$anchorError } from \"../../../../errors/JsonSchema$anchorError.mjs\";","map":{"version":3,"names":["trimCharsStart","isUndefined","find","toValue","isSchemaElement","getHash","EvaluationJsonSchema$anchorError","InvalidJsonSchema$anchorError","isAnchor","uri","test","uriToAnchor","hash","parse","anchor","evaluate","element","token","result","e","$anchor","default","JsonSchema$anchorError"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/dereference/strategies/openapi-3-1/selectors/$anchor.mjs"],"sourcesContent":["import { trimCharsStart, isUndefined } from 'ramda-adjunct';\nimport { find, toValue } from '@swagger-api/apidom-core';\nimport { isSchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport { getHash } from \"../../../../util/url.mjs\";\nimport EvaluationJsonSchema$anchorError from \"../../../../errors/EvaluationJsonSchema$anchorError.mjs\";\nimport InvalidJsonSchema$anchorError from \"../../../../errors/InvalidJsonSchema$anchorError.mjs\"; // isAnchor :: String -> Boolean\nexport const isAnchor = uri => {\n  /**\n   *  MUST start with a letter ([A-Za-z]) or underscore (\"_\"), followed by any number of letters,\n   *  digits ([0-9]), hyphens (\"-\"), underscores (\"_\"), and periods (\".\").\n   *\n   *  https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.8.2.2\n   */\n  return /^[A-Za-z_][A-Za-z_0-9.-]*$/.test(uri);\n};\n\n// uriToAnchor :: String -> String\nexport const uriToAnchor = uri => {\n  const hash = getHash(uri);\n  return trimCharsStart('#', hash);\n};\n\n// parse :: String -> String\nexport const parse = anchor => {\n  if (!isAnchor(anchor)) {\n    throw new InvalidJsonSchema$anchorError(anchor);\n  }\n  return anchor;\n};\n\n// evaluates JSON Schema $anchor against ApiDOM fragment\nexport const evaluate = (anchor, element) => {\n  const token = parse(anchor);\n\n  // @ts-ignore\n  const result = find(e => isSchemaElement(e) && toValue(e.$anchor) === token, element);\n  if (isUndefined(result)) {\n    throw new EvaluationJsonSchema$anchorError(`Evaluation failed on token: \"${token}\"`);\n  }\n\n  // @ts-ignore\n  return result;\n};\nexport { EvaluationJsonSchema$anchorError, InvalidJsonSchema$anchorError };\nexport { default as JsonSchema$anchorError } from \"../../../../errors/JsonSchema$anchorError.mjs\";"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,eAAe;AAC3D,SAASC,IAAI,EAAEC,OAAO,QAAQ,0BAA0B;AACxD,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,OAAO,QAAQ,0BAA0B;AAClD,OAAOC,gCAAgC,MAAM,yDAAyD;AACtG,OAAOC,6BAA6B,MAAM,sDAAsD,CAAC,CAAC;AAClG,OAAO,MAAMC,QAAQ,GAAGC,GAAG,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;EACE,OAAO,4BAA4B,CAACC,IAAI,CAACD,GAAG,CAAC;AAC/C,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAGF,GAAG,IAAI;EAChC,MAAMG,IAAI,GAAGP,OAAO,CAACI,GAAG,CAAC;EACzB,OAAOT,cAAc,CAAC,GAAG,EAAEY,IAAI,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAGC,MAAM,IAAI;EAC7B,IAAI,CAACN,QAAQ,CAACM,MAAM,CAAC,EAAE;IACrB,MAAM,IAAIP,6BAA6B,CAACO,MAAM,CAAC;EACjD;EACA,OAAOA,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACD,MAAM,EAAEE,OAAO,KAAK;EAC3C,MAAMC,KAAK,GAAGJ,KAAK,CAACC,MAAM,CAAC;;EAE3B;EACA,MAAMI,MAAM,GAAGhB,IAAI,CAACiB,CAAC,IAAIf,eAAe,CAACe,CAAC,CAAC,IAAIhB,OAAO,CAACgB,CAAC,CAACC,OAAO,CAAC,KAAKH,KAAK,EAAED,OAAO,CAAC;EACrF,IAAIf,WAAW,CAACiB,MAAM,CAAC,EAAE;IACvB,MAAM,IAAIZ,gCAAgC,CAAC,gCAAgCW,KAAK,GAAG,CAAC;EACtF;;EAEA;EACA,OAAOC,MAAM;AACf,CAAC;AACD,SAASZ,gCAAgC,EAAEC,6BAA6B;AACxE,SAASc,OAAO,IAAIC,sBAAsB,QAAQ,+CAA+C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}