{"ast":null,"code":"import { makeFetchJSON } from './utils/index.js';\nimport * as optionsUtil from './utils/options.js';\nimport genericStrategy from './strategies/generic/index.js';\nimport openApi2Strategy from './strategies/openapi-2/index.js';\nimport openApi30Strategy from './strategies/openapi-3-0/index.js';\nconst resolve = async options => {\n  const {\n    spec,\n    requestInterceptor,\n    responseInterceptor\n  } = options;\n  const retrievalURI = optionsUtil.retrievalURI(options);\n  const httpClient = optionsUtil.httpClient(options);\n  const retrievedSpec = spec || (await makeFetchJSON(httpClient, {\n    requestInterceptor,\n    responseInterceptor\n  })(retrievalURI));\n  const strategyOptions = {\n    ...options,\n    spec: retrievedSpec\n  };\n  const strategy = options.strategies.find(strg => strg.match(strategyOptions));\n  return strategy.resolve(strategyOptions);\n};\nexport const makeResolve = defaultOptions => async options => {\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  return resolve(mergedOptions);\n};\nexport default makeResolve({\n  strategies: [openApi30Strategy, openApi2Strategy, genericStrategy]\n});","map":{"version":3,"names":["makeFetchJSON","optionsUtil","genericStrategy","openApi2Strategy","openApi30Strategy","resolve","options","spec","requestInterceptor","responseInterceptor","retrievalURI","httpClient","retrievedSpec","strategyOptions","strategy","strategies","find","strg","match","makeResolve","defaultOptions","mergedOptions"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/index.js"],"sourcesContent":["import { makeFetchJSON } from './utils/index.js';\nimport * as optionsUtil from './utils/options.js';\nimport genericStrategy from './strategies/generic/index.js';\nimport openApi2Strategy from './strategies/openapi-2/index.js';\nimport openApi30Strategy from './strategies/openapi-3-0/index.js';\nconst resolve = async options => {\n  const {\n    spec,\n    requestInterceptor,\n    responseInterceptor\n  } = options;\n  const retrievalURI = optionsUtil.retrievalURI(options);\n  const httpClient = optionsUtil.httpClient(options);\n  const retrievedSpec = spec || (await makeFetchJSON(httpClient, {\n    requestInterceptor,\n    responseInterceptor\n  })(retrievalURI));\n  const strategyOptions = {\n    ...options,\n    spec: retrievedSpec\n  };\n  const strategy = options.strategies.find(strg => strg.match(strategyOptions));\n  return strategy.resolve(strategyOptions);\n};\nexport const makeResolve = defaultOptions => async options => {\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  return resolve(mergedOptions);\n};\nexport default makeResolve({\n  strategies: [openApi30Strategy, openApi2Strategy, genericStrategy]\n});"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAO,KAAKC,WAAW,MAAM,oBAAoB;AACjD,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,gBAAgB,MAAM,iCAAiC;AAC9D,OAAOC,iBAAiB,MAAM,mCAAmC;AACjE,MAAMC,OAAO,GAAG,MAAMC,OAAO,IAAI;EAC/B,MAAM;IACJC,IAAI;IACJC,kBAAkB;IAClBC;EACF,CAAC,GAAGH,OAAO;EACX,MAAMI,YAAY,GAAGT,WAAW,CAACS,YAAY,CAACJ,OAAO,CAAC;EACtD,MAAMK,UAAU,GAAGV,WAAW,CAACU,UAAU,CAACL,OAAO,CAAC;EAClD,MAAMM,aAAa,GAAGL,IAAI,KAAK,MAAMP,aAAa,CAACW,UAAU,EAAE;IAC7DH,kBAAkB;IAClBC;EACF,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;EACjB,MAAMG,eAAe,GAAG;IACtB,GAAGP,OAAO;IACVC,IAAI,EAAEK;EACR,CAAC;EACD,MAAME,QAAQ,GAAGR,OAAO,CAACS,UAAU,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,CAAC;EAC7E,OAAOC,QAAQ,CAACT,OAAO,CAACQ,eAAe,CAAC;AAC1C,CAAC;AACD,OAAO,MAAMM,WAAW,GAAGC,cAAc,IAAI,MAAMd,OAAO,IAAI;EAC5D,MAAMe,aAAa,GAAG;IACpB,GAAGD,cAAc;IACjB,GAAGd;EACL,CAAC;EACD,OAAOD,OAAO,CAACgB,aAAa,CAAC;AAC/B,CAAC;AACD,eAAeF,WAAW,CAAC;EACzBJ,UAAU,EAAE,CAACX,iBAAiB,EAAED,gBAAgB,EAAED,eAAe;AACnE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}