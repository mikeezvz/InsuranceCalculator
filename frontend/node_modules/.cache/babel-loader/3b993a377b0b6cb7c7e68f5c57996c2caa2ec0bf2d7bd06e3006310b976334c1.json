{"ast":null,"code":"import { curryN, pipe, type, identical } from 'ramda';\n\n/**\n * Checks if input value is `String`.\n *\n * @func isString\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.4.0|v0.4.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotString|isNotString}\n * @example\n *\n * RA.isString('abc'); //=> true\n * RA.isString(1); //=> false\n */\nvar isString = curryN(1, pipe(type, identical('String')));\nexport default isString;","map":{"version":3,"names":["curryN","pipe","type","identical","isString"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isString.js"],"sourcesContent":["import { curryN, pipe, type, identical } from 'ramda';\n\n/**\n * Checks if input value is `String`.\n *\n * @func isString\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.4.0|v0.4.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotString|isNotString}\n * @example\n *\n * RA.isString('abc'); //=> true\n * RA.isString(1); //=> false\n */\nvar isString = curryN(1, pipe(type, identical('String')));\nexport default isString;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGJ,MAAM,CAAC,CAAC,EAAEC,IAAI,CAACC,IAAI,EAAEC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;AACzD,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}