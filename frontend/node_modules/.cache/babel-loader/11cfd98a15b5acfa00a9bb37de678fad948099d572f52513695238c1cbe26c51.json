{"ast":null,"code":"import { complement } from 'ramda';\nimport isValidDate from './isValidDate.js';\n\n/**\n * Checks if value is complement of valid `Date` object.\n *\n * @func isNotValidDate\n * @aliases isInvalidDate\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.8.0|v1.8.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isValidDate|isValidDate}, {@link RA.isDate|isDate}, {@link RA.isNotDate|isNotDate}\n * @example\n *\n * RA.isNotValidDate(new Date()); //=> false\n * RA.isNotValidDate(new Date('a')); //=> true\n */\nvar isNotValidDate = complement(isValidDate);\nexport default isNotValidDate;","map":{"version":3,"names":["complement","isValidDate","isNotValidDate"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotValidDate.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isValidDate from './isValidDate.js';\n\n/**\n * Checks if value is complement of valid `Date` object.\n *\n * @func isNotValidDate\n * @aliases isInvalidDate\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.8.0|v1.8.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isValidDate|isValidDate}, {@link RA.isDate|isDate}, {@link RA.isNotDate|isNotDate}\n * @example\n *\n * RA.isNotValidDate(new Date()); //=> false\n * RA.isNotValidDate(new Date('a')); //=> true\n */\nvar isNotValidDate = complement(isValidDate);\nexport default isNotValidDate;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAGF,UAAU,CAACC,WAAW,CAAC;AAC5C,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}