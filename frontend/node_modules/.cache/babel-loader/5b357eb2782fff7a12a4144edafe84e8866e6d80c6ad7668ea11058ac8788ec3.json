{"ast":null,"code":"import { curry, invoker, flip } from 'ramda';\nimport ponyfill from './internal/ponyfills/String.repeat.js';\nimport isFunction from './isFunction.js';\nexport var repeatStrPonyfill = curry(ponyfill);\nexport var repeatStrInvoker = flip(invoker(1, 'repeat'));\n\n/**\n * Constructs and returns a new string which contains the specified\n * number of copies of the string on which it was called, concatenated together.\n *\n * @func repeatStr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.11.0|v2.11.0}\n * @category List\n * @sig String -> Number -> String\n * @param {string} value String value to be repeated\n * @param {number} count An integer between 0 and +∞: [0, +∞), indicating the number of times to repeat the string in the newly-created string that is to be returned\n * @return {string} A new string containing the specified number of copies of the given string\n * @example\n *\n * RA.repeatStr('a', 3); //=> 'aaa'\n */\nvar repeatStr = isFunction(String.prototype.repeat) ? repeatStrInvoker : repeatStrPonyfill;\nexport default repeatStr;","map":{"version":3,"names":["curry","invoker","flip","ponyfill","isFunction","repeatStrPonyfill","repeatStrInvoker","repeatStr","String","prototype","repeat"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/repeatStr.js"],"sourcesContent":["import { curry, invoker, flip } from 'ramda';\nimport ponyfill from './internal/ponyfills/String.repeat.js';\nimport isFunction from './isFunction.js';\nexport var repeatStrPonyfill = curry(ponyfill);\nexport var repeatStrInvoker = flip(invoker(1, 'repeat'));\n\n/**\n * Constructs and returns a new string which contains the specified\n * number of copies of the string on which it was called, concatenated together.\n *\n * @func repeatStr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.11.0|v2.11.0}\n * @category List\n * @sig String -> Number -> String\n * @param {string} value String value to be repeated\n * @param {number} count An integer between 0 and +∞: [0, +∞), indicating the number of times to repeat the string in the newly-created string that is to be returned\n * @return {string} A new string containing the specified number of copies of the given string\n * @example\n *\n * RA.repeatStr('a', 3); //=> 'aaa'\n */\nvar repeatStr = isFunction(String.prototype.repeat) ? repeatStrInvoker : repeatStrPonyfill;\nexport default repeatStr;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,OAAO,EAAEC,IAAI,QAAQ,OAAO;AAC5C,OAAOC,QAAQ,MAAM,uCAAuC;AAC5D,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAO,IAAIC,iBAAiB,GAAGL,KAAK,CAACG,QAAQ,CAAC;AAC9C,OAAO,IAAIG,gBAAgB,GAAGJ,IAAI,CAACD,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,SAAS,GAAGH,UAAU,CAACI,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,GAAGJ,gBAAgB,GAAGD,iBAAiB;AAC1F,eAAeE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}