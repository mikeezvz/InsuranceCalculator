{"ast":null,"code":"import { complement } from 'ramda';\nimport lensSatisfies from './lensSatisfies.js';\n\n/**\n * Returns `true` if data structure focused by the given lens doesn't satisfy the predicate.\n * Note that the predicate is expected to return boolean value.\n *\n * @func lensNotSatisfy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Boolean b => (a -> b) -> Lens s a -> s -> b\n * @see {@link RA.lensSatisfies|lensSatisfies}\n * @param {Function} predicate The predicate function\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @return {boolean} `false` if the focused data structure satisfies the predicate, `true` otherwise\n *\n * @example\n *\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(0), [false, true, 1]); // => true\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(1), [false, true, 1]); // => false\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(2), [false, true, 1]); // => true\n * RA.lensNotSatisfy(R.identity, R.lensProp('x'), { x: 1 }); // => true\n */\nvar lensNotSatisfy = complement(lensSatisfies);\nexport default lensNotSatisfy;","map":{"version":3,"names":["complement","lensSatisfies","lensNotSatisfy"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/lensNotSatisfy.js"],"sourcesContent":["import { complement } from 'ramda';\nimport lensSatisfies from './lensSatisfies.js';\n\n/**\n * Returns `true` if data structure focused by the given lens doesn't satisfy the predicate.\n * Note that the predicate is expected to return boolean value.\n *\n * @func lensNotSatisfy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Boolean b => (a -> b) -> Lens s a -> s -> b\n * @see {@link RA.lensSatisfies|lensSatisfies}\n * @param {Function} predicate The predicate function\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @return {boolean} `false` if the focused data structure satisfies the predicate, `true` otherwise\n *\n * @example\n *\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(0), [false, true, 1]); // => true\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(1), [false, true, 1]); // => false\n * RA.lensNotSatisfy(RA.isTrue, R.lensIndex(2), [false, true, 1]); // => true\n * RA.lensNotSatisfy(R.identity, R.lensProp('x'), { x: 1 }); // => true\n */\nvar lensNotSatisfy = complement(lensSatisfies);\nexport default lensNotSatisfy;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,aAAa,MAAM,oBAAoB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAGF,UAAU,CAACC,aAAa,CAAC;AAC9C,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}