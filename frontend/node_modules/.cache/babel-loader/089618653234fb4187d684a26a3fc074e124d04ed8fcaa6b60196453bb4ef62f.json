{"ast":null,"code":"import { converge, length, uniq } from 'ramda';\nimport lengthEq from './lengthEq.js';\n\n/**\n * Returns true if all items in the list are unique. `R.equals` is used to determine equality.\n *\n * @func allUnique\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category List\n * @sig [a] -> Boolean\n * @param {Array} list The list of values\n * @return {boolean}\n * @see {@link RA.notAllUnique|notAllUnique},  {@link https://ramdajs.com/docs/#equals|equals}\n * @example\n *\n * RA.allUnique([ 1, 2, 3, 4 ]); //=> true\n * RA.allUnique([ 1, 1, 2, 3 ]); //=> false\n * RA.allUnique([]); //=> true\n *\n */\nvar allUnique = converge(lengthEq, [length, uniq]);\nexport default allUnique;","map":{"version":3,"names":["converge","length","uniq","lengthEq","allUnique"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/allUnique.js"],"sourcesContent":["import { converge, length, uniq } from 'ramda';\nimport lengthEq from './lengthEq.js';\n\n/**\n * Returns true if all items in the list are unique. `R.equals` is used to determine equality.\n *\n * @func allUnique\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category List\n * @sig [a] -> Boolean\n * @param {Array} list The list of values\n * @return {boolean}\n * @see {@link RA.notAllUnique|notAllUnique},  {@link https://ramdajs.com/docs/#equals|equals}\n * @example\n *\n * RA.allUnique([ 1, 2, 3, 4 ]); //=> true\n * RA.allUnique([ 1, 1, 2, 3 ]); //=> false\n * RA.allUnique([]); //=> true\n *\n */\nvar allUnique = converge(lengthEq, [length, uniq]);\nexport default allUnique;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,IAAI,QAAQ,OAAO;AAC9C,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGJ,QAAQ,CAACG,QAAQ,EAAE,CAACF,MAAM,EAAEC,IAAI,CAAC,CAAC;AAClD,eAAeE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}