{"ast":null,"code":"import { type, pipe, identical, curryN } from 'ramda';\n\n/**\n * Checks if value is a BigInt.\n *\n * @func isBigInt\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isBigInt(5); // => false\n * RA.isBigInt(Number.MAX_VALUE); // => false\n * RA.isBigInt(-Infinity); // => false\n * RA.isBigInt(10); // => false\n * RA.isBigInt(10n); // => true\n * RA.isBigInt(BitInt(9007199254740991)); // => true\n */\nvar isBigInt = curryN(1, pipe(type, identical('BigInt')));\nexport default isBigInt;","map":{"version":3,"names":["type","pipe","identical","curryN","isBigInt"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isBigInt.js"],"sourcesContent":["import { type, pipe, identical, curryN } from 'ramda';\n\n/**\n * Checks if value is a BigInt.\n *\n * @func isBigInt\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isBigInt(5); // => false\n * RA.isBigInt(Number.MAX_VALUE); // => false\n * RA.isBigInt(-Infinity); // => false\n * RA.isBigInt(10); // => false\n * RA.isBigInt(10n); // => true\n * RA.isBigInt(BitInt(9007199254740991)); // => true\n */\nvar isBigInt = curryN(1, pipe(type, identical('BigInt')));\nexport default isBigInt;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGD,MAAM,CAAC,CAAC,EAAEF,IAAI,CAACD,IAAI,EAAEE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;AACzD,eAAeE,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}