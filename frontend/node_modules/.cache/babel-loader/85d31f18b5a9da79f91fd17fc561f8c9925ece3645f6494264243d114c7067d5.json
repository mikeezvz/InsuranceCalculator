{"ast":null,"code":"import { view, curryN, pipe } from 'ramda';\nimport isTrue from './isTrue.js';\n\n/**\n * Returns `true` if data structure focused by the given lens satisfies the predicate.\n * Note that the predicate is expected to return boolean value and will be evaluated\n * as `false` unless the predicate returns `true`.\n *\n * @func lensSatisfies\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Boolean b => (a -> b) -> Lens s a -> s -> b\n * @see {@link RA.lensNotSatisfy|lensNotSatisfy}\n * @param {Function} predicate The predicate function\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @return {boolean} `true` if the focused data structure satisfies the predicate, `false` otherwise\n *\n * @example\n *\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(0), [false, true, 1]); // => false\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(1), [false, true, 1]); // => true\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(2), [false, true, 1]); // => false\n * RA.lensSatisfies(R.identity, R.lensProp('x'), { x: 1 }); // => false\n */\nvar lensSatisfies = curryN(3, function (predicate, lens, data) {\n  return pipe(view(lens), predicate, isTrue)(data);\n});\nexport default lensSatisfies;","map":{"version":3,"names":["view","curryN","pipe","isTrue","lensSatisfies","predicate","lens","data"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/lensSatisfies.js"],"sourcesContent":["import { view, curryN, pipe } from 'ramda';\nimport isTrue from './isTrue.js';\n\n/**\n * Returns `true` if data structure focused by the given lens satisfies the predicate.\n * Note that the predicate is expected to return boolean value and will be evaluated\n * as `false` unless the predicate returns `true`.\n *\n * @func lensSatisfies\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Boolean b => (a -> b) -> Lens s a -> s -> b\n * @see {@link RA.lensNotSatisfy|lensNotSatisfy}\n * @param {Function} predicate The predicate function\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @return {boolean} `true` if the focused data structure satisfies the predicate, `false` otherwise\n *\n * @example\n *\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(0), [false, true, 1]); // => false\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(1), [false, true, 1]); // => true\n * RA.lensSatisfies(RA.isTrue, R.lensIndex(2), [false, true, 1]); // => false\n * RA.lensSatisfies(R.identity, R.lensProp('x'), { x: 1 }); // => false\n */\nvar lensSatisfies = curryN(3, function (predicate, lens, data) {\n  return pipe(view(lens), predicate, isTrue)(data);\n});\nexport default lensSatisfies;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,EAAEC,IAAI,QAAQ,OAAO;AAC1C,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAGH,MAAM,CAAC,CAAC,EAAE,UAAUI,SAAS,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC7D,OAAOL,IAAI,CAACF,IAAI,CAACM,IAAI,CAAC,EAAED,SAAS,EAAEF,MAAM,CAAC,CAACI,IAAI,CAAC;AAClD,CAAC,CAAC;AACF,eAAeH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}