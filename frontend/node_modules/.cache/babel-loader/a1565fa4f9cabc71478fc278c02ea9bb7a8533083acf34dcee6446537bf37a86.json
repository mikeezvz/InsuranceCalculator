{"ast":null,"code":"import { ifElse, curry, useWith, both, gte, lte, gt } from 'ramda';\nvar inRangeImp = ifElse(gte, function () {\n  throw new Error('low must not be greater than high in inRange(low, high, value)');\n}, useWith(both, [lte, gt]));\n\n/**\n * Checks if `value` is between `low` and up to but not including `high`.\n *\n * @func inRange\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|v2.7.0}\n * @category Relation\n * @sig Number -> Number -> Number -> Boolean\n * @param {number} low Start of the range\n * @param {number} high The end of the range\n * @param {number} value The value to test\n * @return {boolean}\n * @throws {Error} When `low` is greater than or equal to `high`\n * @example\n *\n * RA.inRange(0, 5, 3); //=> true\n * RA.inRange(0, 5, 0); //=> true\n * RA.inRange(0, 5, 4); //=> true\n * RA.inRange(0, 5, 5); //=> false\n * RA.inRange(0, 5, -1); //=> false\n */\nexport default curry(function (low, high, value) {\n  return inRangeImp(low, high)(value);\n});","map":{"version":3,"names":["ifElse","curry","useWith","both","gte","lte","gt","inRangeImp","Error","low","high","value"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/inRange.js"],"sourcesContent":["import { ifElse, curry, useWith, both, gte, lte, gt } from 'ramda';\nvar inRangeImp = ifElse(gte, function () {\n  throw new Error('low must not be greater than high in inRange(low, high, value)');\n}, useWith(both, [lte, gt]));\n\n/**\n * Checks if `value` is between `low` and up to but not including `high`.\n *\n * @func inRange\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|v2.7.0}\n * @category Relation\n * @sig Number -> Number -> Number -> Boolean\n * @param {number} low Start of the range\n * @param {number} high The end of the range\n * @param {number} value The value to test\n * @return {boolean}\n * @throws {Error} When `low` is greater than or equal to `high`\n * @example\n *\n * RA.inRange(0, 5, 3); //=> true\n * RA.inRange(0, 5, 0); //=> true\n * RA.inRange(0, 5, 4); //=> true\n * RA.inRange(0, 5, 5); //=> false\n * RA.inRange(0, 5, -1); //=> false\n */\nexport default curry(function (low, high, value) {\n  return inRangeImp(low, high)(value);\n});"],"mappings":"AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,EAAE,QAAQ,OAAO;AAClE,IAAIC,UAAU,GAAGP,MAAM,CAACI,GAAG,EAAE,YAAY;EACvC,MAAM,IAAII,KAAK,CAAC,gEAAgE,CAAC;AACnF,CAAC,EAAEN,OAAO,CAACC,IAAI,EAAE,CAACE,GAAG,EAAEC,EAAE,CAAC,CAAC,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeL,KAAK,CAAC,UAAUQ,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC/C,OAAOJ,UAAU,CAACE,GAAG,EAAEC,IAAI,CAAC,CAACC,KAAK,CAAC;AACrC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}