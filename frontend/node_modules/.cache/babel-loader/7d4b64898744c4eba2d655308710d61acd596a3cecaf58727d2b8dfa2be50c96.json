{"ast":null,"code":"import _concat from \"./internal/_concat.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * As with `addIndex`, `addIndexRight` creates a new list iteration function\n * from an existing one by adding two new parameters to its callback function:\n * the current index, and the entire list.\n *\n * Unlike `addIndex`, `addIndexRight` iterates from the right to the left.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const revmap = (fn, ary) => R.map(fn, R.reverse(ary));\n *      const revmapIndexed = R.addIndexRight(revmap);\n *      revmapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> [ '5-r', '4-a', '3-b', '2-o', '1-o', '0-f' ]\n */\nvar addIndexRight = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var idx = list.length - 1;\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx -= 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndexRight;","map":{"version":3,"names":["_concat","_curry1","curryN","addIndexRight","addIndex","fn","length","origFn","arguments","list","idx","args","Array","prototype","slice","call","result","apply"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/addIndexRight.js"],"sourcesContent":["import _concat from \"./internal/_concat.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * As with `addIndex`, `addIndexRight` creates a new list iteration function\n * from an existing one by adding two new parameters to its callback function:\n * the current index, and the entire list.\n *\n * Unlike `addIndex`, `addIndexRight` iterates from the right to the left.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const revmap = (fn, ary) => R.map(fn, R.reverse(ary));\n *      const revmapIndexed = R.addIndexRight(revmap);\n *      revmapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> [ '5-r', '4-a', '3-b', '2-o', '1-o', '0-f' ]\n */\nvar addIndexRight = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var idx = list.length - 1;\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx -= 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndexRight;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAaF,OAAO,CAAC,SAASG,QAAQA,CAACC,EAAE,EAAE;EAC7D,OAAOH,MAAM,CAACG,EAAE,CAACC,MAAM,EAAE,YAAY;IACnC,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;IACzB,IAAIC,IAAI,GAAGD,SAAS,CAACA,SAAS,CAACF,MAAM,GAAG,CAAC,CAAC;IAC1C,IAAII,GAAG,GAAGD,IAAI,CAACH,MAAM,GAAG,CAAC;IACzB,IAAIK,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACP,SAAS,EAAE,CAAC,CAAC;IACnDG,IAAI,CAAC,CAAC,CAAC,GAAG,YAAY;MACpB,IAAIK,MAAM,GAAGT,MAAM,CAACU,KAAK,CAAC,IAAI,EAAEjB,OAAO,CAACQ,SAAS,EAAE,CAACE,GAAG,EAAED,IAAI,CAAC,CAAC,CAAC;MAChEC,GAAG,IAAI,CAAC;MACR,OAAOM,MAAM;IACf,CAAC;IACD,OAAOX,EAAE,CAACY,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;EAC7B,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAeR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}