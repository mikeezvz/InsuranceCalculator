{"ast":null,"code":"import { useWith, curry, compose } from 'ramda';\nimport list from './list.js';\nimport isTruthy from './isTruthy.js';\n\n/**\n * Takes a combining predicate and a list of functions and returns a function which will map the\n * arguments it receives to the list of functions and returns the result of passing the values\n * returned from each function to the combining predicate. A combining predicate is a function that\n * combines a list of Boolean values into a single Boolean value, such as `R.any` or `R.all`. It\n * will test each value using `RA.isTruthy`, meaning the functions don't necessarily have to be\n * predicates.\n *\n * The function returned is curried to the number of functions supplied, and if called with more\n * arguments than functions, any remaining arguments are passed in to the combining predicate\n * untouched.\n *\n * @func argsPass\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|v2.7.0}\n * @category Logic\n * @sig ((* -> Boolean) -> [*] -> Boolean) -> [(* -> Boolean), ...] -> (*...) -> Boolean\n * @param {Function} combiningPredicate The predicate used to combine the values returned from the\n * list of functions\n * @param {Array} functions List of functions\n * @return {boolean} Returns the combined result of mapping arguments to functions\n * @example\n *\n * RA.argsPass(R.all, [RA.isArray, RA.isBoolean, RA.isString])([], false, 'abc') //=> true\n * RA.argsPass(R.all, [RA.isArray, RA.isBoolean, RA.isString])([], false, 1) //=> false\n * RA.argsPass(R.any, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, 'abc') //=> true\n * RA.argsPass(R.any, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, false) //=> false\n * RA.argsPass(R.none, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, false) //=> true\n * RA.argsPass(R.none, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, 'abc') //=> false\n */\nvar argsPass = curry(function (combiningPredicate, predicates) {\n  return useWith(compose(combiningPredicate(isTruthy), list), predicates);\n});\nexport default argsPass;","map":{"version":3,"names":["useWith","curry","compose","list","isTruthy","argsPass","combiningPredicate","predicates"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/argsPass.js"],"sourcesContent":["import { useWith, curry, compose } from 'ramda';\nimport list from './list.js';\nimport isTruthy from './isTruthy.js';\n\n/**\n * Takes a combining predicate and a list of functions and returns a function which will map the\n * arguments it receives to the list of functions and returns the result of passing the values\n * returned from each function to the combining predicate. A combining predicate is a function that\n * combines a list of Boolean values into a single Boolean value, such as `R.any` or `R.all`. It\n * will test each value using `RA.isTruthy`, meaning the functions don't necessarily have to be\n * predicates.\n *\n * The function returned is curried to the number of functions supplied, and if called with more\n * arguments than functions, any remaining arguments are passed in to the combining predicate\n * untouched.\n *\n * @func argsPass\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.7.0|v2.7.0}\n * @category Logic\n * @sig ((* -> Boolean) -> [*] -> Boolean) -> [(* -> Boolean), ...] -> (*...) -> Boolean\n * @param {Function} combiningPredicate The predicate used to combine the values returned from the\n * list of functions\n * @param {Array} functions List of functions\n * @return {boolean} Returns the combined result of mapping arguments to functions\n * @example\n *\n * RA.argsPass(R.all, [RA.isArray, RA.isBoolean, RA.isString])([], false, 'abc') //=> true\n * RA.argsPass(R.all, [RA.isArray, RA.isBoolean, RA.isString])([], false, 1) //=> false\n * RA.argsPass(R.any, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, 'abc') //=> true\n * RA.argsPass(R.any, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, false) //=> false\n * RA.argsPass(R.none, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, false) //=> true\n * RA.argsPass(R.none, [RA.isArray, RA.isBoolean, RA.isString])({}, 1, 'abc') //=> false\n */\nvar argsPass = curry(function (combiningPredicate, predicates) {\n  return useWith(compose(combiningPredicate(isTruthy), list), predicates);\n});\nexport default argsPass;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,OAAO,QAAQ,OAAO;AAC/C,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGJ,KAAK,CAAC,UAAUK,kBAAkB,EAAEC,UAAU,EAAE;EAC7D,OAAOP,OAAO,CAACE,OAAO,CAACI,kBAAkB,CAACF,QAAQ,CAAC,EAAED,IAAI,CAAC,EAAEI,UAAU,CAAC;AACzE,CAAC,CAAC;AACF,eAAeF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}