{"ast":null,"code":"import { both, equals, length, pipe, curryN } from 'ramda';\nimport isArray from './isArray.js';\n\n/**\n * Checks if input value is a pair.\n *\n * @func isPair\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|v1.19.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link http://ramdajs.com/docs/#pair|R.pair}, {@link RA.isNotPair|isNotPair}\n * @example\n *\n * RA.isPair([]); // => false\n * RA.isPair([0]); // => false\n * RA.isPair([0, 1]); // => true\n * RA.isPair([0, 1, 2]); // => false\n * RA.isPair({ 0: 0, 1: 1 }); // => false\n * RA.isPair({ foo: 0, bar: 0 }); // => false\n */\nvar isPair = curryN(1, both(isArray, pipe(length, equals(2))));\nexport default isPair;","map":{"version":3,"names":["both","equals","length","pipe","curryN","isArray","isPair"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isPair.js"],"sourcesContent":["import { both, equals, length, pipe, curryN } from 'ramda';\nimport isArray from './isArray.js';\n\n/**\n * Checks if input value is a pair.\n *\n * @func isPair\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|v1.19.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link http://ramdajs.com/docs/#pair|R.pair}, {@link RA.isNotPair|isNotPair}\n * @example\n *\n * RA.isPair([]); // => false\n * RA.isPair([0]); // => false\n * RA.isPair([0, 1]); // => true\n * RA.isPair([0, 1, 2]); // => false\n * RA.isPair({ 0: 0, 1: 1 }); // => false\n * RA.isPair({ foo: 0, bar: 0 }); // => false\n */\nvar isPair = curryN(1, both(isArray, pipe(length, equals(2))));\nexport default isPair;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGF,MAAM,CAAC,CAAC,EAAEJ,IAAI,CAACK,OAAO,EAAEF,IAAI,CAACD,MAAM,EAAED,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,eAAeK,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}