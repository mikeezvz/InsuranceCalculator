{"ast":null,"code":"import { complement, both } from 'ramda';\nimport isInteger from './isInteger.js';\nimport isFinite from './isFinite.js';\n\n/**\n * Checks whether the passed value is a `float`.\n *\n * @func isFloat\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.14.0|v1.14.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotFloat|isNotFloat}\n * @example\n *\n * RA.isFloat(0); //=> false\n * RA.isFloat(1); //=> false\n * RA.isFloat(-100000); //=> false\n *\n * RA.isFloat(0.1);       //=> true\n * RA.isFloat(Math.PI);   //=> true\n *\n * RA.isFloat(NaN);       //=> false\n * RA.isFloat(Infinity);  //=> false\n * RA.isFloat(-Infinity); //=> false\n * RA.isFloat('10');      //=> false\n * RA.isFloat(true);      //=> false\n * RA.isFloat(false);     //=> false\n * RA.isFloat([1]);       //=> false\n */\nvar isFloat = both(isFinite, complement(isInteger));\nexport default isFloat;","map":{"version":3,"names":["complement","both","isInteger","isFinite","isFloat"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isFloat.js"],"sourcesContent":["import { complement, both } from 'ramda';\nimport isInteger from './isInteger.js';\nimport isFinite from './isFinite.js';\n\n/**\n * Checks whether the passed value is a `float`.\n *\n * @func isFloat\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.14.0|v1.14.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotFloat|isNotFloat}\n * @example\n *\n * RA.isFloat(0); //=> false\n * RA.isFloat(1); //=> false\n * RA.isFloat(-100000); //=> false\n *\n * RA.isFloat(0.1);       //=> true\n * RA.isFloat(Math.PI);   //=> true\n *\n * RA.isFloat(NaN);       //=> false\n * RA.isFloat(Infinity);  //=> false\n * RA.isFloat(-Infinity); //=> false\n * RA.isFloat('10');      //=> false\n * RA.isFloat(true);      //=> false\n * RA.isFloat(false);     //=> false\n * RA.isFloat([1]);       //=> false\n */\nvar isFloat = both(isFinite, complement(isInteger));\nexport default isFloat;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAGH,IAAI,CAACE,QAAQ,EAAEH,UAAU,CAACE,SAAS,CAAC,CAAC;AACnD,eAAeE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}