{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nexport default splitWhen;","map":{"version":3,"names":["_curry2","splitWhen","pred","list","idx","len","length","prefix","push","Array","prototype","slice","call"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/splitWhen.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nexport default splitWhen;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAaD,OAAO,CAAC,SAASC,SAASA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAClE,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAGF,IAAI,CAACG,MAAM;EACrB,IAAIC,MAAM,GAAG,EAAE;EACf,OAAOH,GAAG,GAAGC,GAAG,IAAI,CAACH,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IACpCG,MAAM,CAACC,IAAI,CAACL,IAAI,CAACC,GAAG,CAAC,CAAC;IACtBA,GAAG,IAAI,CAAC;EACV;EACA,OAAO,CAACG,MAAM,EAAEE,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACT,IAAI,EAAEC,GAAG,CAAC,CAAC;AACxD,CAAC,CAAC;AACF,eAAeH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}