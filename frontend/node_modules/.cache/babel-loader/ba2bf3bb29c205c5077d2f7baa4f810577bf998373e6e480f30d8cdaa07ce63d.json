{"ast":null,"code":"const JSONSerialiser = require('./JSONSerialiser');\nmodule.exports = class JSON06Serialiser extends JSONSerialiser {\n  serialise(element) {\n    if (!(element instanceof this.namespace.elements.Element)) {\n      throw new TypeError(`Given element \\`${element}\\` is not an Element instance`);\n    }\n    let variable;\n    if (element._attributes && element.attributes.get('variable')) {\n      variable = element.attributes.get('variable');\n    }\n    const payload = {\n      element: element.element\n    };\n    if (element._meta && element._meta.length > 0) {\n      payload.meta = this.serialiseObject(element.meta);\n    }\n    const isEnum = element.element === 'enum' || element.attributes.keys().indexOf('enumerations') !== -1;\n    if (isEnum) {\n      const attributes = this.enumSerialiseAttributes(element);\n      if (attributes) {\n        payload.attributes = attributes;\n      }\n    } else if (element._attributes && element._attributes.length > 0) {\n      let {\n        attributes\n      } = element;\n\n      // Meta attribute was renamed to metadata\n      if (attributes.get('metadata')) {\n        attributes = attributes.clone();\n        attributes.set('meta', attributes.get('metadata'));\n        attributes.remove('metadata');\n      }\n      if (element.element === 'member' && variable) {\n        attributes = attributes.clone();\n        attributes.remove('variable');\n      }\n      if (attributes.length > 0) {\n        payload.attributes = this.serialiseObject(attributes);\n      }\n    }\n    if (isEnum) {\n      payload.content = this.enumSerialiseContent(element, payload);\n    } else if (this[`${element.element}SerialiseContent`]) {\n      payload.content = this[`${element.element}SerialiseContent`](element, payload);\n    } else if (element.content !== undefined) {\n      let content;\n      if (variable && element.content.key) {\n        content = element.content.clone();\n        content.key.attributes.set('variable', variable);\n        content = this.serialiseContent(content);\n      } else {\n        content = this.serialiseContent(element.content);\n      }\n      if (this.shouldSerialiseContent(element, content)) {\n        payload.content = content;\n      }\n    } else if (this.shouldSerialiseContent(element, element.content) && element instanceof this.namespace.elements.Array) {\n      payload.content = [];\n    }\n    return payload;\n  }\n  shouldSerialiseContent(element, content) {\n    if (element.element === 'parseResult' || element.element === 'httpRequest' || element.element === 'httpResponse' || element.element === 'category' || element.element === 'link') {\n      return true;\n    }\n    if (content === undefined) {\n      return false;\n    }\n    if (Array.isArray(content) && content.length === 0) {\n      return false;\n    }\n    return true;\n  }\n  refSerialiseContent(element, payload) {\n    delete payload.attributes;\n    return {\n      href: element.toValue(),\n      path: element.path.toValue()\n    };\n  }\n  sourceMapSerialiseContent(element) {\n    return element.toValue();\n  }\n  dataStructureSerialiseContent(element) {\n    return [this.serialiseContent(element.content)];\n  }\n  enumSerialiseAttributes(element) {\n    const attributes = element.attributes.clone();\n\n    // Enumerations attribute was is placed inside content (see `enumSerialiseContent` below)\n    const enumerations = attributes.remove('enumerations') || new this.namespace.elements.Array([]);\n\n    // Remove fixed type attribute from samples and default\n    const defaultValue = attributes.get('default');\n    let samples = attributes.get('samples') || new this.namespace.elements.Array([]);\n    if (defaultValue && defaultValue.content) {\n      if (defaultValue.content.attributes) {\n        defaultValue.content.attributes.remove('typeAttributes');\n      }\n      // Wrap default in array (not sure it is really needed because tests pass without this line)\n      attributes.set('default', new this.namespace.elements.Array([defaultValue.content]));\n    }\n\n    // Strip typeAttributes from samples, 0.6 doesn't usually contain them in samples\n    samples.forEach(sample => {\n      if (sample.content && sample.content.element) {\n        sample.content.attributes.remove('typeAttributes');\n      }\n    });\n\n    // Content -> Samples\n    if (element.content && enumerations.length !== 0) {\n      // If we don't have enumerations, content should stay in\n      // content (enumerations) as per Drafter 3 behaviour.\n      samples.unshift(element.content);\n    }\n    samples = samples.map(sample => {\n      if (sample instanceof this.namespace.elements.Array) {\n        return [sample];\n      }\n      return new this.namespace.elements.Array([sample.content]);\n    });\n    if (samples.length) {\n      attributes.set('samples', samples);\n    }\n    if (attributes.length > 0) {\n      return this.serialiseObject(attributes);\n    }\n    return undefined;\n  }\n  enumSerialiseContent(element) {\n    // In API Elements < 1.0, the content is the enumerations\n    // If we don't have an enumerations, use the value (Drafter 3 behaviour)\n\n    if (element._attributes) {\n      const enumerations = element.attributes.get('enumerations');\n      if (enumerations && enumerations.length > 0) {\n        return enumerations.content.map(enumeration => {\n          const e = enumeration.clone();\n          e.attributes.remove('typeAttributes');\n          return this.serialise(e);\n        });\n      }\n    }\n    if (element.content) {\n      const value = element.content.clone();\n      value.attributes.remove('typeAttributes');\n      return [this.serialise(value)];\n    }\n    return [];\n  }\n  deserialise(value) {\n    if (typeof value === 'string') {\n      return new this.namespace.elements.String(value);\n    }\n    if (typeof value === 'number') {\n      return new this.namespace.elements.Number(value);\n    }\n    if (typeof value === 'boolean') {\n      return new this.namespace.elements.Boolean(value);\n    }\n    if (value === null) {\n      return new this.namespace.elements.Null();\n    }\n    if (Array.isArray(value)) {\n      return new this.namespace.elements.Array(value.map(this.deserialise, this));\n    }\n    const ElementClass = this.namespace.getElementClass(value.element);\n    const element = new ElementClass();\n    if (element.element !== value.element) {\n      element.element = value.element;\n    }\n    if (value.meta) {\n      this.deserialiseObject(value.meta, element.meta);\n    }\n    if (value.attributes) {\n      this.deserialiseObject(value.attributes, element.attributes);\n    }\n    const content = this.deserialiseContent(value.content);\n    if (content !== undefined || element.content === null) {\n      element.content = content;\n    }\n    if (element.element === 'enum') {\n      // Grab enumerations from content\n      if (element.content) {\n        element.attributes.set('enumerations', element.content);\n      }\n\n      // Unwrap the sample value (inside double array)\n      let samples = element.attributes.get('samples');\n      element.attributes.remove('samples');\n      if (samples) {\n        // Re-wrap samples from array of array to array of enum's\n\n        const existingSamples = samples;\n        samples = new this.namespace.elements.Array();\n        existingSamples.forEach(existingSample => {\n          existingSample.forEach(sample => {\n            const enumElement = new ElementClass(sample);\n            enumElement.element = element.element;\n            samples.push(enumElement);\n          });\n        });\n        const sample = samples.shift();\n        if (sample) {\n          element.content = sample.content;\n        } else {\n          element.content = undefined;\n        }\n        element.attributes.set('samples', samples);\n      } else {\n        element.content = undefined;\n      }\n\n      // Unwrap the default value\n      let defaultValue = element.attributes.get('default');\n      if (defaultValue && defaultValue.length > 0) {\n        defaultValue = defaultValue.get(0);\n        const defaultElement = new ElementClass(defaultValue);\n        defaultElement.element = element.element;\n        element.attributes.set('default', defaultElement);\n      }\n    } else if (element.element === 'dataStructure' && Array.isArray(element.content)) {\n      [element.content] = element.content;\n    } else if (element.element === 'category') {\n      // \"meta\" attribute has been renamed to metadata\n      const metadata = element.attributes.get('meta');\n      if (metadata) {\n        element.attributes.set('metadata', metadata);\n        element.attributes.remove('meta');\n      }\n    } else if (element.element === 'member' && element.key && element.key._attributes && element.key._attributes.getValue('variable')) {\n      element.attributes.set('variable', element.key.attributes.get('variable'));\n      element.key.attributes.remove('variable');\n    }\n    return element;\n  }\n\n  // Private API\n\n  serialiseContent(content) {\n    if (content instanceof this.namespace.elements.Element) {\n      return this.serialise(content);\n    }\n    if (content instanceof this.namespace.KeyValuePair) {\n      const pair = {\n        key: this.serialise(content.key)\n      };\n      if (content.value) {\n        pair.value = this.serialise(content.value);\n      }\n      return pair;\n    }\n    if (content && content.map) {\n      return content.map(this.serialise, this);\n    }\n    return content;\n  }\n  deserialiseContent(content) {\n    if (content) {\n      if (content.element) {\n        return this.deserialise(content);\n      }\n      if (content.key) {\n        const pair = new this.namespace.KeyValuePair(this.deserialise(content.key));\n        if (content.value) {\n          pair.value = this.deserialise(content.value);\n        }\n        return pair;\n      }\n      if (content.map) {\n        return content.map(this.deserialise, this);\n      }\n    }\n    return content;\n  }\n  shouldRefract(element) {\n    if (element._attributes && element.attributes.keys().length || element._meta && element.meta.keys().length) {\n      return true;\n    }\n    if (element.element === 'enum') {\n      // enum elements are treated like primitives (array)\n      return false;\n    }\n    if (element.element !== element.primitive() || element.element === 'member') {\n      return true;\n    }\n    return false;\n  }\n  convertKeyToRefract(key, item) {\n    if (this.shouldRefract(item)) {\n      return this.serialise(item);\n    }\n    if (item.element === 'enum') {\n      return this.serialiseEnum(item);\n    }\n    if (item.element === 'array') {\n      return item.map(subItem => {\n        if (this.shouldRefract(subItem) || key === 'default') {\n          return this.serialise(subItem);\n        }\n        if (subItem.element === 'array' || subItem.element === 'object' || subItem.element === 'enum') {\n          // items for array or enum inside array are always serialised\n          return subItem.children.map(subSubItem => this.serialise(subSubItem));\n        }\n        return subItem.toValue();\n      });\n    }\n    if (item.element === 'object') {\n      return (item.content || []).map(this.serialise, this);\n    }\n    return item.toValue();\n  }\n  serialiseEnum(element) {\n    return element.children.map(item => this.serialise(item));\n  }\n  serialiseObject(obj) {\n    const result = {};\n    obj.forEach((value, key) => {\n      if (value) {\n        const keyValue = key.toValue();\n        result[keyValue] = this.convertKeyToRefract(keyValue, value);\n      }\n    });\n    return result;\n  }\n  deserialiseObject(from, to) {\n    Object.keys(from).forEach(key => {\n      to.set(key, this.deserialise(from[key]));\n    });\n  }\n};","map":{"version":3,"names":["JSONSerialiser","require","module","exports","JSON06Serialiser","serialise","element","namespace","elements","Element","TypeError","variable","_attributes","attributes","get","payload","_meta","length","meta","serialiseObject","isEnum","keys","indexOf","enumSerialiseAttributes","clone","set","remove","content","enumSerialiseContent","undefined","key","serialiseContent","shouldSerialiseContent","Array","isArray","refSerialiseContent","href","toValue","path","sourceMapSerialiseContent","dataStructureSerialiseContent","enumerations","defaultValue","samples","forEach","sample","unshift","map","enumeration","e","value","deserialise","String","Number","Boolean","Null","ElementClass","getElementClass","deserialiseObject","deserialiseContent","existingSamples","existingSample","enumElement","push","shift","defaultElement","metadata","getValue","KeyValuePair","pair","shouldRefract","primitive","convertKeyToRefract","item","serialiseEnum","subItem","children","subSubItem","obj","result","keyValue","from","to","Object"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/minim/lib/serialisers/JSON06Serialiser.js"],"sourcesContent":["const JSONSerialiser = require('./JSONSerialiser');\n\nmodule.exports = class JSON06Serialiser extends JSONSerialiser {\n  serialise(element) {\n    if (!(element instanceof this.namespace.elements.Element)) {\n      throw new TypeError(`Given element \\`${element}\\` is not an Element instance`);\n    }\n\n    let variable;\n    if (element._attributes && element.attributes.get('variable')) {\n      variable = element.attributes.get('variable');\n    }\n\n    const payload = {\n      element: element.element,\n    };\n\n    if (element._meta && element._meta.length > 0) {\n      payload.meta = this.serialiseObject(element.meta);\n    }\n\n    const isEnum = (element.element === 'enum' || element.attributes.keys().indexOf('enumerations') !== -1);\n\n    if (isEnum) {\n      const attributes = this.enumSerialiseAttributes(element);\n\n      if (attributes) {\n        payload.attributes = attributes;\n      }\n    } else if (element._attributes && element._attributes.length > 0) {\n      let { attributes } = element;\n\n      // Meta attribute was renamed to metadata\n      if (attributes.get('metadata')) {\n        attributes = attributes.clone();\n        attributes.set('meta', attributes.get('metadata'));\n        attributes.remove('metadata');\n      }\n\n      if (element.element === 'member' && variable) {\n        attributes = attributes.clone();\n        attributes.remove('variable');\n      }\n\n      if (attributes.length > 0) {\n        payload.attributes = this.serialiseObject(attributes);\n      }\n    }\n\n    if (isEnum) {\n      payload.content = this.enumSerialiseContent(element, payload);\n    } else if (this[`${element.element}SerialiseContent`]) {\n      payload.content = this[`${element.element}SerialiseContent`](element, payload);\n    } else if (element.content !== undefined) {\n      let content;\n\n      if (variable && element.content.key) {\n        content = element.content.clone();\n        content.key.attributes.set('variable', variable);\n        content = this.serialiseContent(content);\n      } else {\n        content = this.serialiseContent(element.content);\n      }\n\n      if (this.shouldSerialiseContent(element, content)) {\n        payload.content = content;\n      }\n    } else if (this.shouldSerialiseContent(element, element.content) && element instanceof this.namespace.elements.Array) {\n      payload.content = [];\n    }\n\n    return payload;\n  }\n\n  shouldSerialiseContent(element, content) {\n    if (element.element === 'parseResult' || element.element === 'httpRequest'\n        || element.element === 'httpResponse' || element.element === 'category'\n        || element.element === 'link') {\n      return true;\n    }\n\n    if (content === undefined) {\n      return false;\n    }\n\n    if (Array.isArray(content) && content.length === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  refSerialiseContent(element, payload) {\n    delete payload.attributes;\n\n    return {\n      href: element.toValue(),\n      path: element.path.toValue(),\n    };\n  }\n\n  sourceMapSerialiseContent(element) {\n    return element.toValue();\n  }\n\n  dataStructureSerialiseContent(element) {\n    return [this.serialiseContent(element.content)];\n  }\n\n  enumSerialiseAttributes(element) {\n    const attributes = element.attributes.clone();\n\n    // Enumerations attribute was is placed inside content (see `enumSerialiseContent` below)\n    const enumerations = attributes.remove('enumerations') || new this.namespace.elements.Array([]);\n\n    // Remove fixed type attribute from samples and default\n    const defaultValue = attributes.get('default');\n    let samples = attributes.get('samples') || new this.namespace.elements.Array([]);\n\n    if (defaultValue && defaultValue.content) {\n      if (defaultValue.content.attributes) {\n        defaultValue.content.attributes.remove('typeAttributes');\n      }\n      // Wrap default in array (not sure it is really needed because tests pass without this line)\n      attributes.set('default', new this.namespace.elements.Array([defaultValue.content]));\n    }\n\n    // Strip typeAttributes from samples, 0.6 doesn't usually contain them in samples\n    samples.forEach((sample) => {\n      if (sample.content && sample.content.element) {\n        sample.content.attributes.remove('typeAttributes');\n      }\n    });\n\n    // Content -> Samples\n    if (element.content && enumerations.length !== 0) {\n      // If we don't have enumerations, content should stay in\n      // content (enumerations) as per Drafter 3 behaviour.\n      samples.unshift(element.content);\n    }\n\n    samples = samples.map((sample) => {\n      if (sample instanceof this.namespace.elements.Array) {\n        return [sample];\n      }\n\n      return new this.namespace.elements.Array([sample.content]);\n    });\n\n    if (samples.length) {\n      attributes.set('samples', samples);\n    }\n\n    if (attributes.length > 0) {\n      return this.serialiseObject(attributes);\n    }\n\n    return undefined;\n  }\n\n  enumSerialiseContent(element) {\n    // In API Elements < 1.0, the content is the enumerations\n    // If we don't have an enumerations, use the value (Drafter 3 behaviour)\n\n    if (element._attributes) {\n      const enumerations = element.attributes.get('enumerations');\n\n      if (enumerations && enumerations.length > 0) {\n        return enumerations.content.map((enumeration) => {\n          const e = enumeration.clone();\n          e.attributes.remove('typeAttributes');\n          return this.serialise(e);\n        });\n      }\n    }\n\n    if (element.content) {\n      const value = element.content.clone();\n      value.attributes.remove('typeAttributes');\n      return [this.serialise(value)];\n    }\n\n    return [];\n  }\n\n  deserialise(value) {\n    if (typeof value === 'string') {\n      return new this.namespace.elements.String(value);\n    }\n\n    if (typeof value === 'number') {\n      return new this.namespace.elements.Number(value);\n    }\n\n    if (typeof value === 'boolean') {\n      return new this.namespace.elements.Boolean(value);\n    }\n\n    if (value === null) {\n      return new this.namespace.elements.Null();\n    }\n\n    if (Array.isArray(value)) {\n      return new this.namespace.elements.Array(value.map(this.deserialise, this));\n    }\n\n    const ElementClass = this.namespace.getElementClass(value.element);\n    const element = new ElementClass();\n\n    if (element.element !== value.element) {\n      element.element = value.element;\n    }\n\n    if (value.meta) {\n      this.deserialiseObject(value.meta, element.meta);\n    }\n\n    if (value.attributes) {\n      this.deserialiseObject(value.attributes, element.attributes);\n    }\n\n    const content = this.deserialiseContent(value.content);\n    if (content !== undefined || element.content === null) {\n      element.content = content;\n    }\n\n    if (element.element === 'enum') {\n      // Grab enumerations from content\n      if (element.content) {\n        element.attributes.set('enumerations', element.content);\n      }\n\n      // Unwrap the sample value (inside double array)\n      let samples = element.attributes.get('samples');\n      element.attributes.remove('samples');\n\n      if (samples) {\n        // Re-wrap samples from array of array to array of enum's\n\n        const existingSamples = samples;\n\n        samples = new this.namespace.elements.Array();\n        existingSamples.forEach((existingSample) => {\n          existingSample.forEach((sample) => {\n            const enumElement = new ElementClass(sample);\n            enumElement.element = element.element;\n            samples.push(enumElement);\n          });\n        });\n\n        const sample = samples.shift();\n\n        if (sample) {\n          element.content = sample.content;\n        } else {\n          element.content = undefined;\n        }\n\n        element.attributes.set('samples', samples);\n      } else {\n        element.content = undefined;\n      }\n\n      // Unwrap the default value\n      let defaultValue = element.attributes.get('default');\n      if (defaultValue && defaultValue.length > 0) {\n        defaultValue = defaultValue.get(0);\n        const defaultElement = new ElementClass(defaultValue);\n        defaultElement.element = element.element;\n        element.attributes.set('default', defaultElement);\n      }\n    } else if (element.element === 'dataStructure' && Array.isArray(element.content)) {\n      [element.content] = element.content;\n    } else if (element.element === 'category') {\n      // \"meta\" attribute has been renamed to metadata\n      const metadata = element.attributes.get('meta');\n\n      if (metadata) {\n        element.attributes.set('metadata', metadata);\n        element.attributes.remove('meta');\n      }\n    } else if (element.element === 'member' && element.key && element.key._attributes && element.key._attributes.getValue('variable')) {\n      element.attributes.set('variable', element.key.attributes.get('variable'));\n      element.key.attributes.remove('variable');\n    }\n\n    return element;\n  }\n\n  // Private API\n\n  serialiseContent(content) {\n    if (content instanceof this.namespace.elements.Element) {\n      return this.serialise(content);\n    }\n\n    if (content instanceof this.namespace.KeyValuePair) {\n      const pair = {\n        key: this.serialise(content.key),\n      };\n\n      if (content.value) {\n        pair.value = this.serialise(content.value);\n      }\n\n      return pair;\n    }\n\n    if (content && content.map) {\n      return content.map(this.serialise, this);\n    }\n\n    return content;\n  }\n\n  deserialiseContent(content) {\n    if (content) {\n      if (content.element) {\n        return this.deserialise(content);\n      }\n\n      if (content.key) {\n        const pair = new this.namespace.KeyValuePair(this.deserialise(content.key));\n\n        if (content.value) {\n          pair.value = this.deserialise(content.value);\n        }\n\n        return pair;\n      }\n\n      if (content.map) {\n        return content.map(this.deserialise, this);\n      }\n    }\n\n    return content;\n  }\n\n  shouldRefract(element) {\n    if ((element._attributes && element.attributes.keys().length) || (element._meta && element.meta.keys().length)) {\n      return true;\n    }\n\n    if (element.element === 'enum') {\n      // enum elements are treated like primitives (array)\n      return false;\n    }\n\n    if (element.element !== element.primitive() || element.element === 'member') {\n      return true;\n    }\n\n    return false;\n  }\n\n  convertKeyToRefract(key, item) {\n    if (this.shouldRefract(item)) {\n      return this.serialise(item);\n    }\n\n    if (item.element === 'enum') {\n      return this.serialiseEnum(item);\n    }\n\n    if (item.element === 'array') {\n      return item.map((subItem) => {\n        if (this.shouldRefract(subItem) || key === 'default') {\n          return this.serialise(subItem);\n        }\n\n        if (subItem.element === 'array' || subItem.element === 'object' || subItem.element === 'enum') {\n          // items for array or enum inside array are always serialised\n          return subItem.children.map(subSubItem => this.serialise(subSubItem));\n        }\n\n        return subItem.toValue();\n      });\n    }\n\n    if (item.element === 'object') {\n      return (item.content || []).map(this.serialise, this);\n    }\n\n    return item.toValue();\n  }\n\n  serialiseEnum(element) {\n    return element.children.map(item => this.serialise(item));\n  }\n\n  serialiseObject(obj) {\n    const result = {};\n\n    obj.forEach((value, key) => {\n      if (value) {\n        const keyValue = key.toValue();\n        result[keyValue] = this.convertKeyToRefract(keyValue, value);\n      }\n    });\n\n    return result;\n  }\n\n  deserialiseObject(from, to) {\n    Object.keys(from).forEach((key) => {\n      to.set(key, this.deserialise(from[key]));\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}