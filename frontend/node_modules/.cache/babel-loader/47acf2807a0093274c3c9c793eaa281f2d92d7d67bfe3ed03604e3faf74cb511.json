{"ast":null,"code":"import { replace } from 'ramda';\nimport isRegExp from '../../isRegExp.js';\nimport escapeRegExp from '../../escapeRegExp.js';\nvar checkArguments = function checkArguments(searchValue, replaceValue, str) {\n  if (str == null || searchValue == null || replaceValue == null) {\n    throw TypeError('Input values must not be `null` or `undefined`');\n  }\n};\nvar checkValue = function checkValue(value, valueName) {\n  if (typeof value !== 'string') {\n    if (!(value instanceof String)) {\n      throw TypeError(\"`\".concat(valueName, \"` must be a string\"));\n    }\n  }\n};\nvar checkSearchValue = function checkSearchValue(searchValue) {\n  if (typeof searchValue !== 'string' && !(searchValue instanceof String) && !(searchValue instanceof RegExp)) {\n    throw TypeError('`searchValue` must be a string or an regexp');\n  }\n};\nvar replaceAll = function replaceAll(searchValue, replaceValue, str) {\n  checkArguments(searchValue, replaceValue, str);\n  checkValue(str, 'str');\n  checkValue(replaceValue, 'replaceValue');\n  checkSearchValue(searchValue);\n  var regexp = new RegExp(isRegExp(searchValue) ? searchValue : escapeRegExp(searchValue), 'g');\n  return replace(regexp, replaceValue, str);\n};\nexport default replaceAll;","map":{"version":3,"names":["replace","isRegExp","escapeRegExp","checkArguments","searchValue","replaceValue","str","TypeError","checkValue","value","valueName","String","concat","checkSearchValue","RegExp","replaceAll","regexp"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/internal/ponyfills/String.replaceAll.js"],"sourcesContent":["import { replace } from 'ramda';\nimport isRegExp from '../../isRegExp.js';\nimport escapeRegExp from '../../escapeRegExp.js';\nvar checkArguments = function checkArguments(searchValue, replaceValue, str) {\n  if (str == null || searchValue == null || replaceValue == null) {\n    throw TypeError('Input values must not be `null` or `undefined`');\n  }\n};\nvar checkValue = function checkValue(value, valueName) {\n  if (typeof value !== 'string') {\n    if (!(value instanceof String)) {\n      throw TypeError(\"`\".concat(valueName, \"` must be a string\"));\n    }\n  }\n};\nvar checkSearchValue = function checkSearchValue(searchValue) {\n  if (typeof searchValue !== 'string' && !(searchValue instanceof String) && !(searchValue instanceof RegExp)) {\n    throw TypeError('`searchValue` must be a string or an regexp');\n  }\n};\nvar replaceAll = function replaceAll(searchValue, replaceValue, str) {\n  checkArguments(searchValue, replaceValue, str);\n  checkValue(str, 'str');\n  checkValue(replaceValue, 'replaceValue');\n  checkSearchValue(searchValue);\n  var regexp = new RegExp(isRegExp(searchValue) ? searchValue : escapeRegExp(searchValue), 'g');\n  return replace(regexp, replaceValue, str);\n};\nexport default replaceAll;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,YAAY,MAAM,uBAAuB;AAChD,IAAIC,cAAc,GAAG,SAASA,cAAcA,CAACC,WAAW,EAAEC,YAAY,EAAEC,GAAG,EAAE;EAC3E,IAAIA,GAAG,IAAI,IAAI,IAAIF,WAAW,IAAI,IAAI,IAAIC,YAAY,IAAI,IAAI,EAAE;IAC9D,MAAME,SAAS,CAAC,gDAAgD,CAAC;EACnE;AACF,CAAC;AACD,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,KAAK,EAAEC,SAAS,EAAE;EACrD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAI,EAAEA,KAAK,YAAYE,MAAM,CAAC,EAAE;MAC9B,MAAMJ,SAAS,CAAC,GAAG,CAACK,MAAM,CAACF,SAAS,EAAE,oBAAoB,CAAC,CAAC;IAC9D;EACF;AACF,CAAC;AACD,IAAIG,gBAAgB,GAAG,SAASA,gBAAgBA,CAACT,WAAW,EAAE;EAC5D,IAAI,OAAOA,WAAW,KAAK,QAAQ,IAAI,EAAEA,WAAW,YAAYO,MAAM,CAAC,IAAI,EAAEP,WAAW,YAAYU,MAAM,CAAC,EAAE;IAC3G,MAAMP,SAAS,CAAC,6CAA6C,CAAC;EAChE;AACF,CAAC;AACD,IAAIQ,UAAU,GAAG,SAASA,UAAUA,CAACX,WAAW,EAAEC,YAAY,EAAEC,GAAG,EAAE;EACnEH,cAAc,CAACC,WAAW,EAAEC,YAAY,EAAEC,GAAG,CAAC;EAC9CE,UAAU,CAACF,GAAG,EAAE,KAAK,CAAC;EACtBE,UAAU,CAACH,YAAY,EAAE,cAAc,CAAC;EACxCQ,gBAAgB,CAACT,WAAW,CAAC;EAC7B,IAAIY,MAAM,GAAG,IAAIF,MAAM,CAACb,QAAQ,CAACG,WAAW,CAAC,GAAGA,WAAW,GAAGF,YAAY,CAACE,WAAW,CAAC,EAAE,GAAG,CAAC;EAC7F,OAAOJ,OAAO,CAACgB,MAAM,EAAEX,YAAY,EAAEC,GAAG,CAAC;AAC3C,CAAC;AACD,eAAeS,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}