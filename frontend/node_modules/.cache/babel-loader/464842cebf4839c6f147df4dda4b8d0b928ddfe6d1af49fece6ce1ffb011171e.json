{"ast":null,"code":"import { curry, complement, compose, allPass } from 'ramda';\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a given list of\n * arguments if one or more of the provided predicates is not satisfied by those arguments. It is\n * the complement of Ramda's allPass.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func notAllPass\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see {@link http://ramdajs.com/docs/#allPass|R.allPass}\n * @example\n *\n * const gt10 = R.gt(R.__, 10)\n * const even = (x) => x % 2 === 0;\n * const f = RA.notAllPass([gt10, even]);\n *\n * f(12); //=> false\n * f(8); //=> true\n * f(11); //=> true\n * f(9); //=> true\n */\nvar notAllPass = curry(compose(complement, allPass));\nexport default notAllPass;","map":{"version":3,"names":["curry","complement","compose","allPass","notAllPass"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/notAllPass.js"],"sourcesContent":["import { curry, complement, compose, allPass } from 'ramda';\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a given list of\n * arguments if one or more of the provided predicates is not satisfied by those arguments. It is\n * the complement of Ramda's allPass.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func notAllPass\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see {@link http://ramdajs.com/docs/#allPass|R.allPass}\n * @example\n *\n * const gt10 = R.gt(R.__, 10)\n * const even = (x) => x % 2 === 0;\n * const f = RA.notAllPass([gt10, even]);\n *\n * f(12); //=> false\n * f(8); //=> true\n * f(11); //=> true\n * f(9); //=> true\n */\nvar notAllPass = curry(compose(complement, allPass));\nexport default notAllPass;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,QAAQ,OAAO;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGJ,KAAK,CAACE,OAAO,CAACD,UAAU,EAAEE,OAAO,CAAC,CAAC;AACpD,eAAeC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}