{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n * Note that, the returned function is actually a ramda style\n * curryied function, which can accept one or more arguments in each\n * function calling.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry, R.curryN\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nvar uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\nexport default uncurryN;","map":{"version":3,"names":["_curry2","curryN","uncurryN","depth","fn","currentDepth","value","idx","endIdx","arguments","length","apply","Array","prototype","slice","call"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/uncurryN.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\nimport curryN from \"./curryN.js\";\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n * Note that, the returned function is actually a ramda style\n * curryied function, which can accept one or more arguments in each\n * function calling.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry, R.curryN\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nvar uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\nexport default uncurryN;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAaF,OAAO,CAAC,SAASE,QAAQA,CAACC,KAAK,EAAEC,EAAE,EAAE;EAC/D,OAAOH,MAAM,CAACE,KAAK,EAAE,YAAY;IAC/B,IAAIE,YAAY,GAAG,CAAC;IACpB,IAAIC,KAAK,GAAGF,EAAE;IACd,IAAIG,GAAG,GAAG,CAAC;IACX,IAAIC,MAAM;IACV,OAAOH,YAAY,IAAIF,KAAK,IAAI,OAAOG,KAAK,KAAK,UAAU,EAAE;MAC3DE,MAAM,GAAGH,YAAY,KAAKF,KAAK,GAAGM,SAAS,CAACC,MAAM,GAAGH,GAAG,GAAGD,KAAK,CAACI,MAAM;MACvEJ,KAAK,GAAGA,KAAK,CAACK,KAAK,CAAC,IAAI,EAAEC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACN,SAAS,EAAEF,GAAG,EAAEC,MAAM,CAAC,CAAC;MAC7EH,YAAY,IAAI,CAAC;MACjBE,GAAG,GAAGC,MAAM;IACd;IACA,OAAOF,KAAK;EACd,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}