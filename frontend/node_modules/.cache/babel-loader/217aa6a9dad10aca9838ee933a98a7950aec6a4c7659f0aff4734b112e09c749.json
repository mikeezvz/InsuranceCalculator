{"ast":null,"code":"import { values, both, complement, pipe, converge, identical, length } from 'ramda';\nimport isArray from './isArray.js';\n\n/**\n * Checks if input value is a sparse Array.\n * An array with at least one \"empty slot\" in it is often called a \"sparse array.\"\n * Empty slot doesn't mean that the slot contains `null` or `undefined` values,\n * but rather that the slots don't exist.\n *\n * @func isSparseArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.20.0|v2.20.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} list The list to test\n * @return {boolean}\n * @see {@link https://github.com/getify/You-Dont-Know-JS/blob/f0d591b6502c080b92e18fc470432af8144db610/types%20%26%20grammar/ch3.md#array|Sparse Arrays}, {@link RA.isArray|isArray}\n * @example\n *\n * RA.isSparseArray(new Array(3)); // => true\n * RA.isSparseArray([1,,3]); // => true\n *\n * const list = [1, 2, 3];\n * delete list[1];\n * RA.isSparseArray(list); // => true\n *\n * RA.isSparseArray([1, 2, 3]); // => false\n */\nvar isSparseArray = both(isArray, converge(complement(identical), [pipe(values, length), length]));\nexport default isSparseArray;","map":{"version":3,"names":["values","both","complement","pipe","converge","identical","length","isArray","isSparseArray"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isSparseArray.js"],"sourcesContent":["import { values, both, complement, pipe, converge, identical, length } from 'ramda';\nimport isArray from './isArray.js';\n\n/**\n * Checks if input value is a sparse Array.\n * An array with at least one \"empty slot\" in it is often called a \"sparse array.\"\n * Empty slot doesn't mean that the slot contains `null` or `undefined` values,\n * but rather that the slots don't exist.\n *\n * @func isSparseArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.20.0|v2.20.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} list The list to test\n * @return {boolean}\n * @see {@link https://github.com/getify/You-Dont-Know-JS/blob/f0d591b6502c080b92e18fc470432af8144db610/types%20%26%20grammar/ch3.md#array|Sparse Arrays}, {@link RA.isArray|isArray}\n * @example\n *\n * RA.isSparseArray(new Array(3)); // => true\n * RA.isSparseArray([1,,3]); // => true\n *\n * const list = [1, 2, 3];\n * delete list[1];\n * RA.isSparseArray(list); // => true\n *\n * RA.isSparseArray([1, 2, 3]); // => false\n */\nvar isSparseArray = both(isArray, converge(complement(identical), [pipe(values, length), length]));\nexport default isSparseArray;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnF,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAGP,IAAI,CAACM,OAAO,EAAEH,QAAQ,CAACF,UAAU,CAACG,SAAS,CAAC,EAAE,CAACF,IAAI,CAACH,MAAM,EAAEM,MAAM,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;AAClG,eAAeE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}