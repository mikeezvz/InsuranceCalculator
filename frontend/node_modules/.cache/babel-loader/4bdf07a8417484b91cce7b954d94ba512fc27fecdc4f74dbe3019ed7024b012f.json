{"ast":null,"code":"import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Checks if input value is `Boolean`.\n *\n * @func isBoolean\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.3.0|v0.3.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotBoolean|isNotBoolean}\n * @example\n *\n * RA.isBoolean(false); //=> true\n * RA.isBoolean(true); //=> true\n * RA.isBoolean(null); //=> false\n */\nvar isBoolean = curryN(1, pipe(type, identical('Boolean')));\nexport default isBoolean;","map":{"version":3,"names":["type","identical","pipe","curryN","isBoolean"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isBoolean.js"],"sourcesContent":["import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Checks if input value is `Boolean`.\n *\n * @func isBoolean\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.3.0|v0.3.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotBoolean|isNotBoolean}\n * @example\n *\n * RA.isBoolean(false); //=> true\n * RA.isBoolean(true); //=> true\n * RA.isBoolean(null); //=> false\n */\nvar isBoolean = curryN(1, pipe(type, identical('Boolean')));\nexport default isBoolean;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,QAAQ,OAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGD,MAAM,CAAC,CAAC,EAAED,IAAI,CAACF,IAAI,EAAEC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;AAC3D,eAAeG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}