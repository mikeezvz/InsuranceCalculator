{"ast":null,"code":"import { dispatchPluginsSync } from \"./plugins/dispatcher/index.mjs\";\nimport { getNodeType } from \"../traversal/visitor.mjs\";\nimport { cloneDeep } from \"../clone/index.mjs\";\nimport { isElement } from \"../predicates/index.mjs\";\nimport createToolbox from \"./toolbox.mjs\";\nconst refract = (value, {\n  Type,\n  plugins = []\n}) => {\n  /**\n   * This is where values gets refracted into generic ApiDOM.\n   * We don't allow consumers to hook into this translation.\n   * Though we allow consumers to define their onw plugins on already transformed ApiDOM.\n   */\n  const element = new Type(value);\n  if (isElement(value)) {\n    if (value.meta.length > 0) {\n      element.meta = cloneDeep(value.meta);\n    }\n    if (value.attributes.length > 0) {\n      element.attributes = cloneDeep(value.attributes);\n    }\n  }\n\n  /**\n   * Run plugins only when necessary.\n   * Running plugins visitors means extra single traversal === performance hit.\n   */\n  return dispatchPluginsSync(element, plugins, {\n    toolboxCreator: createToolbox,\n    visitorOptions: {\n      nodeTypeGetter: getNodeType\n    }\n  });\n};\nexport const createRefractor = Type => (value, options = {}) => refract(value, {\n  ...options,\n  Type\n});\nexport default refract;","map":{"version":3,"names":["dispatchPluginsSync","getNodeType","cloneDeep","isElement","createToolbox","refract","value","Type","plugins","element","meta","length","attributes","toolboxCreator","visitorOptions","nodeTypeGetter","createRefractor","options"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-core/es/refractor/index.mjs"],"sourcesContent":["import { dispatchPluginsSync } from \"./plugins/dispatcher/index.mjs\";\nimport { getNodeType } from \"../traversal/visitor.mjs\";\nimport { cloneDeep } from \"../clone/index.mjs\";\nimport { isElement } from \"../predicates/index.mjs\";\nimport createToolbox from \"./toolbox.mjs\";\nconst refract = (value, {\n  Type,\n  plugins = []\n}) => {\n  /**\n   * This is where values gets refracted into generic ApiDOM.\n   * We don't allow consumers to hook into this translation.\n   * Though we allow consumers to define their onw plugins on already transformed ApiDOM.\n   */\n  const element = new Type(value);\n  if (isElement(value)) {\n    if (value.meta.length > 0) {\n      element.meta = cloneDeep(value.meta);\n    }\n    if (value.attributes.length > 0) {\n      element.attributes = cloneDeep(value.attributes);\n    }\n  }\n\n  /**\n   * Run plugins only when necessary.\n   * Running plugins visitors means extra single traversal === performance hit.\n   */\n  return dispatchPluginsSync(element, plugins, {\n    toolboxCreator: createToolbox,\n    visitorOptions: {\n      nodeTypeGetter: getNodeType\n    }\n  });\n};\nexport const createRefractor = Type => (value, options = {}) => refract(value, {\n  ...options,\n  Type\n});\nexport default refract;"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAOC,aAAa,MAAM,eAAe;AACzC,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAE;EACtBC,IAAI;EACJC,OAAO,GAAG;AACZ,CAAC,KAAK;EACJ;AACF;AACA;AACA;AACA;EACE,MAAMC,OAAO,GAAG,IAAIF,IAAI,CAACD,KAAK,CAAC;EAC/B,IAAIH,SAAS,CAACG,KAAK,CAAC,EAAE;IACpB,IAAIA,KAAK,CAACI,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACzBF,OAAO,CAACC,IAAI,GAAGR,SAAS,CAACI,KAAK,CAACI,IAAI,CAAC;IACtC;IACA,IAAIJ,KAAK,CAACM,UAAU,CAACD,MAAM,GAAG,CAAC,EAAE;MAC/BF,OAAO,CAACG,UAAU,GAAGV,SAAS,CAACI,KAAK,CAACM,UAAU,CAAC;IAClD;EACF;;EAEA;AACF;AACA;AACA;EACE,OAAOZ,mBAAmB,CAACS,OAAO,EAAED,OAAO,EAAE;IAC3CK,cAAc,EAAET,aAAa;IAC7BU,cAAc,EAAE;MACdC,cAAc,EAAEd;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMe,eAAe,GAAGT,IAAI,IAAI,CAACD,KAAK,EAAEW,OAAO,GAAG,CAAC,CAAC,KAAKZ,OAAO,CAACC,KAAK,EAAE;EAC7E,GAAGW,OAAO;EACVV;AACF,CAAC,CAAC;AACF,eAAeF,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}