{"ast":null,"code":"import { curryN, identical, partial, pathOr, unary, when } from 'ramda';\n\n/**\n * If the given, non-null object has a value at the given path, returns the value at that path.\n * Otherwise returns the result of invoking the provided function with the object.\n *\n * @func pathOrLazy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Object\n * @typedef Idx = String | Int\n * @sig ({a} -> a) -> [Idx] -> {a} -> a\n * @param {Function} defaultFn The function that will return the default value.\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n * RA.pathOrLazy(() => 'N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n * RA.pathOrLazy(() => 'N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOrLazy = curryN(3, function (defaultFn, path, obj) {\n  return when(identical(defaultFn), partial(unary(defaultFn), [obj]), pathOr(defaultFn, path, obj));\n});\nexport default pathOrLazy;","map":{"version":3,"names":["curryN","identical","partial","pathOr","unary","when","pathOrLazy","defaultFn","path","obj"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/pathOrLazy.js"],"sourcesContent":["import { curryN, identical, partial, pathOr, unary, when } from 'ramda';\n\n/**\n * If the given, non-null object has a value at the given path, returns the value at that path.\n * Otherwise returns the result of invoking the provided function with the object.\n *\n * @func pathOrLazy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Object\n * @typedef Idx = String | Int\n * @sig ({a} -> a) -> [Idx] -> {a} -> a\n * @param {Function} defaultFn The function that will return the default value.\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n * RA.pathOrLazy(() => 'N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n * RA.pathOrLazy(() => 'N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOrLazy = curryN(3, function (defaultFn, path, obj) {\n  return when(identical(defaultFn), partial(unary(defaultFn), [obj]), pathOr(defaultFn, path, obj));\n});\nexport default pathOrLazy;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,OAAO;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGN,MAAM,CAAC,CAAC,EAAE,UAAUO,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAE;EACzD,OAAOJ,IAAI,CAACJ,SAAS,CAACM,SAAS,CAAC,EAAEL,OAAO,CAACE,KAAK,CAACG,SAAS,CAAC,EAAE,CAACE,GAAG,CAAC,CAAC,EAAEN,MAAM,CAACI,SAAS,EAAEC,IAAI,EAAEC,GAAG,CAAC,CAAC;AACnG,CAAC,CAAC;AACF,eAAeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}