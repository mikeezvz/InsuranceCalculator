{"ast":null,"code":"import FallbackVisitor from \"./visitors/FallbackVisitor.mjs\";\nimport JSONSchemaVisitor from \"./visitors/json-schema/index.mjs\";\nimport JSONSchemaItemsVisitor from \"./visitors/json-schema/ItemsVisitor.mjs\";\nimport JSONSchemaRequiredVisitor from \"./visitors/json-schema/RequiredVisitor.mjs\";\nimport JSONSchemaPropertiesVisitor from \"./visitors/json-schema/PropertiesVisitor.mjs\";\nimport JSONSchemaPatternPropertiesVisitor from \"./visitors/json-schema/PatternPropertiesVisitor.mjs\";\nimport JSONSchemaDependenciesVisitor from \"./visitors/json-schema/DependenciesVisitor.mjs\";\nimport JSONSchemaEnumVisitor from \"./visitors/json-schema/EnumVisitor.mjs\";\nimport JSONSchemaTypeVisitor from \"./visitors/json-schema/TypeVisitor.mjs\";\nimport JSONSchemaAllOfVisitor from \"./visitors/json-schema/AllOfVisitor.mjs\";\nimport JSONSchemaAnyOfVisitor from \"./visitors/json-schema/AnyOfVisitor.mjs\";\nimport JSONSchemaOneOfVisitor from \"./visitors/json-schema/OneOfVisitor.mjs\";\nimport JSONSchemaDefinitionsVisitor from \"./visitors/json-schema/DefinitionsVisitor.mjs\";\nimport JSONSchemaLinksVisitor from \"./visitors/json-schema/LinksVisitor.mjs\";\nimport JSONReferenceVisitor from \"./visitors/json-schema/json-reference/index.mjs\";\nimport JSONReference$RefVisitor from \"./visitors/json-schema/json-reference/$RefVisitor.mjs\";\nimport JSONSchemaOrJSONReferenceVisitor from \"./visitors/json-schema/JSONSchemaOrJSONReferenceVisitor.mjs\";\nimport MediaVisitor from \"./visitors/json-schema/media/index.mjs\";\nimport LinkDescriptionVisitor from \"./visitors/json-schema/link-description/index.mjs\";\n/**\n * Specification object allows us to have complete control over visitors\n * when traversing the ApiDOM.\n * Specification also allows us to create amended refractors from\n * existing ones by manipulating it.\n *\n * Note: Specification object allows to use absolute internal JSON pointers.\n */\nconst specification = {\n  visitors: {\n    value: FallbackVisitor,\n    JSONSchemaOrJSONReferenceVisitor,\n    document: {\n      objects: {\n        JSONSchema: {\n          $visitor: JSONSchemaVisitor,\n          fixedFields: {\n            // core vocabulary\n            id: {\n              $ref: '#/visitors/value'\n            },\n            $schema: {\n              $ref: '#/visitors/value'\n            },\n            // validation vocabulary\n            // validation keywords for numeric instances (number and integer)\n            multipleOf: {\n              $ref: '#/visitors/value'\n            },\n            maximum: {\n              $ref: '#/visitors/value'\n            },\n            exclusiveMaximum: {\n              $ref: '#/visitors/value'\n            },\n            minimum: {\n              $ref: '#/visitors/value'\n            },\n            exclusiveMinimum: {\n              $ref: '#/visitors/value'\n            },\n            // validation keywords for strings\n            maxLength: {\n              $ref: '#/visitors/value'\n            },\n            minLength: {\n              $ref: '#/visitors/value'\n            },\n            pattern: {\n              $ref: '#/visitors/value'\n            },\n            // validation keywords for arrays\n            additionalItems: JSONSchemaOrJSONReferenceVisitor,\n            items: JSONSchemaItemsVisitor,\n            maxItems: {\n              $ref: '#/visitors/value'\n            },\n            minItems: {\n              $ref: '#/visitors/value'\n            },\n            uniqueItems: {\n              $ref: '#/visitors/value'\n            },\n            // validation keywords for objects\n            maxProperties: {\n              $ref: '#/visitors/value'\n            },\n            minProperties: {\n              $ref: '#/visitors/value'\n            },\n            required: JSONSchemaRequiredVisitor,\n            properties: JSONSchemaPropertiesVisitor,\n            additionalProperties: JSONSchemaOrJSONReferenceVisitor,\n            patternProperties: JSONSchemaPatternPropertiesVisitor,\n            dependencies: JSONSchemaDependenciesVisitor,\n            // validation keywords for any instance type\n            enum: JSONSchemaEnumVisitor,\n            type: JSONSchemaTypeVisitor,\n            allOf: JSONSchemaAllOfVisitor,\n            anyOf: JSONSchemaAnyOfVisitor,\n            oneOf: JSONSchemaOneOfVisitor,\n            not: JSONSchemaOrJSONReferenceVisitor,\n            definitions: JSONSchemaDefinitionsVisitor,\n            // metadata keywords\n            title: {\n              $ref: '#/visitors/value'\n            },\n            description: {\n              $ref: '#/visitors/value'\n            },\n            default: {\n              $ref: '#/visitors/value'\n            },\n            // semantic validation with \"format\"\n            format: {\n              $ref: '#/visitors/value'\n            },\n            // JSON Hyper-Schema\n            base: {\n              $ref: '#/visitors/value'\n            },\n            links: JSONSchemaLinksVisitor,\n            media: {\n              $ref: '#/visitors/document/objects/Media'\n            },\n            readOnly: {\n              $ref: '#/visitors/value'\n            }\n          }\n        },\n        JSONReference: {\n          $visitor: JSONReferenceVisitor,\n          fixedFields: {\n            $ref: JSONReference$RefVisitor\n          }\n        },\n        Media: {\n          $visitor: MediaVisitor,\n          fixedFields: {\n            binaryEncoding: {\n              $ref: '#/visitors/value'\n            },\n            type: {\n              $ref: '#/visitors/value'\n            }\n          }\n        },\n        LinkDescription: {\n          $visitor: LinkDescriptionVisitor,\n          fixedFields: {\n            href: {\n              $ref: '#/visitors/value'\n            },\n            rel: {\n              $ref: '#/visitors/value'\n            },\n            title: {\n              $ref: '#/visitors/value'\n            },\n            targetSchema: JSONSchemaOrJSONReferenceVisitor,\n            mediaType: {\n              $ref: '#/visitors/value'\n            },\n            method: {\n              $ref: '#/visitors/value'\n            },\n            encType: {\n              $ref: '#/visitors/value'\n            },\n            schema: JSONSchemaOrJSONReferenceVisitor\n          }\n        }\n      }\n    }\n  }\n};\nexport default specification;","map":{"version":3,"names":["FallbackVisitor","JSONSchemaVisitor","JSONSchemaItemsVisitor","JSONSchemaRequiredVisitor","JSONSchemaPropertiesVisitor","JSONSchemaPatternPropertiesVisitor","JSONSchemaDependenciesVisitor","JSONSchemaEnumVisitor","JSONSchemaTypeVisitor","JSONSchemaAllOfVisitor","JSONSchemaAnyOfVisitor","JSONSchemaOneOfVisitor","JSONSchemaDefinitionsVisitor","JSONSchemaLinksVisitor","JSONReferenceVisitor","JSONReference$RefVisitor","JSONSchemaOrJSONReferenceVisitor","MediaVisitor","LinkDescriptionVisitor","specification","visitors","value","document","objects","JSONSchema","$visitor","fixedFields","id","$ref","$schema","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","items","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","properties","additionalProperties","patternProperties","dependencies","enum","type","allOf","anyOf","oneOf","not","definitions","title","description","default","format","base","links","media","readOnly","JSONReference","Media","binaryEncoding","LinkDescription","href","rel","targetSchema","mediaType","method","encType","schema"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-json-schema-draft-4/es/refractor/specification.mjs"],"sourcesContent":["import FallbackVisitor from \"./visitors/FallbackVisitor.mjs\";\nimport JSONSchemaVisitor from \"./visitors/json-schema/index.mjs\";\nimport JSONSchemaItemsVisitor from \"./visitors/json-schema/ItemsVisitor.mjs\";\nimport JSONSchemaRequiredVisitor from \"./visitors/json-schema/RequiredVisitor.mjs\";\nimport JSONSchemaPropertiesVisitor from \"./visitors/json-schema/PropertiesVisitor.mjs\";\nimport JSONSchemaPatternPropertiesVisitor from \"./visitors/json-schema/PatternPropertiesVisitor.mjs\";\nimport JSONSchemaDependenciesVisitor from \"./visitors/json-schema/DependenciesVisitor.mjs\";\nimport JSONSchemaEnumVisitor from \"./visitors/json-schema/EnumVisitor.mjs\";\nimport JSONSchemaTypeVisitor from \"./visitors/json-schema/TypeVisitor.mjs\";\nimport JSONSchemaAllOfVisitor from \"./visitors/json-schema/AllOfVisitor.mjs\";\nimport JSONSchemaAnyOfVisitor from \"./visitors/json-schema/AnyOfVisitor.mjs\";\nimport JSONSchemaOneOfVisitor from \"./visitors/json-schema/OneOfVisitor.mjs\";\nimport JSONSchemaDefinitionsVisitor from \"./visitors/json-schema/DefinitionsVisitor.mjs\";\nimport JSONSchemaLinksVisitor from \"./visitors/json-schema/LinksVisitor.mjs\";\nimport JSONReferenceVisitor from \"./visitors/json-schema/json-reference/index.mjs\";\nimport JSONReference$RefVisitor from \"./visitors/json-schema/json-reference/$RefVisitor.mjs\";\nimport JSONSchemaOrJSONReferenceVisitor from \"./visitors/json-schema/JSONSchemaOrJSONReferenceVisitor.mjs\";\nimport MediaVisitor from \"./visitors/json-schema/media/index.mjs\";\nimport LinkDescriptionVisitor from \"./visitors/json-schema/link-description/index.mjs\";\n/**\n * Specification object allows us to have complete control over visitors\n * when traversing the ApiDOM.\n * Specification also allows us to create amended refractors from\n * existing ones by manipulating it.\n *\n * Note: Specification object allows to use absolute internal JSON pointers.\n */\nconst specification = {\n  visitors: {\n    value: FallbackVisitor,\n    JSONSchemaOrJSONReferenceVisitor,\n    document: {\n      objects: {\n        JSONSchema: {\n          $visitor: JSONSchemaVisitor,\n          fixedFields: {\n            // core vocabulary\n            id: {\n              $ref: '#/visitors/value'\n            },\n            $schema: {\n              $ref: '#/visitors/value'\n            },\n            // validation vocabulary\n            // validation keywords for numeric instances (number and integer)\n            multipleOf: {\n              $ref: '#/visitors/value'\n            },\n            maximum: {\n              $ref: '#/visitors/value'\n            },\n            exclusiveMaximum: {\n              $ref: '#/visitors/value'\n            },\n            minimum: {\n              $ref: '#/visitors/value'\n            },\n            exclusiveMinimum: {\n              $ref: '#/visitors/value'\n            },\n            // validation keywords for strings\n            maxLength: {\n              $ref: '#/visitors/value'\n            },\n            minLength: {\n              $ref: '#/visitors/value'\n            },\n            pattern: {\n              $ref: '#/visitors/value'\n            },\n            // validation keywords for arrays\n            additionalItems: JSONSchemaOrJSONReferenceVisitor,\n            items: JSONSchemaItemsVisitor,\n            maxItems: {\n              $ref: '#/visitors/value'\n            },\n            minItems: {\n              $ref: '#/visitors/value'\n            },\n            uniqueItems: {\n              $ref: '#/visitors/value'\n            },\n            // validation keywords for objects\n            maxProperties: {\n              $ref: '#/visitors/value'\n            },\n            minProperties: {\n              $ref: '#/visitors/value'\n            },\n            required: JSONSchemaRequiredVisitor,\n            properties: JSONSchemaPropertiesVisitor,\n            additionalProperties: JSONSchemaOrJSONReferenceVisitor,\n            patternProperties: JSONSchemaPatternPropertiesVisitor,\n            dependencies: JSONSchemaDependenciesVisitor,\n            // validation keywords for any instance type\n            enum: JSONSchemaEnumVisitor,\n            type: JSONSchemaTypeVisitor,\n            allOf: JSONSchemaAllOfVisitor,\n            anyOf: JSONSchemaAnyOfVisitor,\n            oneOf: JSONSchemaOneOfVisitor,\n            not: JSONSchemaOrJSONReferenceVisitor,\n            definitions: JSONSchemaDefinitionsVisitor,\n            // metadata keywords\n            title: {\n              $ref: '#/visitors/value'\n            },\n            description: {\n              $ref: '#/visitors/value'\n            },\n            default: {\n              $ref: '#/visitors/value'\n            },\n            // semantic validation with \"format\"\n            format: {\n              $ref: '#/visitors/value'\n            },\n            // JSON Hyper-Schema\n            base: {\n              $ref: '#/visitors/value'\n            },\n            links: JSONSchemaLinksVisitor,\n            media: {\n              $ref: '#/visitors/document/objects/Media'\n            },\n            readOnly: {\n              $ref: '#/visitors/value'\n            }\n          }\n        },\n        JSONReference: {\n          $visitor: JSONReferenceVisitor,\n          fixedFields: {\n            $ref: JSONReference$RefVisitor\n          }\n        },\n        Media: {\n          $visitor: MediaVisitor,\n          fixedFields: {\n            binaryEncoding: {\n              $ref: '#/visitors/value'\n            },\n            type: {\n              $ref: '#/visitors/value'\n            }\n          }\n        },\n        LinkDescription: {\n          $visitor: LinkDescriptionVisitor,\n          fixedFields: {\n            href: {\n              $ref: '#/visitors/value'\n            },\n            rel: {\n              $ref: '#/visitors/value'\n            },\n            title: {\n              $ref: '#/visitors/value'\n            },\n            targetSchema: JSONSchemaOrJSONReferenceVisitor,\n            mediaType: {\n              $ref: '#/visitors/value'\n            },\n            method: {\n              $ref: '#/visitors/value'\n            },\n            encType: {\n              $ref: '#/visitors/value'\n            },\n            schema: JSONSchemaOrJSONReferenceVisitor\n          }\n        }\n      }\n    }\n  }\n};\nexport default specification;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}