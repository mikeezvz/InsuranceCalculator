{"ast":null,"code":"import { complement } from 'ramda';\nimport isSet from './isSet.js';\n\n/**\n * Checks if value is complement of `Set` object.\n *\n * @func isNotSet\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isSet|isSet}\n * @example\n *\n * RA.isNotSet(new Map()); //=> true\n * RA.isNotSet(new Set()); //=> false\n * RA.isNotSet(new Set([1,2]); //=> false\n * RA.isNotSet(new Object()); //=> true\n */\n\nvar isNotSet = complement(isSet);\nexport default isNotSet;","map":{"version":3,"names":["complement","isSet","isNotSet"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotSet.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isSet from './isSet.js';\n\n/**\n * Checks if value is complement of `Set` object.\n *\n * @func isNotSet\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isSet|isSet}\n * @example\n *\n * RA.isNotSet(new Map()); //=> true\n * RA.isNotSet(new Set()); //=> false\n * RA.isNotSet(new Set([1,2]); //=> false\n * RA.isNotSet(new Object()); //=> true\n */\n\nvar isNotSet = complement(isSet);\nexport default isNotSet;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GAAGF,UAAU,CAACC,KAAK,CAAC;AAChC,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}