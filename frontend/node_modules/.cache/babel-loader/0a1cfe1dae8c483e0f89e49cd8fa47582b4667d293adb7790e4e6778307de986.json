{"ast":null,"code":"const types = require('./types');\nconst sets = require('./sets');\nconst CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^ ?';\nconst SLSH = {\n  '0': 0,\n  't': 9,\n  'n': 10,\n  'v': 11,\n  'f': 12,\n  'r': 13\n};\n\n/**\n * Finds character representations in str and convert all to\n * their respective characters\n *\n * @param {String} str\n * @return {String}\n */\nexports.strToChars = function (str) {\n  /* jshint maxlen: false */\n  var chars_regex = /(\\[\\\\b\\])|(\\\\)?\\\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\\\\]^?])|([0tnvfr]))/g;\n  str = str.replace(chars_regex, function (s, b, lbs, a16, b16, c8, dctrl, eslsh) {\n    if (lbs) {\n      return s;\n    }\n    var code = b ? 8 : a16 ? parseInt(a16, 16) : b16 ? parseInt(b16, 16) : c8 ? parseInt(c8, 8) : dctrl ? CTRL.indexOf(dctrl) : SLSH[eslsh];\n    var c = String.fromCharCode(code);\n\n    // Escape special regex characters.\n    if (/[[\\]{}^$.|?*+()]/.test(c)) {\n      c = '\\\\' + c;\n    }\n    return c;\n  });\n  return str;\n};\n\n/**\n * turns class into tokens\n * reads str until it encounters a ] not preceeded by a \\\n *\n * @param {String} str\n * @param {String} regexpStr\n * @return {Array.<Array.<Object>, Number>}\n */\nexports.tokenizeClass = (str, regexpStr) => {\n  /* jshint maxlen: false */\n  var tokens = [];\n  var regexp = /\\\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\\\)(.)|([^\\]\\\\]))-(?:\\\\)?([^\\]]))|(\\])|(?:\\\\)?([^])/g;\n  var rs, c;\n  while ((rs = regexp.exec(str)) != null) {\n    if (rs[1]) {\n      tokens.push(sets.words());\n    } else if (rs[2]) {\n      tokens.push(sets.ints());\n    } else if (rs[3]) {\n      tokens.push(sets.whitespace());\n    } else if (rs[4]) {\n      tokens.push(sets.notWords());\n    } else if (rs[5]) {\n      tokens.push(sets.notInts());\n    } else if (rs[6]) {\n      tokens.push(sets.notWhitespace());\n    } else if (rs[7]) {\n      tokens.push({\n        type: types.RANGE,\n        from: (rs[8] || rs[9]).charCodeAt(0),\n        to: rs[10].charCodeAt(0)\n      });\n    } else if (c = rs[12]) {\n      tokens.push({\n        type: types.CHAR,\n        value: c.charCodeAt(0)\n      });\n    } else {\n      return [tokens, regexp.lastIndex];\n    }\n  }\n  exports.error(regexpStr, 'Unterminated character class');\n};\n\n/**\n * Shortcut to throw errors.\n *\n * @param {String} regexp\n * @param {String} msg\n */\nexports.error = (regexp, msg) => {\n  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);\n};","map":{"version":3,"names":["types","require","sets","CTRL","SLSH","exports","strToChars","str","chars_regex","replace","s","b","lbs","a16","b16","c8","dctrl","eslsh","code","parseInt","indexOf","c","String","fromCharCode","test","tokenizeClass","regexpStr","tokens","regexp","rs","exec","push","words","ints","whitespace","notWords","notInts","notWhitespace","type","RANGE","from","charCodeAt","to","CHAR","value","lastIndex","error","msg","SyntaxError"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ret/lib/util.js"],"sourcesContent":["const types = require('./types');\nconst sets  = require('./sets');\n\n\nconst CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^ ?';\nconst SLSH = { '0': 0, 't': 9, 'n': 10, 'v': 11, 'f': 12, 'r': 13 };\n\n/**\n * Finds character representations in str and convert all to\n * their respective characters\n *\n * @param {String} str\n * @return {String}\n */\nexports.strToChars = function(str) {\n  /* jshint maxlen: false */\n  var chars_regex = /(\\[\\\\b\\])|(\\\\)?\\\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\\\\]^?])|([0tnvfr]))/g;\n  str = str.replace(chars_regex, function(s, b, lbs, a16, b16, c8, dctrl, eslsh) {\n    if (lbs) {\n      return s;\n    }\n\n    var code = b ? 8 :\n      a16   ? parseInt(a16, 16) :\n      b16   ? parseInt(b16, 16) :\n      c8    ? parseInt(c8,   8) :\n      dctrl ? CTRL.indexOf(dctrl) :\n      SLSH[eslsh];\n\n    var c = String.fromCharCode(code);\n\n    // Escape special regex characters.\n    if (/[[\\]{}^$.|?*+()]/.test(c)) {\n      c = '\\\\' + c;\n    }\n\n    return c;\n  });\n\n  return str;\n};\n\n\n/**\n * turns class into tokens\n * reads str until it encounters a ] not preceeded by a \\\n *\n * @param {String} str\n * @param {String} regexpStr\n * @return {Array.<Array.<Object>, Number>}\n */\nexports.tokenizeClass = (str, regexpStr) => {\n  /* jshint maxlen: false */\n  var tokens = [];\n  var regexp = /\\\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\\\)(.)|([^\\]\\\\]))-(?:\\\\)?([^\\]]))|(\\])|(?:\\\\)?([^])/g;\n  var rs, c;\n\n\n  while ((rs = regexp.exec(str)) != null) {\n    if (rs[1]) {\n      tokens.push(sets.words());\n\n    } else if (rs[2]) {\n      tokens.push(sets.ints());\n\n    } else if (rs[3]) {\n      tokens.push(sets.whitespace());\n\n    } else if (rs[4]) {\n      tokens.push(sets.notWords());\n\n    } else if (rs[5]) {\n      tokens.push(sets.notInts());\n\n    } else if (rs[6]) {\n      tokens.push(sets.notWhitespace());\n\n    } else if (rs[7]) {\n      tokens.push({\n        type: types.RANGE,\n        from: (rs[8] || rs[9]).charCodeAt(0),\n        to: rs[10].charCodeAt(0),\n      });\n\n    } else if ((c = rs[12])) {\n      tokens.push({\n        type: types.CHAR,\n        value: c.charCodeAt(0),\n      });\n\n    } else {\n      return [tokens, regexp.lastIndex];\n    }\n  }\n\n  exports.error(regexpStr, 'Unterminated character class');\n};\n\n\n/**\n * Shortcut to throw errors.\n *\n * @param {String} regexp\n * @param {String} msg\n */\nexports.error = (regexp, msg) => {\n  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}