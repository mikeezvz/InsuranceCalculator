{"ast":null,"code":"import { compose, curry, insert, nth, remove } from 'ramda';\n\n/**\n * Returns a new list with the item at the position `fromIdx` moved to the position `toIdx`. If the\n * `toIdx` is out of the `list` range, the item will be placed at the last position of the `list`.\n * When negative indices are provided, the behavior of the move is unspecified.\n *\n * @func move\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.8.0|v2.8.0}\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {number} fromIdx The position of item to be moved\n * @param {number} toIdx The position of item after move\n * @param {Array} list The list containing the item to be moved\n * @return {Array}\n * @example\n *\n * const list = ['a', 'b', 'c', 'd', 'e'];\n * RA.move(1, 3, list) //=> ['a', 'c', 'd', 'b', 'e']\n */\nvar move = curry(function (fromIdx, toIdx, list) {\n  return compose(insert(toIdx, nth(fromIdx, list)), remove(fromIdx, 1))(list);\n});\nexport default move;","map":{"version":3,"names":["compose","curry","insert","nth","remove","move","fromIdx","toIdx","list"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/move.js"],"sourcesContent":["import { compose, curry, insert, nth, remove } from 'ramda';\n\n/**\n * Returns a new list with the item at the position `fromIdx` moved to the position `toIdx`. If the\n * `toIdx` is out of the `list` range, the item will be placed at the last position of the `list`.\n * When negative indices are provided, the behavior of the move is unspecified.\n *\n * @func move\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.8.0|v2.8.0}\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {number} fromIdx The position of item to be moved\n * @param {number} toIdx The position of item after move\n * @param {Array} list The list containing the item to be moved\n * @return {Array}\n * @example\n *\n * const list = ['a', 'b', 'c', 'd', 'e'];\n * RA.move(1, 3, list) //=> ['a', 'c', 'd', 'b', 'e']\n */\nvar move = curry(function (fromIdx, toIdx, list) {\n  return compose(insert(toIdx, nth(fromIdx, list)), remove(fromIdx, 1))(list);\n});\nexport default move;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,QAAQ,OAAO;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAGJ,KAAK,CAAC,UAAUK,OAAO,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC/C,OAAOR,OAAO,CAACE,MAAM,CAACK,KAAK,EAAEJ,GAAG,CAACG,OAAO,EAAEE,IAAI,CAAC,CAAC,EAAEJ,MAAM,CAACE,OAAO,EAAE,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC;AAC7E,CAAC,CAAC;AACF,eAAeH,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}