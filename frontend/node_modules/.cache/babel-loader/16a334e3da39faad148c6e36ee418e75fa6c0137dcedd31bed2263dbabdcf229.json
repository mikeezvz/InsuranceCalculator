{"ast":null,"code":"import { complement } from 'ramda';\nimport isValidNumber from './isValidNumber.js';\n\n/**\n * Checks if value is not a valid `Number`. A valid `Number` is a number that is not `NaN`,\n * `Infinity` or `-Infinity`.\n *\n * @func isNotValidNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isValidNumber|isValidNumber}\n * @example\n *\n * RA.isNotValidNumber(1); //=> false\n * RA.isNotValidNumber(''); //=> true\n * RA.isNotValidNumber(NaN); //=> true\n * RA.isNotValidNumber(Infinity); //=> true\n * RA.isNotValidNumber(-Infinity); //=> true\n */\nvar isNotValidNumber = complement(isValidNumber);\nexport default isNotValidNumber;","map":{"version":3,"names":["complement","isValidNumber","isNotValidNumber"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotValidNumber.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isValidNumber from './isValidNumber.js';\n\n/**\n * Checks if value is not a valid `Number`. A valid `Number` is a number that is not `NaN`,\n * `Infinity` or `-Infinity`.\n *\n * @func isNotValidNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isValidNumber|isValidNumber}\n * @example\n *\n * RA.isNotValidNumber(1); //=> false\n * RA.isNotValidNumber(''); //=> true\n * RA.isNotValidNumber(NaN); //=> true\n * RA.isNotValidNumber(Infinity); //=> true\n * RA.isNotValidNumber(-Infinity); //=> true\n */\nvar isNotValidNumber = complement(isValidNumber);\nexport default isNotValidNumber;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,aAAa,MAAM,oBAAoB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAGF,UAAU,CAACC,aAAa,CAAC;AAChD,eAAeC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}