{"ast":null,"code":"import { both, complement, curryN } from 'ramda';\nimport isInteger from './isInteger.js';\nimport isOdd from './isOdd.js';\n\n/**\n * Checks if value is even integer number.\n * An even number is an integer which is \"evenly divisible\" by two.\n * Zero is an even number because zero divided by two equals zero,\n * which despite not being a natural number, is an integer.\n * Even numbers are either positive or negative.\n *\n * @func isEven\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isOdd|isOdd}\n * @example\n *\n * RA.isEven(0); // => true\n * RA.isEven(1); // => false\n * RA.isEven(-Infinity); // => false\n * RA.isEven(4); // => true\n * RA.isEven(3); // => false\n */\nvar isEven = curryN(1, both(isInteger, complement(isOdd)));\nexport default isEven;","map":{"version":3,"names":["both","complement","curryN","isInteger","isOdd","isEven"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isEven.js"],"sourcesContent":["import { both, complement, curryN } from 'ramda';\nimport isInteger from './isInteger.js';\nimport isOdd from './isOdd.js';\n\n/**\n * Checks if value is even integer number.\n * An even number is an integer which is \"evenly divisible\" by two.\n * Zero is an even number because zero divided by two equals zero,\n * which despite not being a natural number, is an integer.\n * Even numbers are either positive or negative.\n *\n * @func isEven\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isOdd|isOdd}\n * @example\n *\n * RA.isEven(0); // => true\n * RA.isEven(1); // => false\n * RA.isEven(-Infinity); // => false\n * RA.isEven(4); // => true\n * RA.isEven(3); // => false\n */\nvar isEven = curryN(1, both(isInteger, complement(isOdd)));\nexport default isEven;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGH,MAAM,CAAC,CAAC,EAAEF,IAAI,CAACG,SAAS,EAAEF,UAAU,CAACG,KAAK,CAAC,CAAC,CAAC;AAC1D,eAAeC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}