{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _has from \"./internal/_has.js\";\nimport _assoc from \"./internal/_assoc.js\";\nimport _modify from \"./internal/_modify.js\";\n\n/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */\nvar modifyPath = /*#__PURE__*/_curry3(function modifyPath(path, fn, object) {\n  if (!_isObject(object) && !_isArray(object)) {\n    return object;\n  }\n  if (path.length === 0) {\n    return fn(object);\n  }\n  var idx = path[0];\n  if (!_has(idx, object)) {\n    return object;\n  }\n  if (path.length === 1) {\n    return _modify(idx, fn, object);\n  }\n  var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);\n  if (val === object[idx]) {\n    return object;\n  }\n  return _assoc(idx, val, object);\n});\nexport default modifyPath;","map":{"version":3,"names":["_curry3","_isArray","_isObject","_has","_assoc","_modify","modifyPath","path","fn","object","length","idx","val","Array","prototype","slice","call"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/modifyPath.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _has from \"./internal/_has.js\";\nimport _assoc from \"./internal/_assoc.js\";\nimport _modify from \"./internal/_modify.js\";\n\n/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */\nvar modifyPath = /*#__PURE__*/_curry3(function modifyPath(path, fn, object) {\n  if (!_isObject(object) && !_isArray(object)) {\n    return object;\n  }\n  if (path.length === 0) {\n    return fn(object);\n  }\n  var idx = path[0];\n  if (!_has(idx, object)) {\n    return object;\n  }\n  if (path.length === 1) {\n    return _modify(idx, fn, object);\n  }\n  var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);\n  if (val === object[idx]) {\n    return object;\n  }\n  return _assoc(idx, val, object);\n});\nexport default modifyPath;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,uBAAuB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAaN,OAAO,CAAC,SAASM,UAAUA,CAACC,IAAI,EAAEC,EAAE,EAAEC,MAAM,EAAE;EAC1E,IAAI,CAACP,SAAS,CAACO,MAAM,CAAC,IAAI,CAACR,QAAQ,CAACQ,MAAM,CAAC,EAAE;IAC3C,OAAOA,MAAM;EACf;EACA,IAAIF,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IACrB,OAAOF,EAAE,CAACC,MAAM,CAAC;EACnB;EACA,IAAIE,GAAG,GAAGJ,IAAI,CAAC,CAAC,CAAC;EACjB,IAAI,CAACJ,IAAI,CAACQ,GAAG,EAAEF,MAAM,CAAC,EAAE;IACtB,OAAOA,MAAM;EACf;EACA,IAAIF,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IACrB,OAAOL,OAAO,CAACM,GAAG,EAAEH,EAAE,EAAEC,MAAM,CAAC;EACjC;EACA,IAAIG,GAAG,GAAGN,UAAU,CAACO,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACT,IAAI,EAAE,CAAC,CAAC,EAAEC,EAAE,EAAEC,MAAM,CAACE,GAAG,CAAC,CAAC;EAC1E,IAAIC,GAAG,KAAKH,MAAM,CAACE,GAAG,CAAC,EAAE;IACvB,OAAOF,MAAM;EACf;EACA,OAAOL,MAAM,CAACO,GAAG,EAAEC,GAAG,EAAEH,MAAM,CAAC;AACjC,CAAC,CAAC;AACF,eAAeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}