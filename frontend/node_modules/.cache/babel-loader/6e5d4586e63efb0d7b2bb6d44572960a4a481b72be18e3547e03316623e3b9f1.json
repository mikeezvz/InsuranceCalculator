{"ast":null,"code":"import opId from '../../../helpers/op-id.js';\nexport default function normalize(parsedSpec) {\n  const {\n    spec\n  } = parsedSpec;\n  const {\n    paths\n  } = spec;\n  const map = {};\n  if (!paths || spec.$$normalized) {\n    return parsedSpec;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const pathName in paths) {\n    const path = paths[pathName];\n    if (path == null || !['object', 'function'].includes(typeof path)) {\n      continue; // eslint-disable-line no-continue\n    }\n    const pathParameters = path.parameters;\n\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const method in path) {\n      const operation = path[method];\n      if (operation == null || !['object', 'function'].includes(typeof operation)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const oid = opId(operation, pathName, method);\n      if (oid) {\n        if (map[oid]) {\n          map[oid].push(operation);\n        } else {\n          map[oid] = [operation];\n        }\n        const opList = map[oid];\n        if (opList.length > 1) {\n          opList.forEach((o, i) => {\n            // eslint-disable-next-line no-underscore-dangle\n            o.__originalOperationId = o.__originalOperationId || o.operationId;\n            o.operationId = `${oid}${i + 1}`;\n          });\n        } else if (typeof operation.operationId !== 'undefined') {\n          // Ensure we always add the normalized operation ID if one already exists\n          // ( potentially different, given that we normalize our IDs)\n          // ... _back_ to the spec. Otherwise, they might not line up\n          const obj = opList[0];\n          // eslint-disable-next-line no-underscore-dangle\n          obj.__originalOperationId = obj.__originalOperationId || operation.operationId;\n          obj.operationId = oid;\n        }\n      }\n      if (method !== 'parameters') {\n        // Add inherited consumes, produces, parameters, securities\n        const inheritsList = [];\n        const toBeInherit = {};\n\n        // Global-levels\n        // eslint-disable-next-line no-restricted-syntax\n        for (const key in spec) {\n          if (key === 'produces' || key === 'consumes' || key === 'security') {\n            toBeInherit[key] = spec[key];\n            inheritsList.push(toBeInherit);\n          }\n        }\n\n        // Path-levels\n        if (pathParameters) {\n          toBeInherit.parameters = pathParameters;\n          inheritsList.push(toBeInherit);\n        }\n        if (inheritsList.length) {\n          // eslint-disable-next-line no-restricted-syntax\n          for (const inherits of inheritsList) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const inheritName in inherits) {\n              if (!operation[inheritName]) {\n                operation[inheritName] = inherits[inheritName];\n              } else if (inheritName === 'parameters') {\n                // eslint-disable-next-line no-restricted-syntax\n                for (const param of inherits[inheritName]) {\n                  const exists = operation[inheritName].some(opParam => opParam.name && opParam.name === param.name || opParam.$ref && opParam.$ref === param.$ref || opParam.$$ref && opParam.$$ref === param.$$ref || opParam === param);\n                  if (!exists) {\n                    operation[inheritName].push(param);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  spec.$$normalized = true;\n  return parsedSpec;\n}","map":{"version":3,"names":["opId","normalize","parsedSpec","spec","paths","map","$$normalized","pathName","path","includes","pathParameters","parameters","method","operation","oid","push","opList","length","forEach","o","i","__originalOperationId","operationId","obj","inheritsList","toBeInherit","key","inherits","inheritName","param","exists","some","opParam","name","$ref","$$ref"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/strategies/generic/normalize.js"],"sourcesContent":["import opId from '../../../helpers/op-id.js';\nexport default function normalize(parsedSpec) {\n  const {\n    spec\n  } = parsedSpec;\n  const {\n    paths\n  } = spec;\n  const map = {};\n  if (!paths || spec.$$normalized) {\n    return parsedSpec;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const pathName in paths) {\n    const path = paths[pathName];\n    if (path == null || !['object', 'function'].includes(typeof path)) {\n      continue; // eslint-disable-line no-continue\n    }\n    const pathParameters = path.parameters;\n\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const method in path) {\n      const operation = path[method];\n      if (operation == null || !['object', 'function'].includes(typeof operation)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const oid = opId(operation, pathName, method);\n      if (oid) {\n        if (map[oid]) {\n          map[oid].push(operation);\n        } else {\n          map[oid] = [operation];\n        }\n        const opList = map[oid];\n        if (opList.length > 1) {\n          opList.forEach((o, i) => {\n            // eslint-disable-next-line no-underscore-dangle\n            o.__originalOperationId = o.__originalOperationId || o.operationId;\n            o.operationId = `${oid}${i + 1}`;\n          });\n        } else if (typeof operation.operationId !== 'undefined') {\n          // Ensure we always add the normalized operation ID if one already exists\n          // ( potentially different, given that we normalize our IDs)\n          // ... _back_ to the spec. Otherwise, they might not line up\n          const obj = opList[0];\n          // eslint-disable-next-line no-underscore-dangle\n          obj.__originalOperationId = obj.__originalOperationId || operation.operationId;\n          obj.operationId = oid;\n        }\n      }\n      if (method !== 'parameters') {\n        // Add inherited consumes, produces, parameters, securities\n        const inheritsList = [];\n        const toBeInherit = {};\n\n        // Global-levels\n        // eslint-disable-next-line no-restricted-syntax\n        for (const key in spec) {\n          if (key === 'produces' || key === 'consumes' || key === 'security') {\n            toBeInherit[key] = spec[key];\n            inheritsList.push(toBeInherit);\n          }\n        }\n\n        // Path-levels\n        if (pathParameters) {\n          toBeInherit.parameters = pathParameters;\n          inheritsList.push(toBeInherit);\n        }\n        if (inheritsList.length) {\n          // eslint-disable-next-line no-restricted-syntax\n          for (const inherits of inheritsList) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const inheritName in inherits) {\n              if (!operation[inheritName]) {\n                operation[inheritName] = inherits[inheritName];\n              } else if (inheritName === 'parameters') {\n                // eslint-disable-next-line no-restricted-syntax\n                for (const param of inherits[inheritName]) {\n                  const exists = operation[inheritName].some(opParam => opParam.name && opParam.name === param.name || opParam.$ref && opParam.$ref === param.$ref || opParam.$$ref && opParam.$$ref === param.$$ref || opParam === param);\n                  if (!exists) {\n                    operation[inheritName].push(param);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  spec.$$normalized = true;\n  return parsedSpec;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}