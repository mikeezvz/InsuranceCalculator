{"ast":null,"code":"import { from, ParseResultElement } from '@swagger-api/apidom-core';\nimport { ParserError, Parser } from '@swagger-api/apidom-reference/configuration/empty';\nclass JSONParser extends Parser {\n  constructor(options = {}) {\n    super({\n      ...options,\n      name: 'json-swagger-client',\n      fileExtensions: ['.json'],\n      mediaTypes: ['application/json']\n    });\n  }\n  async canParse(file) {\n    const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n    const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);\n    if (!hasSupportedFileExtension) return false;\n    if (hasSupportedMediaType) return true;\n    if (!hasSupportedMediaType) {\n      try {\n        JSON.parse(file.toString());\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async parse(file) {\n    if (this.sourceMap) {\n      throw new ParserError(\"json-swagger-client parser plugin doesn't support sourceMaps option\");\n    }\n    const parseResultElement = new ParseResultElement();\n    const source = file.toString();\n\n    // allow empty files\n    if (this.allowEmpty && source.trim() === '') {\n      return parseResultElement;\n    }\n    try {\n      const element = from(JSON.parse(source));\n      element.classes.push('result');\n      parseResultElement.push(element);\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default JSONParser;","map":{"version":3,"names":["from","ParseResultElement","ParserError","Parser","JSONParser","constructor","options","name","fileExtensions","mediaTypes","canParse","file","hasSupportedFileExtension","length","includes","extension","hasSupportedMediaType","mediaType","JSON","parse","toString","error","sourceMap","parseResultElement","source","allowEmpty","trim","element","classes","push","uri","cause"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/apidom/reference/parse/parsers/json/index.js"],"sourcesContent":["import { from, ParseResultElement } from '@swagger-api/apidom-core';\nimport { ParserError, Parser } from '@swagger-api/apidom-reference/configuration/empty';\nclass JSONParser extends Parser {\n  constructor(options = {}) {\n    super({\n      ...options,\n      name: 'json-swagger-client',\n      fileExtensions: ['.json'],\n      mediaTypes: ['application/json']\n    });\n  }\n  async canParse(file) {\n    const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n    const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);\n    if (!hasSupportedFileExtension) return false;\n    if (hasSupportedMediaType) return true;\n    if (!hasSupportedMediaType) {\n      try {\n        JSON.parse(file.toString());\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async parse(file) {\n    if (this.sourceMap) {\n      throw new ParserError(\"json-swagger-client parser plugin doesn't support sourceMaps option\");\n    }\n    const parseResultElement = new ParseResultElement();\n    const source = file.toString();\n\n    // allow empty files\n    if (this.allowEmpty && source.trim() === '') {\n      return parseResultElement;\n    }\n    try {\n      const element = from(JSON.parse(source));\n      element.classes.push('result');\n      parseResultElement.push(element);\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default JSONParser;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,kBAAkB,QAAQ,0BAA0B;AACnE,SAASC,WAAW,EAAEC,MAAM,QAAQ,mDAAmD;AACvF,MAAMC,UAAU,SAASD,MAAM,CAAC;EAC9BE,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,KAAK,CAAC;MACJ,GAAGA,OAAO;MACVC,IAAI,EAAE,qBAAqB;MAC3BC,cAAc,EAAE,CAAC,OAAO,CAAC;MACzBC,UAAU,EAAE,CAAC,kBAAkB;IACjC,CAAC,CAAC;EACJ;EACA,MAAMC,QAAQA,CAACC,IAAI,EAAE;IACnB,MAAMC,yBAAyB,GAAG,IAAI,CAACJ,cAAc,CAACK,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAACL,cAAc,CAACM,QAAQ,CAACH,IAAI,CAACI,SAAS,CAAC;IACxH,MAAMC,qBAAqB,GAAG,IAAI,CAACP,UAAU,CAACK,QAAQ,CAACH,IAAI,CAACM,SAAS,CAAC;IACtE,IAAI,CAACL,yBAAyB,EAAE,OAAO,KAAK;IAC5C,IAAII,qBAAqB,EAAE,OAAO,IAAI;IACtC,IAAI,CAACA,qBAAqB,EAAE;MAC1B,IAAI;QACFE,IAAI,CAACC,KAAK,CAACR,IAAI,CAACS,QAAQ,CAAC,CAAC,CAAC;QAC3B,OAAO,IAAI;MACb,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd;EACA,MAAMF,KAAKA,CAACR,IAAI,EAAE;IAChB,IAAI,IAAI,CAACW,SAAS,EAAE;MAClB,MAAM,IAAIpB,WAAW,CAAC,qEAAqE,CAAC;IAC9F;IACA,MAAMqB,kBAAkB,GAAG,IAAItB,kBAAkB,CAAC,CAAC;IACnD,MAAMuB,MAAM,GAAGb,IAAI,CAACS,QAAQ,CAAC,CAAC;;IAE9B;IACA,IAAI,IAAI,CAACK,UAAU,IAAID,MAAM,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC3C,OAAOH,kBAAkB;IAC3B;IACA,IAAI;MACF,MAAMI,OAAO,GAAG3B,IAAI,CAACkB,IAAI,CAACC,KAAK,CAACK,MAAM,CAAC,CAAC;MACxCG,OAAO,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC9BN,kBAAkB,CAACM,IAAI,CAACF,OAAO,CAAC;MAChC,OAAOJ,kBAAkB;IAC3B,CAAC,CAAC,OAAOF,KAAK,EAAE;MACd,MAAM,IAAInB,WAAW,CAAC,kBAAkBS,IAAI,CAACmB,GAAG,GAAG,EAAE;QACnDC,KAAK,EAAEV;MACT,CAAC,CAAC;IACJ;EACF;AACF;AACA,eAAejB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}