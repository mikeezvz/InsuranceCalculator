{"ast":null,"code":"import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill, { AggregatedError } from './internal/ponyfills/Promise.any.js';\nexport var anyPPonyfill = curryN(1, ponyfill);\nexport { AggregatedError };\n\n/**\n * Returns a promise that is fulfilled by the first given promise to be fulfilled,\n * or rejected with an array of rejection reasons if all of the given promises are rejected.\n *\n * @func anyP\n * @memberOf RA\n * @category Function\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig [Promise a] -> Promise a\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} A promise that is fulfilled by the first given promise to be fulfilled, or rejected with an array of rejection reasons if all of the given promises are rejected\n * @see {@link RA.lastP|lastP}\n * @example\n *\n * RA.anyP([\n *   Promise.resolve(1),\n *   2,\n *   Promise.reject(3),\n * ]); //=> Promise(1)\n */\nvar anyP = isFunction(Promise.any) ? curryN(1, bind(Promise.any, Promise)) : anyPPonyfill;\nexport default anyP;","map":{"version":3,"names":["bind","curryN","isFunction","ponyfill","AggregatedError","anyPPonyfill","anyP","Promise","any"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/anyP.js"],"sourcesContent":["import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill, { AggregatedError } from './internal/ponyfills/Promise.any.js';\nexport var anyPPonyfill = curryN(1, ponyfill);\nexport { AggregatedError };\n\n/**\n * Returns a promise that is fulfilled by the first given promise to be fulfilled,\n * or rejected with an array of rejection reasons if all of the given promises are rejected.\n *\n * @func anyP\n * @memberOf RA\n * @category Function\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig [Promise a] -> Promise a\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} A promise that is fulfilled by the first given promise to be fulfilled, or rejected with an array of rejection reasons if all of the given promises are rejected\n * @see {@link RA.lastP|lastP}\n * @example\n *\n * RA.anyP([\n *   Promise.resolve(1),\n *   2,\n *   Promise.reject(3),\n * ]); //=> Promise(1)\n */\nvar anyP = isFunction(Promise.any) ? curryN(1, bind(Promise.any, Promise)) : anyPPonyfill;\nexport default anyP;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,OAAO;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,IAAIC,eAAe,QAAQ,qCAAqC;AAC/E,OAAO,IAAIC,YAAY,GAAGJ,MAAM,CAAC,CAAC,EAAEE,QAAQ,CAAC;AAC7C,SAASC,eAAe;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,IAAI,GAAGJ,UAAU,CAACK,OAAO,CAACC,GAAG,CAAC,GAAGP,MAAM,CAAC,CAAC,EAAED,IAAI,CAACO,OAAO,CAACC,GAAG,EAAED,OAAO,CAAC,CAAC,GAAGF,YAAY;AACzF,eAAeC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}