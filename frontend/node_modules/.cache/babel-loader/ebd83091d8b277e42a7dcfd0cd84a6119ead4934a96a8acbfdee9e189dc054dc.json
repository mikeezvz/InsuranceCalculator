{"ast":null,"code":"import { both, complement, curryN } from 'ramda';\nimport isInteger from './isInteger.js';\nimport isNegative from './isNegative.js';\n\n/**\n * Checks if value is a natural number.\n * Natural numbers correspond to all non-negative integers and 0.\n *\n * @func isNaturalNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isNaturalNumber(5); // => true\n * RA.isNaturalNumber(Number.MAX_VALUE); // => true\n * RA.isNaturalNumber(0); // => true\n * RA.isNaturalNumber(-1); // => false\n * RA.isNaturalNumber(0.9); // => false\n */\n\nvar isNaturalNumber = curryN(1, both(isInteger, complement(isNegative)));\nexport default isNaturalNumber;","map":{"version":3,"names":["both","complement","curryN","isInteger","isNegative","isNaturalNumber"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNaturalNumber.js"],"sourcesContent":["import { both, complement, curryN } from 'ramda';\nimport isInteger from './isInteger.js';\nimport isNegative from './isNegative.js';\n\n/**\n * Checks if value is a natural number.\n * Natural numbers correspond to all non-negative integers and 0.\n *\n * @func isNaturalNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isNaturalNumber(5); // => true\n * RA.isNaturalNumber(Number.MAX_VALUE); // => true\n * RA.isNaturalNumber(0); // => true\n * RA.isNaturalNumber(-1); // => false\n * RA.isNaturalNumber(0.9); // => false\n */\n\nvar isNaturalNumber = curryN(1, both(isInteger, complement(isNegative)));\nexport default isNaturalNumber;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAGH,MAAM,CAAC,CAAC,EAAEF,IAAI,CAACG,SAAS,EAAEF,UAAU,CAACG,UAAU,CAAC,CAAC,CAAC;AACxE,eAAeC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}