{"ast":null,"code":"import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Number.isSafeInteger.js';\nexport var isSafeIntegerPonyfill = curryN(1, ponyfill);\n\n/**\n * Checks whether the passed value is a safe `integer`.\n *\n * @func isSafeInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isSafeInteger(3); //=> true\n * RA.isSafeInteger(Math.pow(2, 53)) //=> false\n * RA.isSafeInteger(Math.pow(2, 53) - 1); //=> true\n * RA.isSafeInteger(NaN); //=> false\n * RA.isSafeInteger(Infinity); //=> false\n * RA.isSafeInteger('3') //=> false\n * RA.isSafeInteger(3.1); //=> false\n * RA.isSafeInteger(3.0); //=> true\n * RA.isSafeInteger('string'); //=> false\n * RA.isSafeInteger(null); //=> false\n * RA.isSafeInteger(undefined); //=> false\n * RA.isSafeInteger({}); //=> false\n * RA.isSafeInteger(() => { }); //=> false\n * RA.isSafeInteger(true); //=> false\n */\n\nvar isSafeInteger = isFunction(Number.isSafeInteger) ? curryN(1, bind(Number.isSafeInteger, Number)) : isSafeIntegerPonyfill;\nexport default isSafeInteger;","map":{"version":3,"names":["bind","curryN","isFunction","ponyfill","isSafeIntegerPonyfill","isSafeInteger","Number"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isSafeInteger.js"],"sourcesContent":["import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Number.isSafeInteger.js';\nexport var isSafeIntegerPonyfill = curryN(1, ponyfill);\n\n/**\n * Checks whether the passed value is a safe `integer`.\n *\n * @func isSafeInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @example\n *\n * RA.isSafeInteger(3); //=> true\n * RA.isSafeInteger(Math.pow(2, 53)) //=> false\n * RA.isSafeInteger(Math.pow(2, 53) - 1); //=> true\n * RA.isSafeInteger(NaN); //=> false\n * RA.isSafeInteger(Infinity); //=> false\n * RA.isSafeInteger('3') //=> false\n * RA.isSafeInteger(3.1); //=> false\n * RA.isSafeInteger(3.0); //=> true\n * RA.isSafeInteger('string'); //=> false\n * RA.isSafeInteger(null); //=> false\n * RA.isSafeInteger(undefined); //=> false\n * RA.isSafeInteger({}); //=> false\n * RA.isSafeInteger(() => { }); //=> false\n * RA.isSafeInteger(true); //=> false\n */\n\nvar isSafeInteger = isFunction(Number.isSafeInteger) ? curryN(1, bind(Number.isSafeInteger, Number)) : isSafeIntegerPonyfill;\nexport default isSafeInteger;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,OAAO;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,8CAA8C;AACnE,OAAO,IAAIC,qBAAqB,GAAGH,MAAM,CAAC,CAAC,EAAEE,QAAQ,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIE,aAAa,GAAGH,UAAU,CAACI,MAAM,CAACD,aAAa,CAAC,GAAGJ,MAAM,CAAC,CAAC,EAAED,IAAI,CAACM,MAAM,CAACD,aAAa,EAAEC,MAAM,CAAC,CAAC,GAAGF,qBAAqB;AAC5H,eAAeC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}