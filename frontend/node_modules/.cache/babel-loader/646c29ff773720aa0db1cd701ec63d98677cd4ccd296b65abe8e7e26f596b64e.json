{"ast":null,"code":"import { isUndefined } from 'ramda-adjunct';\nimport { filter } from '@swagger-api/apidom-core';\nimport { isSchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport { uriToPointer, evaluate as jsonPointerEvaluate } from '@swagger-api/apidom-json-pointer';\nimport * as url from \"../../../../util/url.mjs\";\nimport EvaluationJsonSchemaUriError from \"../../../../errors/EvaluationJsonSchemaUriError.mjs\";\nimport { isAnchor, uriToAnchor, evaluate as $anchorEvaluate } from \"./$anchor.mjs\";\nimport { resolveSchema$idField } from \"../util.mjs\";\n/**\n * Evaluates JSON Schema $ref containing unknown URI against ApiDOM fragment.\n */\nexport const evaluate = (uri, element) => {\n  const {\n    cache\n  } = evaluate;\n  const uriStrippedHash = url.stripHash(uri);\n  const isSchemaElementWith$id = e => isSchemaElement(e) && typeof e.$id !== 'undefined';\n\n  // warm the cache\n  if (!cache.has(element)) {\n    const schemaObjectElements = filter(isSchemaElementWith$id, element);\n    cache.set(element, Array.from(schemaObjectElements));\n  }\n\n  // search for the matching schema\n  const result = cache.get(element).find(e => {\n    const $idBaseURI = resolveSchema$idField(uriStrippedHash, e);\n    return $idBaseURI === uriStrippedHash;\n  });\n  if (isUndefined(result)) {\n    throw new EvaluationJsonSchemaUriError(`Evaluation failed on URI: \"${uri}\"`);\n  }\n  let fragmentEvaluate;\n  let selector;\n  if (isAnchor(uriToAnchor(uri))) {\n    // we're dealing with JSON Schema $anchor here\n    fragmentEvaluate = $anchorEvaluate;\n    selector = uriToAnchor(uri);\n  } else {\n    // we're assuming here that we're dealing with JSON Pointer here\n    fragmentEvaluate = jsonPointerEvaluate;\n    selector = uriToPointer(uri);\n  }\n\n  // @ts-ignore\n  return fragmentEvaluate(selector, result);\n};\nevaluate.cache = new WeakMap();\nexport { EvaluationJsonSchemaUriError };\nexport { default as JsonSchemaUriError } from \"../../../../errors/JsonSchemaUriError.mjs\";","map":{"version":3,"names":["isUndefined","filter","isSchemaElement","uriToPointer","evaluate","jsonPointerEvaluate","url","EvaluationJsonSchemaUriError","isAnchor","uriToAnchor","$anchorEvaluate","resolveSchema$idField","uri","element","cache","uriStrippedHash","stripHash","isSchemaElementWith$id","e","$id","has","schemaObjectElements","set","Array","from","result","get","find","$idBaseURI","fragmentEvaluate","selector","WeakMap","default","JsonSchemaUriError"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/dereference/strategies/openapi-3-1/selectors/uri.mjs"],"sourcesContent":["import { isUndefined } from 'ramda-adjunct';\nimport { filter } from '@swagger-api/apidom-core';\nimport { isSchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport { uriToPointer, evaluate as jsonPointerEvaluate } from '@swagger-api/apidom-json-pointer';\nimport * as url from \"../../../../util/url.mjs\";\nimport EvaluationJsonSchemaUriError from \"../../../../errors/EvaluationJsonSchemaUriError.mjs\";\nimport { isAnchor, uriToAnchor, evaluate as $anchorEvaluate } from \"./$anchor.mjs\";\nimport { resolveSchema$idField } from \"../util.mjs\";\n/**\n * Evaluates JSON Schema $ref containing unknown URI against ApiDOM fragment.\n */\nexport const evaluate = (uri, element) => {\n  const {\n    cache\n  } = evaluate;\n  const uriStrippedHash = url.stripHash(uri);\n  const isSchemaElementWith$id = e => isSchemaElement(e) && typeof e.$id !== 'undefined';\n\n  // warm the cache\n  if (!cache.has(element)) {\n    const schemaObjectElements = filter(isSchemaElementWith$id, element);\n    cache.set(element, Array.from(schemaObjectElements));\n  }\n\n  // search for the matching schema\n  const result = cache.get(element).find(e => {\n    const $idBaseURI = resolveSchema$idField(uriStrippedHash, e);\n    return $idBaseURI === uriStrippedHash;\n  });\n  if (isUndefined(result)) {\n    throw new EvaluationJsonSchemaUriError(`Evaluation failed on URI: \"${uri}\"`);\n  }\n  let fragmentEvaluate;\n  let selector;\n  if (isAnchor(uriToAnchor(uri))) {\n    // we're dealing with JSON Schema $anchor here\n    fragmentEvaluate = $anchorEvaluate;\n    selector = uriToAnchor(uri);\n  } else {\n    // we're assuming here that we're dealing with JSON Pointer here\n    fragmentEvaluate = jsonPointerEvaluate;\n    selector = uriToPointer(uri);\n  }\n\n  // @ts-ignore\n  return fragmentEvaluate(selector, result);\n};\nevaluate.cache = new WeakMap();\nexport { EvaluationJsonSchemaUriError };\nexport { default as JsonSchemaUriError } from \"../../../../errors/JsonSchemaUriError.mjs\";"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,YAAY,EAAEC,QAAQ,IAAIC,mBAAmB,QAAQ,kCAAkC;AAChG,OAAO,KAAKC,GAAG,MAAM,0BAA0B;AAC/C,OAAOC,4BAA4B,MAAM,qDAAqD;AAC9F,SAASC,QAAQ,EAAEC,WAAW,EAAEL,QAAQ,IAAIM,eAAe,QAAQ,eAAe;AAClF,SAASC,qBAAqB,QAAQ,aAAa;AACnD;AACA;AACA;AACA,OAAO,MAAMP,QAAQ,GAAGA,CAACQ,GAAG,EAAEC,OAAO,KAAK;EACxC,MAAM;IACJC;EACF,CAAC,GAAGV,QAAQ;EACZ,MAAMW,eAAe,GAAGT,GAAG,CAACU,SAAS,CAACJ,GAAG,CAAC;EAC1C,MAAMK,sBAAsB,GAAGC,CAAC,IAAIhB,eAAe,CAACgB,CAAC,CAAC,IAAI,OAAOA,CAAC,CAACC,GAAG,KAAK,WAAW;;EAEtF;EACA,IAAI,CAACL,KAAK,CAACM,GAAG,CAACP,OAAO,CAAC,EAAE;IACvB,MAAMQ,oBAAoB,GAAGpB,MAAM,CAACgB,sBAAsB,EAAEJ,OAAO,CAAC;IACpEC,KAAK,CAACQ,GAAG,CAACT,OAAO,EAAEU,KAAK,CAACC,IAAI,CAACH,oBAAoB,CAAC,CAAC;EACtD;;EAEA;EACA,MAAMI,MAAM,GAAGX,KAAK,CAACY,GAAG,CAACb,OAAO,CAAC,CAACc,IAAI,CAACT,CAAC,IAAI;IAC1C,MAAMU,UAAU,GAAGjB,qBAAqB,CAACI,eAAe,EAAEG,CAAC,CAAC;IAC5D,OAAOU,UAAU,KAAKb,eAAe;EACvC,CAAC,CAAC;EACF,IAAIf,WAAW,CAACyB,MAAM,CAAC,EAAE;IACvB,MAAM,IAAIlB,4BAA4B,CAAC,8BAA8BK,GAAG,GAAG,CAAC;EAC9E;EACA,IAAIiB,gBAAgB;EACpB,IAAIC,QAAQ;EACZ,IAAItB,QAAQ,CAACC,WAAW,CAACG,GAAG,CAAC,CAAC,EAAE;IAC9B;IACAiB,gBAAgB,GAAGnB,eAAe;IAClCoB,QAAQ,GAAGrB,WAAW,CAACG,GAAG,CAAC;EAC7B,CAAC,MAAM;IACL;IACAiB,gBAAgB,GAAGxB,mBAAmB;IACtCyB,QAAQ,GAAG3B,YAAY,CAACS,GAAG,CAAC;EAC9B;;EAEA;EACA,OAAOiB,gBAAgB,CAACC,QAAQ,EAAEL,MAAM,CAAC;AAC3C,CAAC;AACDrB,QAAQ,CAACU,KAAK,GAAG,IAAIiB,OAAO,CAAC,CAAC;AAC9B,SAASxB,4BAA4B;AACrC,SAASyB,OAAO,IAAIC,kBAAkB,QAAQ,2CAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}