{"ast":null,"code":"function _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nimport { curryN, reduce, length } from 'ramda';\nimport isUndefined from './isUndefined.js';\nimport resolveP from './resolveP.js';\nimport allP from './allP.js';\n\n/* eslint-disable max-len */\n/**\n * Given an `Iterable`(arrays are `Iterable`), or a promise of an `Iterable`,\n * which produces promises (or a mix of promises and values),\n * iterate over all the values in the `Iterable` into an array and\n * reduce the array to a value using the given iterator function.\n *\n * If the iterator function returns a promise, then the result of the promise is awaited,\n * before continuing with next iteration. If any promise in the array is rejected or a promise\n * returned by the iterator function is rejected, the result is rejected as well.\n *\n * If `initialValue` is `undefined` (or a promise that resolves to `undefined`) and\n * the `Iterable` contains only 1 item, the callback will not be called and\n * the `Iterable's` single item is returned. If the `Iterable` is empty, the callback\n * will not be called and `initialValue` is returned (which may be undefined).\n *\n * This function is basically equivalent to {@link http://bluebirdjs.com/docs/api/promise.reduce.html|bluebird.reduce}.\n *\n * @func reduceP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|v1.13.0}\n * @category List\n * @typedef MaybePromise = Promise.<*> | *\n * @sig ((Promise a, MaybePromise b) -> Promise a) -> MaybePromise a -> MaybePromise [MaybePromise b] -> Promise a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the current element from the list\n * @param {*|Promise.<*>} acc The accumulator value\n * @param {Array.<*>|Promise.<Array<*|Promise.<*>>>} list The list to iterate over\n * @return {Promise} The final, accumulated value\n * @see {@link http://ramdajs.com/docs/#reduce|R.reduce}, {@link RA.reduceRightP|reduceRightP}, {@link http://bluebirdjs.com/docs/api/promise.reduce.html|bluebird.reduce}\n * @example\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   0,\n *   ['file1.txt', 'file2.txt', 'file3.txt']\n * ); // => Promise(10)\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   Promise.resolve(0),\n *   ['file1.txt', 'file2.txt', 'file3.txt']\n * ); // => Promise(10)\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   0,\n *   [Promise.resolve('file1.txt'), 'file2.txt', 'file3.txt']\n * ); // => Promise(10)\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   0,\n *   Promise.resolve([Promise.resolve('file1.txt'), 'file2.txt', 'file3.txt'])\n * ); // => Promise(10)\n *\n */\n/* esline-enable max-len */\nvar reduceP = curryN(3, function (fn, acc, list) {\n  return resolveP(list).then(function (iterable) {\n    var listLength = length(iterable);\n    if (listLength === 0) {\n      return acc;\n    }\n    var reducer = reduce(function (accP, currentValueP) {\n      return accP.then(function (previousValue) {\n        return allP([previousValue, currentValueP]);\n      }).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          previousValue = _ref2[0],\n          currentValue = _ref2[1];\n        if (isUndefined(previousValue) && listLength === 1) {\n          return currentValue;\n        }\n        return fn(previousValue, currentValue);\n      });\n    });\n    return reducer(resolveP(acc), iterable);\n  });\n});\nexport default reduceP;","map":{"version":3,"names":["_slicedToArray","r","e","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","length","n","l","Symbol","iterator","i","u","f","o","next","Object","done","push","value","isArray","curryN","reduce","isUndefined","resolveP","allP","reduceP","fn","acc","list","then","iterable","listLength","reducer","accP","currentValueP","previousValue","_ref","_ref2","currentValue"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/reduceP.js"],"sourcesContent":["function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport { curryN, reduce, length } from 'ramda';\nimport isUndefined from './isUndefined.js';\nimport resolveP from './resolveP.js';\nimport allP from './allP.js';\n\n/* eslint-disable max-len */\n/**\n * Given an `Iterable`(arrays are `Iterable`), or a promise of an `Iterable`,\n * which produces promises (or a mix of promises and values),\n * iterate over all the values in the `Iterable` into an array and\n * reduce the array to a value using the given iterator function.\n *\n * If the iterator function returns a promise, then the result of the promise is awaited,\n * before continuing with next iteration. If any promise in the array is rejected or a promise\n * returned by the iterator function is rejected, the result is rejected as well.\n *\n * If `initialValue` is `undefined` (or a promise that resolves to `undefined`) and\n * the `Iterable` contains only 1 item, the callback will not be called and\n * the `Iterable's` single item is returned. If the `Iterable` is empty, the callback\n * will not be called and `initialValue` is returned (which may be undefined).\n *\n * This function is basically equivalent to {@link http://bluebirdjs.com/docs/api/promise.reduce.html|bluebird.reduce}.\n *\n * @func reduceP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|v1.13.0}\n * @category List\n * @typedef MaybePromise = Promise.<*> | *\n * @sig ((Promise a, MaybePromise b) -> Promise a) -> MaybePromise a -> MaybePromise [MaybePromise b] -> Promise a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the current element from the list\n * @param {*|Promise.<*>} acc The accumulator value\n * @param {Array.<*>|Promise.<Array<*|Promise.<*>>>} list The list to iterate over\n * @return {Promise} The final, accumulated value\n * @see {@link http://ramdajs.com/docs/#reduce|R.reduce}, {@link RA.reduceRightP|reduceRightP}, {@link http://bluebirdjs.com/docs/api/promise.reduce.html|bluebird.reduce}\n * @example\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   0,\n *   ['file1.txt', 'file2.txt', 'file3.txt']\n * ); // => Promise(10)\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   Promise.resolve(0),\n *   ['file1.txt', 'file2.txt', 'file3.txt']\n * ); // => Promise(10)\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   0,\n *   [Promise.resolve('file1.txt'), 'file2.txt', 'file3.txt']\n * ); // => Promise(10)\n *\n * RA.reduceP(\n *   (total, fileName) => fs\n *     .readFileAsync(fileName, 'utf8')\n *     .then(contents => total + parseInt(contents, 10)),\n *   0,\n *   Promise.resolve([Promise.resolve('file1.txt'), 'file2.txt', 'file3.txt'])\n * ); // => Promise(10)\n *\n */\n/* esline-enable max-len */\nvar reduceP = curryN(3, function (fn, acc, list) {\n  return resolveP(list).then(function (iterable) {\n    var listLength = length(iterable);\n    if (listLength === 0) {\n      return acc;\n    }\n    var reducer = reduce(function (accP, currentValueP) {\n      return accP.then(function (previousValue) {\n        return allP([previousValue, currentValueP]);\n      }).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          previousValue = _ref2[0],\n          currentValue = _ref2[1];\n        if (isUndefined(previousValue) && listLength === 1) {\n          return currentValue;\n        }\n        return fn(previousValue, currentValue);\n      });\n    });\n    return reducer(resolveP(acc), iterable);\n  });\n});\nexport default reduceP;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}