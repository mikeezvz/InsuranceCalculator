{"ast":null,"code":"import { complement } from 'ramda';\nimport lensEq from './lensEq.js';\n\n/**\n * Returns `true` if data structure focused by the given lens doesn't equal provided value.\n *\n * @func lensNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> b -> s -> Boolean\n * @see {@link RA.lensEq|lensEq}\n * @param {function} lens Van Laarhoven lens\n * @param {*} value The value to compare the focused data structure with\n * @param {*} data The data structure\n * @return {boolean} `false` if the focused data structure equals value, `true` otherwise\n *\n * @example\n *\n * RA.lensNotEq(R.lensIndex(0), 1, [0, 1, 2]); // => true\n * RA.lensNotEq(R.lensIndex(1), 1, [0, 1, 2]); // => false\n * RA.lensNotEq(R.lensPath(['a', 'b']), 'foo', { a: { b: 'foo' } }) // => false\n */\nvar lensNotEq = complement(lensEq);\nexport default lensNotEq;","map":{"version":3,"names":["complement","lensEq","lensNotEq"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/lensNotEq.js"],"sourcesContent":["import { complement } from 'ramda';\nimport lensEq from './lensEq.js';\n\n/**\n * Returns `true` if data structure focused by the given lens doesn't equal provided value.\n *\n * @func lensNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> b -> s -> Boolean\n * @see {@link RA.lensEq|lensEq}\n * @param {function} lens Van Laarhoven lens\n * @param {*} value The value to compare the focused data structure with\n * @param {*} data The data structure\n * @return {boolean} `false` if the focused data structure equals value, `true` otherwise\n *\n * @example\n *\n * RA.lensNotEq(R.lensIndex(0), 1, [0, 1, 2]); // => true\n * RA.lensNotEq(R.lensIndex(1), 1, [0, 1, 2]); // => false\n * RA.lensNotEq(R.lensPath(['a', 'b']), 'foo', { a: { b: 'foo' } }) // => false\n */\nvar lensNotEq = complement(lensEq);\nexport default lensNotEq;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,MAAM,MAAM,aAAa;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGF,UAAU,CAACC,MAAM,CAAC;AAClC,eAAeC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}