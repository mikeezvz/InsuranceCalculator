{"ast":null,"code":"import { Namespace as MinimNamespace } from 'minim';\nimport { isPlainObject } from 'ramda-adjunct';\nimport AnnotationElement from \"./elements/Annotation.mjs\";\nimport CommentElement from \"./elements/Comment.mjs\";\nimport ParseResultElement from \"./elements/ParseResult.mjs\";\nimport SourceMapElement from \"./elements/SourceMap.mjs\";\nexport class Namespace extends MinimNamespace {\n  constructor() {\n    super();\n    this.register('annotation', AnnotationElement);\n    this.register('comment', CommentElement);\n    this.register('parseResult', ParseResultElement);\n    this.register('sourceMap', SourceMapElement);\n  }\n}\nconst namespace = new Namespace();\nexport const createNamespace = namespacePlugin => {\n  const namespaceInstance = new Namespace();\n  if (isPlainObject(namespacePlugin)) {\n    namespaceInstance.use(namespacePlugin);\n  }\n  return namespaceInstance;\n};\nexport default namespace;","map":{"version":3,"names":["Namespace","MinimNamespace","isPlainObject","AnnotationElement","CommentElement","ParseResultElement","SourceMapElement","constructor","register","namespace","createNamespace","namespacePlugin","namespaceInstance","use"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-core/es/namespace.mjs"],"sourcesContent":["import { Namespace as MinimNamespace } from 'minim';\nimport { isPlainObject } from 'ramda-adjunct';\nimport AnnotationElement from \"./elements/Annotation.mjs\";\nimport CommentElement from \"./elements/Comment.mjs\";\nimport ParseResultElement from \"./elements/ParseResult.mjs\";\nimport SourceMapElement from \"./elements/SourceMap.mjs\";\nexport class Namespace extends MinimNamespace {\n  constructor() {\n    super();\n    this.register('annotation', AnnotationElement);\n    this.register('comment', CommentElement);\n    this.register('parseResult', ParseResultElement);\n    this.register('sourceMap', SourceMapElement);\n  }\n}\nconst namespace = new Namespace();\nexport const createNamespace = namespacePlugin => {\n  const namespaceInstance = new Namespace();\n  if (isPlainObject(namespacePlugin)) {\n    namespaceInstance.use(namespacePlugin);\n  }\n  return namespaceInstance;\n};\nexport default namespace;"],"mappings":"AAAA,SAASA,SAAS,IAAIC,cAAc,QAAQ,OAAO;AACnD,SAASC,aAAa,QAAQ,eAAe;AAC7C,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAOC,kBAAkB,MAAM,4BAA4B;AAC3D,OAAOC,gBAAgB,MAAM,0BAA0B;AACvD,OAAO,MAAMN,SAAS,SAASC,cAAc,CAAC;EAC5CM,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,QAAQ,CAAC,YAAY,EAAEL,iBAAiB,CAAC;IAC9C,IAAI,CAACK,QAAQ,CAAC,SAAS,EAAEJ,cAAc,CAAC;IACxC,IAAI,CAACI,QAAQ,CAAC,aAAa,EAAEH,kBAAkB,CAAC;IAChD,IAAI,CAACG,QAAQ,CAAC,WAAW,EAAEF,gBAAgB,CAAC;EAC9C;AACF;AACA,MAAMG,SAAS,GAAG,IAAIT,SAAS,CAAC,CAAC;AACjC,OAAO,MAAMU,eAAe,GAAGC,eAAe,IAAI;EAChD,MAAMC,iBAAiB,GAAG,IAAIZ,SAAS,CAAC,CAAC;EACzC,IAAIE,aAAa,CAACS,eAAe,CAAC,EAAE;IAClCC,iBAAiB,CAACC,GAAG,CAACF,eAAe,CAAC;EACxC;EACA,OAAOC,iBAAiB;AAC1B,CAAC;AACD,eAAeH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}