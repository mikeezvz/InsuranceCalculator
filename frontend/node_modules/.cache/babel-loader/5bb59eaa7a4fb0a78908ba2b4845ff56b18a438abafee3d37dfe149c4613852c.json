{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from './match';\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nvar UrlMatch = /** @class */function (_super) {\n  __extends(UrlMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n  function UrlMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} url (required)\n     *\n     * The url that was matched.\n     */\n    _this.url = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n     *\n     * The type of URL match that this class represents. This helps to determine\n     * if the match was made in the original text with a prefixed scheme (ex:\n     * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n     * was matched by a known top-level domain (ex: 'google.com').\n     */\n    _this.urlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} protocolUrlMatch (required)\n     *\n     * `true` if the URL is a match which already has a protocol (i.e.\n     * 'http://'), `false` if the match was from a 'www' or known TLD match.\n     */\n    _this.protocolUrlMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} protocolRelativeMatch (required)\n     *\n     * `true` if the URL is a protocol-relative match. A protocol-relative match\n     * is a URL that starts with '//', and will be either http:// or https://\n     * based on the protocol that the site is loaded under.\n     */\n    _this.protocolRelativeMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#cfg-stripTrailingSlash\n     */\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#cfg-decodePercentEncoding\n     */\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @private\n     * @property {RegExp} schemePrefixRegex\n     *\n     * A regular expression used to remove the 'http://' or 'https://' from\n     * URLs.\n     */\n    _this.schemePrefixRegex = /^(https?:\\/\\/)?/i;\n    /**\n     * @private\n     * @property {RegExp} wwwPrefixRegex\n     *\n     * A regular expression used to remove the 'www.' from URLs.\n     */\n    _this.wwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n    /**\n     * @private\n     * @property {RegExp} protocolRelativeRegex\n     *\n     * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n     * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n     */\n    _this.protocolRelativeRegex = /^\\/\\//;\n    /**\n     * @private\n     * @property {Boolean} protocolPrepended\n     *\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n    _this.protocolPrepended = false;\n    _this.urlMatchType = cfg.urlMatchType;\n    _this.url = cfg.url;\n    _this.protocolUrlMatch = cfg.protocolUrlMatch;\n    _this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of UrlMatch, returns 'url'.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getType = function () {\n    return 'url';\n  };\n  /**\n   * Returns a string name for the type of URL match that this class\n   * represents.\n   *\n   * This helps to determine if the match was made in the original text with a\n   * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n   * 'www.google.com'), or was matched by a known top-level domain (ex:\n   * 'google.com').\n   *\n   * @return {\"scheme\"/\"www\"/\"tld\"}\n   */\n  UrlMatch.prototype.getUrlMatchType = function () {\n    return this.urlMatchType;\n  };\n  /**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getUrl = function () {\n    var url = this.url;\n    // if the url string doesn't begin with a protocol, assume 'http://'\n    if (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n      url = this.url = 'http://' + url;\n      this.protocolPrepended = true;\n    }\n    return url;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getAnchorHref = function () {\n    var url = this.getUrl();\n    return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n  UrlMatch.prototype.getAnchorText = function () {\n    var anchorText = this.getMatchedText();\n    if (this.protocolRelativeMatch) {\n      // Strip off any protocol-relative '//' from the anchor text\n      anchorText = this.stripProtocolRelativePrefix(anchorText);\n    }\n    if (this.stripPrefix.scheme) {\n      anchorText = this.stripSchemePrefix(anchorText);\n    }\n    if (this.stripPrefix.www) {\n      anchorText = this.stripWwwPrefix(anchorText);\n    }\n    if (this.stripTrailingSlash) {\n      anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n    }\n    if (this.decodePercentEncoding) {\n      anchorText = this.removePercentEncoding(anchorText);\n    }\n    return anchorText;\n  };\n  // ---------------------------------------\n  // Utility Functionality\n  /**\n   * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n   * `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the url scheme.\n   * @return {String} The `url`, with the scheme stripped.\n   */\n  UrlMatch.prototype.stripSchemePrefix = function (url) {\n    return url.replace(this.schemePrefixRegex, '');\n  };\n  /**\n   * Strips the 'www' prefix from the given `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the 'www' if it exists.\n   * @return {String} The `url`, with the 'www' stripped.\n   */\n  UrlMatch.prototype.stripWwwPrefix = function (url) {\n    return url.replace(this.wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n  };\n  /**\n   * Strips any protocol-relative '//' from the anchor text.\n   *\n   * @private\n   * @param {String} text The text of the anchor that is being generated, for which to strip off the\n   *   protocol-relative prefix (such as stripping off \"//\")\n   * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n   */\n  UrlMatch.prototype.stripProtocolRelativePrefix = function (text) {\n    return text.replace(this.protocolRelativeRegex, '');\n  };\n  /**\n   * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n   *   slash ('/') that may exist.\n   * @return {String} The `anchorText`, with the trailing slash removed.\n   */\n  UrlMatch.prototype.removeTrailingSlash = function (anchorText) {\n    if (anchorText.charAt(anchorText.length - 1) === '/') {\n      anchorText = anchorText.slice(0, -1);\n    }\n    return anchorText;\n  };\n  /**\n   * Decodes percent-encoded characters from the given `anchorText`, in\n   * preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being\n   *   generated, for which to decode any percent-encoded characters.\n   * @return {String} The `anchorText`, with the percent-encoded characters\n   *   decoded.\n   */\n  UrlMatch.prototype.removePercentEncoding = function (anchorText) {\n    // First, convert a few of the known % encodings to the corresponding\n    // HTML entities that could accidentally be interpretted as special\n    // HTML characters\n    var preProcessedEntityAnchorText = anchorText.replace(/%22/gi, '&quot;') // \" char\n    .replace(/%26/gi, '&amp;') // & char\n    .replace(/%27/gi, '&#39;') // ' char\n    .replace(/%3C/gi, '&lt;') // < char\n    .replace(/%3E/gi, '&gt;'); // > char\n    try {\n      // Now attempt to decode the rest of the anchor text\n      return decodeURIComponent(preProcessedEntityAnchorText);\n    } catch (e) {\n      // Invalid % escape sequence in the anchor text\n      return preProcessedEntityAnchorText;\n    }\n  };\n  return UrlMatch;\n}(Match);\nexport { UrlMatch };","map":{"version":3,"names":["Match","UrlMatch","_super","__extends","cfg","_this","call","url","urlMatchType","protocolUrlMatch","protocolRelativeMatch","stripPrefix","scheme","www","stripTrailingSlash","decodePercentEncoding","schemePrefixRegex","wwwPrefixRegex","protocolRelativeRegex","protocolPrepended","prototype","getType","getUrlMatchType","getUrl","getAnchorHref","replace","getAnchorText","anchorText","getMatchedText","stripProtocolRelativePrefix","stripSchemePrefix","stripWwwPrefix","removeTrailingSlash","removePercentEncoding","text","charAt","length","slice","preProcessedEntityAnchorText","decodeURIComponent","e"],"sources":["../../../src/match/url-match.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}