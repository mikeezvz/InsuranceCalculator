{"ast":null,"code":"import _curryN from \"./internal/_curryN.js\";\n/**\n * Splits an array into slices on every occurrence of a value.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]); //=> [[1], [3], [4, 5], [6, 7]]\n */\nvar splitWhenever = /*#__PURE__*/_curryN(2, [], function splitWhenever(pred, list) {\n  var acc = [];\n  var curr = [];\n  for (var i = 0; i < list.length; i = i + 1) {\n    if (!pred(list[i])) {\n      curr.push(list[i]);\n    }\n    if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {\n      acc.push(curr);\n      curr = [];\n    }\n  }\n  return acc;\n});\nexport default splitWhenever;","map":{"version":3,"names":["_curryN","splitWhenever","pred","list","acc","curr","i","length","push"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/splitWhenever.js"],"sourcesContent":["import _curryN from \"./internal/_curryN.js\";\n/**\n * Splits an array into slices on every occurrence of a value.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]); //=> [[1], [3], [4, 5], [6, 7]]\n */\nvar splitWhenever = /*#__PURE__*/_curryN(2, [], function splitWhenever(pred, list) {\n  var acc = [];\n  var curr = [];\n  for (var i = 0; i < list.length; i = i + 1) {\n    if (!pred(list[i])) {\n      curr.push(list[i]);\n    }\n    if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {\n      acc.push(curr);\n      curr = [];\n    }\n  }\n  return acc;\n});\nexport default splitWhenever;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAaD,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,SAASC,aAAaA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACjF,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,GAAGA,CAAC,GAAG,CAAC,EAAE;IAC1C,IAAI,CAACJ,IAAI,CAACC,IAAI,CAACG,CAAC,CAAC,CAAC,EAAE;MAClBD,IAAI,CAACG,IAAI,CAACL,IAAI,CAACG,CAAC,CAAC,CAAC;IACpB;IACA,IAAI,CAACA,CAAC,GAAGH,IAAI,CAACI,MAAM,GAAG,CAAC,IAAIL,IAAI,CAACC,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIA,CAAC,KAAKH,IAAI,CAACI,MAAM,GAAG,CAAC,KAAKF,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;MAC1FH,GAAG,CAACI,IAAI,CAACH,IAAI,CAAC;MACdA,IAAI,GAAG,EAAE;IACX;EACF;EACA,OAAOD,GAAG;AACZ,CAAC,CAAC;AACF,eAAeH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}