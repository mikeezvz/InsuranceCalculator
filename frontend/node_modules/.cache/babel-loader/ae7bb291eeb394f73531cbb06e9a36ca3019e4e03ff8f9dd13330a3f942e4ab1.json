{"ast":null,"code":"function _toArray(r) {\n  return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nimport { comparator, curry, either, lt, map, prop, reduce, sort } from 'ramda';\n\n/**\n * Sort a list of objects by a list of props (if first prop value is equivalent, sort by second, etc).\n *\n * @func sortByProps\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.26.0|v2.26.0}\n * @category List\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array.<string>} props A list of properties in the list param to sort by\n * @param {Array.<object>} list A list of objects to be sorted\n * @return {Array.<object>} A new list sorted by the properties in the props param\n * @example\n *\n * sortByProps(['num'], [{num: 3}, {num: 2}, {num: 1}])\n * //=> [{num: 1}, {num: 2} {num: 3}]\n * sortByProps(['letter', 'num'], [{num: 3, letter: 'a'}, {num: 2, letter: 'a'} {num: 1, letter: 'z'}])\n * //=> [ {num: 2, letter: 'a'}, {num: 3, letter: 'a'}, {num: 1, letter: 'z'}]\n * sortByProps(['name', 'num'], [{num: 3}, {num: 2}, {num: 1}])\n * //=> [{num: 1}, {num: 2}, {num: 3}]\n */\n\nvar sortByProps = curry(function (props, list) {\n  var firstTruthy = function firstTruthy(_ref) {\n    var _ref2 = _toArray(_ref),\n      head = _ref2[0],\n      tail = _ref2.slice(1);\n    return reduce(either, head, tail);\n  };\n  var makeComparator = function makeComparator(propName) {\n    return comparator(function (a, b) {\n      return lt(prop(propName, a), prop(propName, b));\n    });\n  };\n  return sort(firstTruthy(map(makeComparator, props)), list);\n});\nexport default sortByProps;","map":{"version":3,"names":["_toArray","r","_arrayWithHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","length","e","n","Symbol","iterator","isArray","comparator","curry","either","lt","map","prop","reduce","sort","sortByProps","props","list","firstTruthy","_ref","_ref2","head","tail","makeComparator","propName","b"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/sortByProps.js"],"sourcesContent":["function _toArray(r) { return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport { comparator, curry, either, lt, map, prop, reduce, sort } from 'ramda';\n\n/**\n * Sort a list of objects by a list of props (if first prop value is equivalent, sort by second, etc).\n *\n * @func sortByProps\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.26.0|v2.26.0}\n * @category List\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array.<string>} props A list of properties in the list param to sort by\n * @param {Array.<object>} list A list of objects to be sorted\n * @return {Array.<object>} A new list sorted by the properties in the props param\n * @example\n *\n * sortByProps(['num'], [{num: 3}, {num: 2}, {num: 1}])\n * //=> [{num: 1}, {num: 2} {num: 3}]\n * sortByProps(['letter', 'num'], [{num: 3, letter: 'a'}, {num: 2, letter: 'a'} {num: 1, letter: 'z'}])\n * //=> [ {num: 2, letter: 'a'}, {num: 3, letter: 'a'}, {num: 1, letter: 'z'}]\n * sortByProps(['name', 'num'], [{num: 3}, {num: 2}, {num: 1}])\n * //=> [{num: 1}, {num: 2}, {num: 3}]\n */\n\nvar sortByProps = curry(function (props, list) {\n  var firstTruthy = function firstTruthy(_ref) {\n    var _ref2 = _toArray(_ref),\n      head = _ref2[0],\n      tail = _ref2.slice(1);\n    return reduce(either, head, tail);\n  };\n  var makeComparator = function makeComparator(propName) {\n    return comparator(function (a, b) {\n      return lt(prop(propName, a), prop(propName, b));\n    });\n  };\n  return sort(firstTruthy(map(makeComparator, props)), list);\n});\nexport default sortByProps;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}