{"ast":null,"code":"import { curryN } from 'ramda';\nimport toInteger32 from './toInteger32.js';\n\n/**\n * Checks whether the passed value is a signed 32 bit integer.\n *\n * @func isInteger32\n * @aliases isInt32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.toInteger32|toInteger32}\n * @example\n *\n * RA.isInteger32(0); //=> true\n * RA.isInteger32((-2) ** 31); //=> true\n *\n * RA.isInteger32(Infinity); //=> false\n * RA.isInteger32(NaN); //=> false\n * RA.isInteger32(2 ** 31); //=> false\n */\nvar isInteger32 = curryN(1, function (val) {\n  return toInteger32(val) === val;\n});\nexport default isInteger32;","map":{"version":3,"names":["curryN","toInteger32","isInteger32","val"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isInteger32.js"],"sourcesContent":["import { curryN } from 'ramda';\nimport toInteger32 from './toInteger32.js';\n\n/**\n * Checks whether the passed value is a signed 32 bit integer.\n *\n * @func isInteger32\n * @aliases isInt32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.toInteger32|toInteger32}\n * @example\n *\n * RA.isInteger32(0); //=> true\n * RA.isInteger32((-2) ** 31); //=> true\n *\n * RA.isInteger32(Infinity); //=> false\n * RA.isInteger32(NaN); //=> false\n * RA.isInteger32(2 ** 31); //=> false\n */\nvar isInteger32 = curryN(1, function (val) {\n  return toInteger32(val) === val;\n});\nexport default isInteger32;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,OAAOC,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGF,MAAM,CAAC,CAAC,EAAE,UAAUG,GAAG,EAAE;EACzC,OAAOF,WAAW,CAACE,GAAG,CAAC,KAAKA,GAAG;AACjC,CAAC,CAAC;AACF,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}