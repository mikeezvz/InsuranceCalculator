{"ast":null,"code":"import { curryN, reverse } from 'ramda';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified arity.\n * This function is like curryN, except that the provided arguments order is reversed.\n *\n * @func curryRightN\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.12.0|v1.12.0}\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {number} length The arity for the returned function\n * @param {Function} fn The function to curry\n * @return {Function}  A new, curried function\n * @see {@link http://ramdajs.com/docs/#curryN|R.curryN}, {@link RA.curryRight|curryRight}\n * @example\n *\n * const concatStrings = (a, b, c) => a + b + c;\n * const concatStringsCurried = RA.curryRightN(3, concatStrings);\n *\n * concatStringCurried('a')('b')('c'); // => 'cba'\n */\nvar curryRightN = curryN(2, function (arity, fn) {\n  return curryN(arity, function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return fn.apply(this, reverse(args));\n  });\n});\nexport default curryRightN;","map":{"version":3,"names":["curryN","reverse","curryRightN","arity","fn","wrapper","_len","arguments","length","args","Array","_key","apply"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/curryRightN.js"],"sourcesContent":["import { curryN, reverse } from 'ramda';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified arity.\n * This function is like curryN, except that the provided arguments order is reversed.\n *\n * @func curryRightN\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.12.0|v1.12.0}\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {number} length The arity for the returned function\n * @param {Function} fn The function to curry\n * @return {Function}  A new, curried function\n * @see {@link http://ramdajs.com/docs/#curryN|R.curryN}, {@link RA.curryRight|curryRight}\n * @example\n *\n * const concatStrings = (a, b, c) => a + b + c;\n * const concatStringsCurried = RA.curryRightN(3, concatStrings);\n *\n * concatStringCurried('a')('b')('c'); // => 'cba'\n */\nvar curryRightN = curryN(2, function (arity, fn) {\n  return curryN(arity, function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return fn.apply(this, reverse(args));\n  });\n});\nexport default curryRightN;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,OAAO,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGF,MAAM,CAAC,CAAC,EAAE,UAAUG,KAAK,EAAEC,EAAE,EAAE;EAC/C,OAAOJ,MAAM,CAACG,KAAK,EAAE,SAASE,OAAOA,CAAA,EAAG;IACtC,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;IAC9B;IACA,OAAOP,EAAE,CAACQ,KAAK,CAAC,IAAI,EAAEX,OAAO,CAACQ,IAAI,CAAC,CAAC;EACtC,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAeP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}