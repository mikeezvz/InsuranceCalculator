{"ast":null,"code":"import { useWith, curry, curryN, equals, path, either, complement } from 'ramda';\n\n// type :: Monad a => a -> String\nexport var type = either(path(['@@type']), path(['constructor', '@@type']));\n\n// typeEquals :: Monad a => String -> a -> Boolean\nexport var typeEquals = curry(function (typeIdent, monad) {\n  return type(monad) === typeIdent;\n});\n\n// isSameType :: (Monad a, Monad b) => a -> b -> Boolean\nexport var isSameType = curryN(2, useWith(equals, [type, type]));\n\n// isNotSameType :: (Monad a, Monad b) => a -> b -> Boolean\nexport var isNotSameType = complement(isSameType);","map":{"version":3,"names":["useWith","curry","curryN","equals","path","either","complement","type","typeEquals","typeIdent","monad","isSameType","isNotSameType"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/fantasy-land/util.js"],"sourcesContent":["import { useWith, curry, curryN, equals, path, either, complement } from 'ramda';\n\n// type :: Monad a => a -> String\nexport var type = either(path(['@@type']), path(['constructor', '@@type']));\n\n// typeEquals :: Monad a => String -> a -> Boolean\nexport var typeEquals = curry(function (typeIdent, monad) {\n  return type(monad) === typeIdent;\n});\n\n// isSameType :: (Monad a, Monad b) => a -> b -> Boolean\nexport var isSameType = curryN(2, useWith(equals, [type, type]));\n\n// isNotSameType :: (Monad a, Monad b) => a -> b -> Boolean\nexport var isNotSameType = complement(isSameType);"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,QAAQ,OAAO;;AAEhF;AACA,OAAO,IAAIC,IAAI,GAAGF,MAAM,CAACD,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;;AAE3E;AACA,OAAO,IAAII,UAAU,GAAGP,KAAK,CAAC,UAAUQ,SAAS,EAAEC,KAAK,EAAE;EACxD,OAAOH,IAAI,CAACG,KAAK,CAAC,KAAKD,SAAS;AAClC,CAAC,CAAC;;AAEF;AACA,OAAO,IAAIE,UAAU,GAAGT,MAAM,CAAC,CAAC,EAAEF,OAAO,CAACG,MAAM,EAAE,CAACI,IAAI,EAAEA,IAAI,CAAC,CAAC,CAAC;;AAEhE;AACA,OAAO,IAAIK,aAAa,GAAGN,UAAU,CAACK,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}