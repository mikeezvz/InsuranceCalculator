{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport map from \"./map.js\";\nimport sequence from \"./sequence.js\";\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n * @sig (Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\n *\n *      // Using a Type Representative\n *      R.traverse(Maybe, safeDiv(10), Right(4)); //=> Just(Right(2.5))\n *      R.traverse(Maybe, safeDiv(10), Right(0)); //=> Nothing\n *      R.traverse(Maybe, safeDiv(10), Left(\"X\")); //=> Just(Left(\"X\"))\n */\nvar traverse = /*#__PURE__*/_curry3(function traverse(F, f, traversable) {\n  var of = typeof F['fantasy-land/of'] === 'function' ? F['fantasy-land/of'] : typeof F.of === 'function' ? F.of : F;\n  var TypeRep = {\n    'fantasy-land/of': of\n  };\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](TypeRep, f) : typeof traversable.traverse === 'function' ? traversable.traverse(TypeRep, f) : sequence(TypeRep, map(f, traversable));\n});\nexport default traverse;","map":{"version":3,"names":["_curry3","map","sequence","traverse","F","f","traversable","of","TypeRep"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/traverse.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport map from \"./map.js\";\nimport sequence from \"./sequence.js\";\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n * @sig (Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\n *\n *      // Using a Type Representative\n *      R.traverse(Maybe, safeDiv(10), Right(4)); //=> Just(Right(2.5))\n *      R.traverse(Maybe, safeDiv(10), Right(0)); //=> Nothing\n *      R.traverse(Maybe, safeDiv(10), Left(\"X\")); //=> Just(Left(\"X\"))\n */\nvar traverse = /*#__PURE__*/_curry3(function traverse(F, f, traversable) {\n  var of = typeof F['fantasy-land/of'] === 'function' ? F['fantasy-land/of'] : typeof F.of === 'function' ? F.of : F;\n  var TypeRep = {\n    'fantasy-land/of': of\n  };\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](TypeRep, f) : typeof traversable.traverse === 'function' ? traversable.traverse(TypeRep, f) : sequence(TypeRep, map(f, traversable));\n});\nexport default traverse;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,GAAG,MAAM,UAAU;AAC1B,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAaH,OAAO,CAAC,SAASG,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAEC,WAAW,EAAE;EACvE,IAAIC,EAAE,GAAG,OAAOH,CAAC,CAAC,iBAAiB,CAAC,KAAK,UAAU,GAAGA,CAAC,CAAC,iBAAiB,CAAC,GAAG,OAAOA,CAAC,CAACG,EAAE,KAAK,UAAU,GAAGH,CAAC,CAACG,EAAE,GAAGH,CAAC;EAClH,IAAII,OAAO,GAAG;IACZ,iBAAiB,EAAED;EACrB,CAAC;EACD,OAAO,OAAOD,WAAW,CAAC,uBAAuB,CAAC,KAAK,UAAU,GAAGA,WAAW,CAAC,uBAAuB,CAAC,CAACE,OAAO,EAAEH,CAAC,CAAC,GAAG,OAAOC,WAAW,CAACH,QAAQ,KAAK,UAAU,GAAGG,WAAW,CAACH,QAAQ,CAACK,OAAO,EAAEH,CAAC,CAAC,GAAGH,QAAQ,CAACM,OAAO,EAAEP,GAAG,CAACI,CAAC,EAAEC,WAAW,CAAC,CAAC;AAC/O,CAAC,CAAC;AACF,eAAeH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}