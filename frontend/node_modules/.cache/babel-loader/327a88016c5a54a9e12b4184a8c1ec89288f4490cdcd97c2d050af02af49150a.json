{"ast":null,"code":"import { curry, invoker, flip } from 'ramda';\nimport ponyfill from './internal/ponyfills/String.padEnd.js';\nimport isFunction from './isFunction.js';\nexport var padEndPonyfill = curry(ponyfill);\nexport var padEndInvoker = flip(invoker(2, 'padEnd'));\n\n/**\n * The function pads the current string with a given string\n * (repeated, if needed) so that the resulting string reaches a given length.\n * The padding is applied from the end of the current string.\n *\n * @func padCharsEnd\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category String\n * @sig String -> Number -> String -> String\n * @param {string} padString The string to pad the current string with\n * @param {number} targetLength The length of the resulting string once\n * the current string has been padded\n * @param {string} value String value to be padded\n * @return {string} A new string of the specified length with the pad string\n * applied at the end of the current string\n * @see {@link RA.padEnd|padEnd}, {@link RA.padCharsStart|padCharsStart}, {@link RA.padStart|padStart}\n * @example\n *\n * RA.padCharsEnd('-', 3, 'a'); // => 'a--'\n * RA.padCharsEnd('foo', 10, 'abc'); // => 'abcfoofoof'\n * RA.padCharsEnd('123456', 6, 'abc'); // => 'abc123'\n */\nvar padCharsEnd = isFunction(String.prototype.padEnd) ? padEndInvoker : padEndPonyfill;\nexport default padCharsEnd;","map":{"version":3,"names":["curry","invoker","flip","ponyfill","isFunction","padEndPonyfill","padEndInvoker","padCharsEnd","String","prototype","padEnd"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/padCharsEnd.js"],"sourcesContent":["import { curry, invoker, flip } from 'ramda';\nimport ponyfill from './internal/ponyfills/String.padEnd.js';\nimport isFunction from './isFunction.js';\nexport var padEndPonyfill = curry(ponyfill);\nexport var padEndInvoker = flip(invoker(2, 'padEnd'));\n\n/**\n * The function pads the current string with a given string\n * (repeated, if needed) so that the resulting string reaches a given length.\n * The padding is applied from the end of the current string.\n *\n * @func padCharsEnd\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category String\n * @sig String -> Number -> String -> String\n * @param {string} padString The string to pad the current string with\n * @param {number} targetLength The length of the resulting string once\n * the current string has been padded\n * @param {string} value String value to be padded\n * @return {string} A new string of the specified length with the pad string\n * applied at the end of the current string\n * @see {@link RA.padEnd|padEnd}, {@link RA.padCharsStart|padCharsStart}, {@link RA.padStart|padStart}\n * @example\n *\n * RA.padCharsEnd('-', 3, 'a'); // => 'a--'\n * RA.padCharsEnd('foo', 10, 'abc'); // => 'abcfoofoof'\n * RA.padCharsEnd('123456', 6, 'abc'); // => 'abc123'\n */\nvar padCharsEnd = isFunction(String.prototype.padEnd) ? padEndInvoker : padEndPonyfill;\nexport default padCharsEnd;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,OAAO,EAAEC,IAAI,QAAQ,OAAO;AAC5C,OAAOC,QAAQ,MAAM,uCAAuC;AAC5D,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAO,IAAIC,cAAc,GAAGL,KAAK,CAACG,QAAQ,CAAC;AAC3C,OAAO,IAAIG,aAAa,GAAGJ,IAAI,CAACD,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,WAAW,GAAGH,UAAU,CAACI,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,GAAGJ,aAAa,GAAGD,cAAc;AACtF,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}