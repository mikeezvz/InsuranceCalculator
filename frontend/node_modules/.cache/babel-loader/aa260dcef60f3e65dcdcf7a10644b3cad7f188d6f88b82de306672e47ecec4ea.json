{"ast":null,"code":"import { both, gt, curryN } from 'ramda';\nimport isNumber from './isNumber.js';\n\n/**\n * Checks if value is a negative `Number` primitive or object. Zero is not considered neither\n * positive or negative.\n *\n * @func isNegative\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.15.0|v1.15.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isPositive|isPositive}\n * @example\n *\n * RA.isNegative(-1); // => true\n * RA.isNegative(Number.MIN_VALUE); // => false\n * RA.isNegative(+Infinity); // => false\n * RA.isNegative(NaN); // => false\n * RA.isNegative('5'); // => false\n */\nvar isNegative = curryN(1, both(isNumber, gt(0)));\nexport default isNegative;","map":{"version":3,"names":["both","gt","curryN","isNumber","isNegative"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNegative.js"],"sourcesContent":["import { both, gt, curryN } from 'ramda';\nimport isNumber from './isNumber.js';\n\n/**\n * Checks if value is a negative `Number` primitive or object. Zero is not considered neither\n * positive or negative.\n *\n * @func isNegative\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.15.0|v1.15.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isPositive|isPositive}\n * @example\n *\n * RA.isNegative(-1); // => true\n * RA.isNegative(Number.MIN_VALUE); // => false\n * RA.isNegative(+Infinity); // => false\n * RA.isNegative(NaN); // => false\n * RA.isNegative('5'); // => false\n */\nvar isNegative = curryN(1, both(isNumber, gt(0)));\nexport default isNegative;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,EAAE,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGF,MAAM,CAAC,CAAC,EAAEF,IAAI,CAACG,QAAQ,EAAEF,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,eAAeG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}