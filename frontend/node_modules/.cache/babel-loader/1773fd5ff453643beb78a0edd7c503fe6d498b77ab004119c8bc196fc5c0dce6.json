{"ast":null,"code":"import { both, anyPass } from 'ramda';\nimport isNotObj from './isNotObj.js';\nimport isString from './isString.js';\nimport isNumber from './isNumber.js';\nimport isBigInt from './isBigInt.js';\nimport isBoolean from './isBoolean.js';\nimport isUndefined from './isUndefined.js';\nimport isNull from './isNull.js';\nimport isSymbol from './isSymbol.js';\n\n/**\n * Checks if value is a primitive data type. There are 6 primitive data types: `string`, `number`, `bigint`, `boolean`, `undefined`, `symbol` and a special case of `null`.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\n * for definition of what sub-types comprise a primitive.\n *\n * @func isPrimitive\n * @memberOf RA\n * @category Type\n * @sig * -> Boolean\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotPrimitive|isNotPrimitive}, {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values|MDN Primitive values}, {@link https://developer.mozilla.org/en-US/docs/Glossary/Primitive|MDN Primitive}\n * @example\n *\n * RA.isPrimitive(\"string\"); //=> true\n * RA.isPrimitive(1); //=> true\n * RA.isPrimitive(new String(\"string\")); //=> false\n * RA.isPrimitive(new Number(1)); //=> false\n */\n\nvar isPrimitive = both(isNotObj, anyPass([isString, isNumber, isBigInt, isBoolean, isUndefined, isNull, isSymbol]));\nexport default isPrimitive;","map":{"version":3,"names":["both","anyPass","isNotObj","isString","isNumber","isBigInt","isBoolean","isUndefined","isNull","isSymbol","isPrimitive"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isPrimitive.js"],"sourcesContent":["import { both, anyPass } from 'ramda';\nimport isNotObj from './isNotObj.js';\nimport isString from './isString.js';\nimport isNumber from './isNumber.js';\nimport isBigInt from './isBigInt.js';\nimport isBoolean from './isBoolean.js';\nimport isUndefined from './isUndefined.js';\nimport isNull from './isNull.js';\nimport isSymbol from './isSymbol.js';\n\n/**\n * Checks if value is a primitive data type. There are 6 primitive data types: `string`, `number`, `bigint`, `boolean`, `undefined`, `symbol` and a special case of `null`.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\n * for definition of what sub-types comprise a primitive.\n *\n * @func isPrimitive\n * @memberOf RA\n * @category Type\n * @sig * -> Boolean\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotPrimitive|isNotPrimitive}, {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values|MDN Primitive values}, {@link https://developer.mozilla.org/en-US/docs/Glossary/Primitive|MDN Primitive}\n * @example\n *\n * RA.isPrimitive(\"string\"); //=> true\n * RA.isPrimitive(1); //=> true\n * RA.isPrimitive(new String(\"string\")); //=> false\n * RA.isPrimitive(new Number(1)); //=> false\n */\n\nvar isPrimitive = both(isNotObj, anyPass([isString, isNumber, isBigInt, isBoolean, isUndefined, isNull, isSymbol]));\nexport default isPrimitive;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,OAAO,QAAQ,OAAO;AACrC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAGV,IAAI,CAACE,QAAQ,EAAED,OAAO,CAAC,CAACE,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAC;AACnH,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}