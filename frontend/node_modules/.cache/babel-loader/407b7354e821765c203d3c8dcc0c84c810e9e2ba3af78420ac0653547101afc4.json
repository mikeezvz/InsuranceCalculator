{"ast":null,"code":"import { curryN } from 'ramda';\n\n/**\n * Weaves a configuration into function returning the runnable monad like `Reader` or `Free`.\n * This allows us to pre-bind the configuration in advance and use the weaved function\n * without need to explicitly pass the configuration on every call.\n *\n * @func weaveLazy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.10.0|v1.10.0}\n * @category Function\n * @sig (*... -> *) -> (* -> *) -> (*... -> *)\n * @param {Function} fn The function to weave\n * @param {Function} configAccessor The function that returns the configuration object\n * @return {Function} Auto-curried weaved function\n * @example\n *\n * const { Reader: reader } = require('monet');\n *\n * const log = value => reader(\n *   config => config.log(value)\n * );\n *\n * const consoleAccessor = R.always(console);\n *\n * // no weaving\n * log('test').run(console); //=> prints 'test'\n *\n * // weaving\n * const wlog = RA.weaveLazy(log, consoleAccessor);\n * wlog('test'); //=> prints 'test'\n */\nvar weaveLazy = curryN(2, function (fn, configAccessor) {\n  return curryN(fn.length, function () {\n    return fn.apply(void 0, arguments).run(configAccessor());\n  });\n});\nexport default weaveLazy;","map":{"version":3,"names":["curryN","weaveLazy","fn","configAccessor","length","apply","arguments","run"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/weaveLazy.js"],"sourcesContent":["import { curryN } from 'ramda';\n\n/**\n * Weaves a configuration into function returning the runnable monad like `Reader` or `Free`.\n * This allows us to pre-bind the configuration in advance and use the weaved function\n * without need to explicitly pass the configuration on every call.\n *\n * @func weaveLazy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.10.0|v1.10.0}\n * @category Function\n * @sig (*... -> *) -> (* -> *) -> (*... -> *)\n * @param {Function} fn The function to weave\n * @param {Function} configAccessor The function that returns the configuration object\n * @return {Function} Auto-curried weaved function\n * @example\n *\n * const { Reader: reader } = require('monet');\n *\n * const log = value => reader(\n *   config => config.log(value)\n * );\n *\n * const consoleAccessor = R.always(console);\n *\n * // no weaving\n * log('test').run(console); //=> prints 'test'\n *\n * // weaving\n * const wlog = RA.weaveLazy(log, consoleAccessor);\n * wlog('test'); //=> prints 'test'\n */\nvar weaveLazy = curryN(2, function (fn, configAccessor) {\n  return curryN(fn.length, function () {\n    return fn.apply(void 0, arguments).run(configAccessor());\n  });\n});\nexport default weaveLazy;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGD,MAAM,CAAC,CAAC,EAAE,UAAUE,EAAE,EAAEC,cAAc,EAAE;EACtD,OAAOH,MAAM,CAACE,EAAE,CAACE,MAAM,EAAE,YAAY;IACnC,OAAOF,EAAE,CAACG,KAAK,CAAC,KAAK,CAAC,EAAEC,SAAS,CAAC,CAACC,GAAG,CAACJ,cAAc,CAAC,CAAC,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}