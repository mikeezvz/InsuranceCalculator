{"ast":null,"code":"import { complement } from 'ramda';\nimport isNumber from './isNumber.js';\n\n/**\n * Checks if value is a complement of `Number` primitive or object.\n *\n * @func isNotNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.6.0|v0.6.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNumber|isNumber}\n * @example\n *\n * RA.isNotNumber(5); // => false\n * RA.isNotNumber(Number.MAX_VALUE); // => false\n * RA.isNotNumber(-Infinity); // => false\n * RA.isNotNumber('5'); // => true\n */\nvar isNotNumber = complement(isNumber);\nexport default isNotNumber;","map":{"version":3,"names":["complement","isNumber","isNotNumber"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotNumber.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isNumber from './isNumber.js';\n\n/**\n * Checks if value is a complement of `Number` primitive or object.\n *\n * @func isNotNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.6.0|v0.6.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNumber|isNumber}\n * @example\n *\n * RA.isNotNumber(5); // => false\n * RA.isNotNumber(Number.MAX_VALUE); // => false\n * RA.isNotNumber(-Infinity); // => false\n * RA.isNotNumber('5'); // => true\n */\nvar isNotNumber = complement(isNumber);\nexport default isNotNumber;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGF,UAAU,CAACC,QAAQ,CAAC;AACtC,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}