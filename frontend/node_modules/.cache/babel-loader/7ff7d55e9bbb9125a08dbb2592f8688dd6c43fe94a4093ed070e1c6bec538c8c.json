{"ast":null,"code":"import { complement } from 'ramda';\nimport isInteger from './isInteger.js';\n\n/**\n * Checks whether the passed value is complement of an `integer`.\n *\n *\n * @func isNotInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isInteger|isInteger}\n * @example\n *\n * RA.isNotInteger(0); //=> false\n * RA.isNotInteger(1); //=> false\n * RA.isNotInteger(-100000); //=> false\n *\n * RA.isNotInteger(0.1);       //=> true\n * RA.isNotInteger(Math.PI);   //=> true\n *\n * RA.isNotInteger(NaN);       //=> true\n * RA.isNotInteger(Infinity);  //=> true\n * RA.isNotInteger(-Infinity); //=> true\n * RA.isNotInteger('10');      //=> true\n * RA.isNotInteger(true);      //=> true\n * RA.isNotInteger(false);     //=> true\n * RA.isNotInteger([1]);       //=> true\n */\nvar isNotInteger = complement(isInteger);\nexport default isNotInteger;","map":{"version":3,"names":["complement","isInteger","isNotInteger"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotInteger.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isInteger from './isInteger.js';\n\n/**\n * Checks whether the passed value is complement of an `integer`.\n *\n *\n * @func isNotInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isInteger|isInteger}\n * @example\n *\n * RA.isNotInteger(0); //=> false\n * RA.isNotInteger(1); //=> false\n * RA.isNotInteger(-100000); //=> false\n *\n * RA.isNotInteger(0.1);       //=> true\n * RA.isNotInteger(Math.PI);   //=> true\n *\n * RA.isNotInteger(NaN);       //=> true\n * RA.isNotInteger(Infinity);  //=> true\n * RA.isNotInteger(-Infinity); //=> true\n * RA.isNotInteger('10');      //=> true\n * RA.isNotInteger(true);      //=> true\n * RA.isNotInteger(false);     //=> true\n * RA.isNotInteger([1]);       //=> true\n */\nvar isNotInteger = complement(isInteger);\nexport default isNotInteger;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,SAAS,MAAM,gBAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAGF,UAAU,CAACC,SAAS,CAAC;AACxC,eAAeC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}