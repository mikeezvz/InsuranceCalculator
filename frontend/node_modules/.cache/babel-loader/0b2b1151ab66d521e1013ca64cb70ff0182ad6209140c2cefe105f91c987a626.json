{"ast":null,"code":"import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Number.isInteger.js';\nexport var isIntegerPonyfill = curryN(1, ponyfill);\n\n/**\n * Checks whether the passed value is an `integer`.\n *\n * @func isInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotInteger|isNotInteger}\n * @example\n *\n * RA.isInteger(0); //=> true\n * RA.isInteger(1); //=> true\n * RA.isInteger(-100000); //=> true\n *\n * RA.isInteger(0.1);       //=> false\n * RA.isInteger(Math.PI);   //=> false\n *\n * RA.isInteger(NaN);       //=> false\n * RA.isInteger(Infinity);  //=> false\n * RA.isInteger(-Infinity); //=> false\n * RA.isInteger('10');      //=> false\n * RA.isInteger(true);      //=> false\n * RA.isInteger(false);     //=> false\n * RA.isInteger([1]);       //=> false\n */\nvar isInteger = isFunction(Number.isInteger) ? curryN(1, bind(Number.isInteger, Number)) : isIntegerPonyfill;\nexport default isInteger;","map":{"version":3,"names":["bind","curryN","isFunction","ponyfill","isIntegerPonyfill","isInteger","Number"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isInteger.js"],"sourcesContent":["import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Number.isInteger.js';\nexport var isIntegerPonyfill = curryN(1, ponyfill);\n\n/**\n * Checks whether the passed value is an `integer`.\n *\n * @func isInteger\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.7.0|v0.7.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotInteger|isNotInteger}\n * @example\n *\n * RA.isInteger(0); //=> true\n * RA.isInteger(1); //=> true\n * RA.isInteger(-100000); //=> true\n *\n * RA.isInteger(0.1);       //=> false\n * RA.isInteger(Math.PI);   //=> false\n *\n * RA.isInteger(NaN);       //=> false\n * RA.isInteger(Infinity);  //=> false\n * RA.isInteger(-Infinity); //=> false\n * RA.isInteger('10');      //=> false\n * RA.isInteger(true);      //=> false\n * RA.isInteger(false);     //=> false\n * RA.isInteger([1]);       //=> false\n */\nvar isInteger = isFunction(Number.isInteger) ? curryN(1, bind(Number.isInteger, Number)) : isIntegerPonyfill;\nexport default isInteger;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,OAAO;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,0CAA0C;AAC/D,OAAO,IAAIC,iBAAiB,GAAGH,MAAM,CAAC,CAAC,EAAEE,QAAQ,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,SAAS,GAAGH,UAAU,CAACI,MAAM,CAACD,SAAS,CAAC,GAAGJ,MAAM,CAAC,CAAC,EAAED,IAAI,CAACM,MAAM,CAACD,SAAS,EAAEC,MAAM,CAAC,CAAC,GAAGF,iBAAiB;AAC5G,eAAeC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}