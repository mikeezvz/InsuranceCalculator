{"ast":null,"code":"import qs from 'qs';\nimport formatKeyValue from './format.js';\nimport { isFile, isArrayOfFile, FileWithData } from './file.js';\nfunction buildFormData(reqForm) {\n  /**\n   * Build a new FormData instance, support array as field value\n   * OAS2.0 - when collectionFormat is multi\n   * OAS3.0 - when explode of Encoding Object is true\n   *\n   * This function explicitly handles Buffers (for backward compatibility)\n   * if provided as a values to FormData. FormData can only handle USVString\n   * or Blob.\n   *\n   * @param {Object} reqForm - ori req.form\n   * @return {FormData} - new FormData instance\n   */\n  return Object.entries(reqForm).reduce((formData, [name, input]) => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of formatKeyValue(name, input, true)) {\n      if (Array.isArray(value)) {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const v of value) {\n          if (ArrayBuffer.isView(v)) {\n            const blob = new Blob([v]);\n            formData.append(key, blob);\n          } else {\n            formData.append(key, v);\n          }\n        }\n      } else if (ArrayBuffer.isView(value)) {\n        const blob = new Blob([value]);\n        formData.append(key, blob);\n      } else {\n        formData.append(key, value);\n      }\n    }\n    return formData;\n  }, new FormData());\n}\n\n// Encodes an object using appropriate serializer.\nexport function encodeFormOrQuery(data) {\n  /**\n   * Encode parameter names and values\n   * @param {Object} result - parameter names and values\n   * @param {string} parameterName - Parameter name\n   * @return {object} encoded parameter names and values\n   */\n  const encodedQuery = Object.keys(data).reduce((result, parameterName) => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of formatKeyValue(parameterName, data[parameterName])) {\n      if (value instanceof FileWithData) {\n        result[key] = value.valueOf();\n      } else {\n        result[key] = value;\n      }\n    }\n    return result;\n  }, {});\n  return qs.stringify(encodedQuery, {\n    encode: false,\n    indices: false\n  }) || '';\n}\n\n// If the request has a `query` object, merge it into the request.url, and delete the object\n// If file and/or multipart, also create FormData instance\nexport function serializeRequest(req = {}) {\n  const {\n    url = '',\n    query,\n    form\n  } = req;\n  const joinSearch = (...strs) => {\n    const search = strs.filter(a => a).join('&'); // Only truthy value\n    return search ? `?${search}` : ''; // Only add '?' if there is a str\n  };\n  if (form) {\n    const hasFile = Object.keys(form).some(key => {\n      const {\n        value\n      } = form[key];\n      return isFile(value) || isArrayOfFile(value);\n    });\n    const contentType = req.headers['content-type'] || req.headers['Content-Type'];\n    if (hasFile || /multipart\\/form-data/i.test(contentType)) {\n      const formdata = buildFormData(req.form);\n      req.formdata = formdata;\n      req.body = formdata;\n    } else {\n      req.body = encodeFormOrQuery(form);\n    }\n    delete req.form;\n  }\n  if (query) {\n    const [baseUrl, oriSearch] = url.split('?');\n    let newStr = '';\n    if (oriSearch) {\n      const oriQuery = qs.parse(oriSearch);\n      const keysToRemove = Object.keys(query);\n      keysToRemove.forEach(key => delete oriQuery[key]);\n      newStr = qs.stringify(oriQuery, {\n        encode: true\n      });\n    }\n    const finalStr = joinSearch(newStr, encodeFormOrQuery(query));\n    req.url = baseUrl + finalStr;\n    delete req.query;\n  }\n  return req;\n}","map":{"version":3,"names":["qs","formatKeyValue","isFile","isArrayOfFile","FileWithData","buildFormData","reqForm","Object","entries","reduce","formData","name","input","key","value","Array","isArray","v","ArrayBuffer","isView","blob","Blob","append","FormData","encodeFormOrQuery","data","encodedQuery","keys","result","parameterName","valueOf","stringify","encode","indices","serializeRequest","req","url","query","form","joinSearch","strs","search","filter","a","join","hasFile","some","contentType","headers","test","formdata","body","baseUrl","oriSearch","split","newStr","oriQuery","parse","keysToRemove","forEach","finalStr"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/http/serializers/request/index.js"],"sourcesContent":["import qs from 'qs';\nimport formatKeyValue from './format.js';\nimport { isFile, isArrayOfFile, FileWithData } from './file.js';\nfunction buildFormData(reqForm) {\n  /**\n   * Build a new FormData instance, support array as field value\n   * OAS2.0 - when collectionFormat is multi\n   * OAS3.0 - when explode of Encoding Object is true\n   *\n   * This function explicitly handles Buffers (for backward compatibility)\n   * if provided as a values to FormData. FormData can only handle USVString\n   * or Blob.\n   *\n   * @param {Object} reqForm - ori req.form\n   * @return {FormData} - new FormData instance\n   */\n  return Object.entries(reqForm).reduce((formData, [name, input]) => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of formatKeyValue(name, input, true)) {\n      if (Array.isArray(value)) {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const v of value) {\n          if (ArrayBuffer.isView(v)) {\n            const blob = new Blob([v]);\n            formData.append(key, blob);\n          } else {\n            formData.append(key, v);\n          }\n        }\n      } else if (ArrayBuffer.isView(value)) {\n        const blob = new Blob([value]);\n        formData.append(key, blob);\n      } else {\n        formData.append(key, value);\n      }\n    }\n    return formData;\n  }, new FormData());\n}\n\n// Encodes an object using appropriate serializer.\nexport function encodeFormOrQuery(data) {\n  /**\n   * Encode parameter names and values\n   * @param {Object} result - parameter names and values\n   * @param {string} parameterName - Parameter name\n   * @return {object} encoded parameter names and values\n   */\n  const encodedQuery = Object.keys(data).reduce((result, parameterName) => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [key, value] of formatKeyValue(parameterName, data[parameterName])) {\n      if (value instanceof FileWithData) {\n        result[key] = value.valueOf();\n      } else {\n        result[key] = value;\n      }\n    }\n    return result;\n  }, {});\n  return qs.stringify(encodedQuery, {\n    encode: false,\n    indices: false\n  }) || '';\n}\n\n// If the request has a `query` object, merge it into the request.url, and delete the object\n// If file and/or multipart, also create FormData instance\nexport function serializeRequest(req = {}) {\n  const {\n    url = '',\n    query,\n    form\n  } = req;\n  const joinSearch = (...strs) => {\n    const search = strs.filter(a => a).join('&'); // Only truthy value\n    return search ? `?${search}` : ''; // Only add '?' if there is a str\n  };\n  if (form) {\n    const hasFile = Object.keys(form).some(key => {\n      const {\n        value\n      } = form[key];\n      return isFile(value) || isArrayOfFile(value);\n    });\n    const contentType = req.headers['content-type'] || req.headers['Content-Type'];\n    if (hasFile || /multipart\\/form-data/i.test(contentType)) {\n      const formdata = buildFormData(req.form);\n      req.formdata = formdata;\n      req.body = formdata;\n    } else {\n      req.body = encodeFormOrQuery(form);\n    }\n    delete req.form;\n  }\n  if (query) {\n    const [baseUrl, oriSearch] = url.split('?');\n    let newStr = '';\n    if (oriSearch) {\n      const oriQuery = qs.parse(oriSearch);\n      const keysToRemove = Object.keys(query);\n      keysToRemove.forEach(key => delete oriQuery[key]);\n      newStr = qs.stringify(oriQuery, {\n        encode: true\n      });\n    }\n    const finalStr = joinSearch(newStr, encodeFormOrQuery(query));\n    req.url = baseUrl + finalStr;\n    delete req.query;\n  }\n  return req;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}