{"ast":null,"code":"import { complement, equals } from 'ramda';\n\n/**\n * Returns `true` if its arguments are not equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func notEqual\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see {@link https://ramdajs.com/docs/#equals|equals}\n * @example\n *\n * RA.notEqual(1, 1); //=> false\n * RA.notEqual(1, '1'); //=> true\n * RA.notEqual([1, 2, 3], [1, 2, 3]); //=> false\n *\n * const a = {}; a.v = a;\n * const b = {}; b.v = b;\n * RA.notEqual(a, b); //=> false\n */\nvar notEqual = complement(equals);\nexport default notEqual;","map":{"version":3,"names":["complement","equals","notEqual"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/notEqual.js"],"sourcesContent":["import { complement, equals } from 'ramda';\n\n/**\n * Returns `true` if its arguments are not equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func notEqual\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see {@link https://ramdajs.com/docs/#equals|equals}\n * @example\n *\n * RA.notEqual(1, 1); //=> false\n * RA.notEqual(1, '1'); //=> true\n * RA.notEqual([1, 2, 3], [1, 2, 3]); //=> false\n *\n * const a = {}; a.v = a;\n * const b = {}; b.v = b;\n * RA.notEqual(a, b); //=> false\n */\nvar notEqual = complement(equals);\nexport default notEqual;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,OAAO;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGF,UAAU,CAACC,MAAM,CAAC;AACjC,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}