{"ast":null,"code":"import { complement } from 'ramda';\nimport isRegExp from './isRegExp.js';\n\n/**\n * Checks if value is complement of `RegExp` object.\n *\n * @func isNotRegExp\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.5.0|v2.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isRegExp|isRegExp}\n * @example\n *\n * RA.isNotRegExp(1); //=> true\n * RA.isNotRegExp(/(?:)/); //=> false\n * RA.isNotRegExp(new RegExp()); //=> false\n */\nvar isNotRegExp = complement(isRegExp);\nexport default isNotRegExp;","map":{"version":3,"names":["complement","isRegExp","isNotRegExp"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotRegExp.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isRegExp from './isRegExp.js';\n\n/**\n * Checks if value is complement of `RegExp` object.\n *\n * @func isNotRegExp\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.5.0|v2.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isRegExp|isRegExp}\n * @example\n *\n * RA.isNotRegExp(1); //=> true\n * RA.isNotRegExp(/(?:)/); //=> false\n * RA.isNotRegExp(new RegExp()); //=> false\n */\nvar isNotRegExp = complement(isRegExp);\nexport default isNotRegExp;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGF,UAAU,CAACC,QAAQ,CAAC;AACtC,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}