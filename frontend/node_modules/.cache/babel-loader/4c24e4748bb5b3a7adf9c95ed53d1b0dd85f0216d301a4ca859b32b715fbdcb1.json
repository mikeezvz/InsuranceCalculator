{"ast":null,"code":"import Http from '../../http/index.js';\nexport const retrievalURI = options => {\n  var _ref, _globalThis$document;\n  /**\n   * Swagger-UI uses baseDoc instead of url, this helper function exists\n   * to allow both.\n   *\n   * In browser environment, we allow to pass a relative URI Reference,\n   * and we resolve it against the document's baseURI before passing it deeper\n   * to swagger-client code.\n   */\n  const {\n    baseDoc,\n    url\n  } = options;\n  const retrievalURL = (_ref = baseDoc !== null && baseDoc !== void 0 ? baseDoc : url) !== null && _ref !== void 0 ? _ref : '';\n  return typeof ((_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.baseURI) === 'string' ? String(new URL(retrievalURL, globalThis.document.baseURI)) : retrievalURL;\n};\nexport const httpClient = options => {\n  const {\n    fetch,\n    http\n  } = options;\n\n  // @TODO fetch should be removed, and http used instead\n  // provide a default fetch implementation\n  return fetch || http || Http;\n};","map":{"version":3,"names":["Http","retrievalURI","options","_ref","_globalThis$document","baseDoc","url","retrievalURL","globalThis","document","baseURI","String","URL","httpClient","fetch","http"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/utils/options.js"],"sourcesContent":["import Http from '../../http/index.js';\nexport const retrievalURI = options => {\n  var _ref, _globalThis$document;\n  /**\n   * Swagger-UI uses baseDoc instead of url, this helper function exists\n   * to allow both.\n   *\n   * In browser environment, we allow to pass a relative URI Reference,\n   * and we resolve it against the document's baseURI before passing it deeper\n   * to swagger-client code.\n   */\n  const {\n    baseDoc,\n    url\n  } = options;\n  const retrievalURL = (_ref = baseDoc !== null && baseDoc !== void 0 ? baseDoc : url) !== null && _ref !== void 0 ? _ref : '';\n  return typeof ((_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.baseURI) === 'string' ? String(new URL(retrievalURL, globalThis.document.baseURI)) : retrievalURL;\n};\nexport const httpClient = options => {\n  const {\n    fetch,\n    http\n  } = options;\n\n  // @TODO fetch should be removed, and http used instead\n  // provide a default fetch implementation\n  return fetch || http || Http;\n};"],"mappings":"AAAA,OAAOA,IAAI,MAAM,qBAAqB;AACtC,OAAO,MAAMC,YAAY,GAAGC,OAAO,IAAI;EACrC,IAAIC,IAAI,EAAEC,oBAAoB;EAC9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM;IACJC,OAAO;IACPC;EACF,CAAC,GAAGJ,OAAO;EACX,MAAMK,YAAY,GAAG,CAACJ,IAAI,GAAGE,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAGC,GAAG,MAAM,IAAI,IAAIH,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,EAAE;EAC5H,OAAO,QAAQ,CAACC,oBAAoB,GAAGI,UAAU,CAACC,QAAQ,MAAM,IAAI,IAAIL,oBAAoB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACM,OAAO,CAAC,KAAK,QAAQ,GAAGC,MAAM,CAAC,IAAIC,GAAG,CAACL,YAAY,EAAEC,UAAU,CAACC,QAAQ,CAACC,OAAO,CAAC,CAAC,GAAGH,YAAY;AAC3O,CAAC;AACD,OAAO,MAAMM,UAAU,GAAGX,OAAO,IAAI;EACnC,MAAM;IACJY,KAAK;IACLC;EACF,CAAC,GAAGb,OAAO;;EAEX;EACA;EACA,OAAOY,KAAK,IAAIC,IAAI,IAAIf,IAAI;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}