{"ast":null,"code":"import { curryN, map, range, always } from 'ramda';\nimport floor from './floor.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end.\n *\n * `Note`: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.\n *\n * @func rangeStep\n * @memberOf RA\n * @category List\n * @since {@link https://char0n.github.io/ramda-adjunct/2.30.0|v2.30.0}\n * @sig Number -> Number -> Number -> [Number]\n * @param {number} step The value to increment or decrement by\n * @param {number} from The start of the range\n * @param {number} to The end of the range\n * @return {number[]} Returns the range of numbers\n * @see {@link http://ramdajs.com/docs/#range|R.range}\n * @example\n *\n * RA.rangeStep(1, 0, 4); // => [0, 1 ,2, 3]\n * RA.rangeStep(-1, 0, -4); // => [0, -1, -2, -3]\n * RA.rangeStep(1, 1, 5); // => [1, 2, 3, 4]\n * RA.rangeStep(5, 0, 20); // => [0, 5, 10, 15]\n * RA.rangeStep(-1, 0, -4); // => [0, -1, -2, -3]\n * RA.rangeStep(0, 1, 4); // => [1, 1, 1]\n * RA.rangeStep(1, 0, 0); // => []\n */\nvar rangeStep = curryN(3, function (step, from, to) {\n  var callback = step === 0 ? always(from) : function (n) {\n    return from + step * n;\n  };\n  var rangeEnd = step === 0 ? to - from : floor((to - from) / step);\n  return map(callback, range(0, rangeEnd));\n});\nexport default rangeStep;","map":{"version":3,"names":["curryN","map","range","always","floor","rangeStep","step","from","to","callback","n","rangeEnd"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/rangeStep.js"],"sourcesContent":["import { curryN, map, range, always } from 'ramda';\nimport floor from './floor.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end.\n *\n * `Note`: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.\n *\n * @func rangeStep\n * @memberOf RA\n * @category List\n * @since {@link https://char0n.github.io/ramda-adjunct/2.30.0|v2.30.0}\n * @sig Number -> Number -> Number -> [Number]\n * @param {number} step The value to increment or decrement by\n * @param {number} from The start of the range\n * @param {number} to The end of the range\n * @return {number[]} Returns the range of numbers\n * @see {@link http://ramdajs.com/docs/#range|R.range}\n * @example\n *\n * RA.rangeStep(1, 0, 4); // => [0, 1 ,2, 3]\n * RA.rangeStep(-1, 0, -4); // => [0, -1, -2, -3]\n * RA.rangeStep(1, 1, 5); // => [1, 2, 3, 4]\n * RA.rangeStep(5, 0, 20); // => [0, 5, 10, 15]\n * RA.rangeStep(-1, 0, -4); // => [0, -1, -2, -3]\n * RA.rangeStep(0, 1, 4); // => [1, 1, 1]\n * RA.rangeStep(1, 0, 0); // => []\n */\nvar rangeStep = curryN(3, function (step, from, to) {\n  var callback = step === 0 ? always(from) : function (n) {\n    return from + step * n;\n  };\n  var rangeEnd = step === 0 ? to - from : floor((to - from) / step);\n  return map(callback, range(0, rangeEnd));\n});\nexport default rangeStep;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAEC,MAAM,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGL,MAAM,CAAC,CAAC,EAAE,UAAUM,IAAI,EAAEC,IAAI,EAAEC,EAAE,EAAE;EAClD,IAAIC,QAAQ,GAAGH,IAAI,KAAK,CAAC,GAAGH,MAAM,CAACI,IAAI,CAAC,GAAG,UAAUG,CAAC,EAAE;IACtD,OAAOH,IAAI,GAAGD,IAAI,GAAGI,CAAC;EACxB,CAAC;EACD,IAAIC,QAAQ,GAAGL,IAAI,KAAK,CAAC,GAAGE,EAAE,GAAGD,IAAI,GAAGH,KAAK,CAAC,CAACI,EAAE,GAAGD,IAAI,IAAID,IAAI,CAAC;EACjE,OAAOL,GAAG,CAACQ,QAAQ,EAAEP,KAAK,CAAC,CAAC,EAAES,QAAQ,CAAC,CAAC;AAC1C,CAAC,CAAC;AACF,eAAeN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}