{"ast":null,"code":"function _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nimport { sort, comparator, prop, pipe, head, curryN, reduce, reduced, curry, ifElse } from 'ramda';\n\n/**\n * Can be used as a way to compose multiple invokers together to form polymorphic functions,\n * or functions that exhibit different behaviors based on their argument(s).\n * Consumes dispatching functions and keep trying to invoke each in turn, until a non-nil value is returned.\n *\n * Accepts a list of dispatching functions and returns a new function.\n * When invoked, this new function is applied to some arguments,\n * each dispatching function is applied to those same arguments until one of the\n * dispatching functions returns a non-nil value.\n *\n * @func dispatch\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.6.0|v2.6.0}\n * @category Function\n * @sig [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> x1 | x2 | ...\n * @param {!Array} functions A list of functions\n * @return {*|undefined} Returns the first not-nil value, or undefined if either an empty list is provided or none of the dispatching functions returns a non-nil value\n * @see {@link RA.isNotNil}\n * @example\n *\n * // returns first non-nil value\n * const stubNil = () => null;\n * const stubUndefined = () => undefined;\n * const addOne = v => v + 1;\n * const addTwo = v => v + 2;\n *\n * RA.dispatch([stubNil, stubUndefined, addOne, addTwo])(1); //=> 2\n *\n * // acts as a switch\n * const fnSwitch = RA.dispatch([\n *   R.ifElse(RA.isString, s => `${s}-join`, RA.stubUndefined),\n *   R.ifElse(RA.isNumber, n => n + 1, RA.stubUndefined),\n *   R.ifElse(RA.isDate, R.T, RA.stubUndefined),\n * ]);\n * fnSwitch(1); //=> 2\n */\nimport isNotNil from './isNotNil.js';\nimport isNonEmptyArray from './isNonEmptyArray.js';\nimport stubUndefined from './stubUndefined.js';\nvar byArity = comparator(function (a, b) {\n  return a.length > b.length;\n});\nvar getMaxArity = pipe(sort(byArity), head, prop('length'));\nvar iteratorFn = curry(function (args, accumulator, fn) {\n  var result = fn.apply(void 0, _toConsumableArray(args));\n  return isNotNil(result) ? reduced(result) : accumulator;\n});\nvar dispatchImpl = function dispatchImpl(functions) {\n  var arity = getMaxArity(functions);\n  return curryN(arity, function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return reduce(iteratorFn(args), undefined, functions);\n  });\n};\nvar dispatch = ifElse(isNonEmptyArray, dispatchImpl, stubUndefined);\nexport default dispatch;","map":{"version":3,"names":["_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","Symbol","iterator","isArray","length","e","n","sort","comparator","prop","pipe","head","curryN","reduce","reduced","curry","ifElse","isNotNil","isNonEmptyArray","stubUndefined","byArity","b","getMaxArity","iteratorFn","args","accumulator","fn","result","apply","dispatchImpl","functions","arity","_len","arguments","_key","undefined","dispatch"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/dispatch.js"],"sourcesContent":["function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { sort, comparator, prop, pipe, head, curryN, reduce, reduced, curry, ifElse } from 'ramda';\n\n/**\n * Can be used as a way to compose multiple invokers together to form polymorphic functions,\n * or functions that exhibit different behaviors based on their argument(s).\n * Consumes dispatching functions and keep trying to invoke each in turn, until a non-nil value is returned.\n *\n * Accepts a list of dispatching functions and returns a new function.\n * When invoked, this new function is applied to some arguments,\n * each dispatching function is applied to those same arguments until one of the\n * dispatching functions returns a non-nil value.\n *\n * @func dispatch\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.6.0|v2.6.0}\n * @category Function\n * @sig [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> x1 | x2 | ...\n * @param {!Array} functions A list of functions\n * @return {*|undefined} Returns the first not-nil value, or undefined if either an empty list is provided or none of the dispatching functions returns a non-nil value\n * @see {@link RA.isNotNil}\n * @example\n *\n * // returns first non-nil value\n * const stubNil = () => null;\n * const stubUndefined = () => undefined;\n * const addOne = v => v + 1;\n * const addTwo = v => v + 2;\n *\n * RA.dispatch([stubNil, stubUndefined, addOne, addTwo])(1); //=> 2\n *\n * // acts as a switch\n * const fnSwitch = RA.dispatch([\n *   R.ifElse(RA.isString, s => `${s}-join`, RA.stubUndefined),\n *   R.ifElse(RA.isNumber, n => n + 1, RA.stubUndefined),\n *   R.ifElse(RA.isDate, R.T, RA.stubUndefined),\n * ]);\n * fnSwitch(1); //=> 2\n */\nimport isNotNil from './isNotNil.js';\nimport isNonEmptyArray from './isNonEmptyArray.js';\nimport stubUndefined from './stubUndefined.js';\nvar byArity = comparator(function (a, b) {\n  return a.length > b.length;\n});\nvar getMaxArity = pipe(sort(byArity), head, prop('length'));\nvar iteratorFn = curry(function (args, accumulator, fn) {\n  var result = fn.apply(void 0, _toConsumableArray(args));\n  return isNotNil(result) ? reduced(result) : accumulator;\n});\nvar dispatchImpl = function dispatchImpl(functions) {\n  var arity = getMaxArity(functions);\n  return curryN(arity, function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return reduce(iteratorFn(args), undefined, functions);\n  });\n};\nvar dispatch = ifElse(isNonEmptyArray, dispatchImpl, stubUndefined);\nexport default dispatch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}