{"ast":null,"code":"import { apply, curryN, flip, map, pipe, toPairs, transpose, when } from 'ramda';\nimport lengthEq from './lengthEq.js';\n\n/**\n * Creates a new list out of the supplied object by applying the function to each key/value pairing.\n *\n * @func unzipObjWith\n * @memberOf RA\n * @category Object\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig  (v, k) => [k, v] -> { k: v } -> [[k], [v]]\n * @param {Function} fn The function to transform each value-key pair\n * @param {Object} obj Object to unzip\n * @return {Array} A pair of tw lists: a list of keys and a list of values\n * @see {@link https://ramdajs.com/docs/#zipObj|zipObj}, {@link RA.zipObjWith|zipObjWith}\n * @example\n *\n * RA.unzipObjWith((v, k) => [`new${k.toUpperCase()}`, 2 * v], { a: 1, b: 2, c: 3 });\n * //=> [['newA', 'newB', 'newC'], [2, 4, 6]]\n */\nvar unzipObjWith = curryN(2, function (fn, obj) {\n  return pipe(toPairs, map(pipe(flip, apply)(fn)), transpose, when(lengthEq(0), function () {\n    return [[], []];\n  }))(obj);\n});\nexport default unzipObjWith;","map":{"version":3,"names":["apply","curryN","flip","map","pipe","toPairs","transpose","when","lengthEq","unzipObjWith","fn","obj"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/unzipObjWith.js"],"sourcesContent":["import { apply, curryN, flip, map, pipe, toPairs, transpose, when } from 'ramda';\nimport lengthEq from './lengthEq.js';\n\n/**\n * Creates a new list out of the supplied object by applying the function to each key/value pairing.\n *\n * @func unzipObjWith\n * @memberOf RA\n * @category Object\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig  (v, k) => [k, v] -> { k: v } -> [[k], [v]]\n * @param {Function} fn The function to transform each value-key pair\n * @param {Object} obj Object to unzip\n * @return {Array} A pair of tw lists: a list of keys and a list of values\n * @see {@link https://ramdajs.com/docs/#zipObj|zipObj}, {@link RA.zipObjWith|zipObjWith}\n * @example\n *\n * RA.unzipObjWith((v, k) => [`new${k.toUpperCase()}`, 2 * v], { a: 1, b: 2, c: 3 });\n * //=> [['newA', 'newB', 'newC'], [2, 4, 6]]\n */\nvar unzipObjWith = curryN(2, function (fn, obj) {\n  return pipe(toPairs, map(pipe(flip, apply)(fn)), transpose, when(lengthEq(0), function () {\n    return [[], []];\n  }))(obj);\n});\nexport default unzipObjWith;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,IAAI,QAAQ,OAAO;AAChF,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAGR,MAAM,CAAC,CAAC,EAAE,UAAUS,EAAE,EAAEC,GAAG,EAAE;EAC9C,OAAOP,IAAI,CAACC,OAAO,EAAEF,GAAG,CAACC,IAAI,CAACF,IAAI,EAAEF,KAAK,CAAC,CAACU,EAAE,CAAC,CAAC,EAAEJ,SAAS,EAAEC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAE,YAAY;IACxF,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC;EACjB,CAAC,CAAC,CAAC,CAACG,GAAG,CAAC;AACV,CAAC,CAAC;AACF,eAAeF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}