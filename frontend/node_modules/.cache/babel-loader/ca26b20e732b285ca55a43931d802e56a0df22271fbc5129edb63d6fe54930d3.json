{"ast":null,"code":"import { curryN } from 'ramda';\n\n/**\n * Converts double-precision 64-bit binary format IEEE 754 to unsigned 32 bit integer number.\n *\n * @func toUinteger32\n * @aliases toUint32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.28.0|v2.28.0}\n * @category Math\n * @sig Number -> Number\n * @param {number} val Value to be converted.\n * @return {number}\n * @see {@link RA.toInteger32|toInteger32}, {@link http://speakingjs.com/es5/ch11.html#integers_via_bitwise_operators}\n * @example\n *\n * RA.toUinteger32(1.5); //=> 1\n * RA.toInteger32(2 ** 35); // => 0\n * RA.toInteger32(2 ** 31); // => 2147483648\n * RA.toInteger32(2 ** 30); // => 1073741824\n */\n\n// eslint-disable-next-line no-bitwise\nvar toUinteger32 = curryN(1, function (val) {\n  return val >>> 0;\n});\nexport default toUinteger32;","map":{"version":3,"names":["curryN","toUinteger32","val"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/toUinteger32.js"],"sourcesContent":["import { curryN } from 'ramda';\n\n/**\n * Converts double-precision 64-bit binary format IEEE 754 to unsigned 32 bit integer number.\n *\n * @func toUinteger32\n * @aliases toUint32\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.28.0|v2.28.0}\n * @category Math\n * @sig Number -> Number\n * @param {number} val Value to be converted.\n * @return {number}\n * @see {@link RA.toInteger32|toInteger32}, {@link http://speakingjs.com/es5/ch11.html#integers_via_bitwise_operators}\n * @example\n *\n * RA.toUinteger32(1.5); //=> 1\n * RA.toInteger32(2 ** 35); // => 0\n * RA.toInteger32(2 ** 31); // => 2147483648\n * RA.toInteger32(2 ** 30); // => 1073741824\n */\n\n// eslint-disable-next-line no-bitwise\nvar toUinteger32 = curryN(1, function (val) {\n  return val >>> 0;\n});\nexport default toUinteger32;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,YAAY,GAAGD,MAAM,CAAC,CAAC,EAAE,UAAUE,GAAG,EAAE;EAC1C,OAAOA,GAAG,KAAK,CAAC;AAClB,CAAC,CAAC;AACF,eAAeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}