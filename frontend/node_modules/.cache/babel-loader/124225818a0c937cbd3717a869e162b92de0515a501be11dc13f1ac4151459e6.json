{"ast":null,"code":"import { curryN, map, pipe } from 'ramda';\nimport allP from './allP.js';\nimport rejectP from './rejectP.js';\nimport resolveP from './resolveP.js';\n\n/**\n * Returns a Promise that is resolved with an array of reasons when all of the provided Promises reject, or rejected when any Promise is resolved.\n * This pattern is like allP, but fulfillments and rejections are transposed - rejections become the fulfillment values and vice versa.\n *\n * @func noneP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Function\n * @sig [Promise a] -> Promise [a]\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} A Promise that is resolved with a list of rejection reasons if all Promises are rejected, or a Promise that is rejected with the fulfillment value of the first Promise that resolves.\n * @see {@link RA.allP|allP}\n * @example\n *\n * RA.noneP([Promise.reject('hello'), Promise.reject('world')]); //=> Promise(['hello', 'world'])\n * RA.noneP([]); //=> Promise([])\n * RA.noneP([Promise.reject(), Promise.resolve('hello world')]); //=> Promise('hello world')\n * RA.noneP([Promise.reject(), 'hello world']); //=> Promise('hello world')\n */\nvar noneP = curryN(1, pipe(map(resolveP), map(function (p) {\n  return p.then(rejectP, resolveP);\n}), allP));\nexport default noneP;","map":{"version":3,"names":["curryN","map","pipe","allP","rejectP","resolveP","noneP","p","then"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/noneP.js"],"sourcesContent":["import { curryN, map, pipe } from 'ramda';\nimport allP from './allP.js';\nimport rejectP from './rejectP.js';\nimport resolveP from './resolveP.js';\n\n/**\n * Returns a Promise that is resolved with an array of reasons when all of the provided Promises reject, or rejected when any Promise is resolved.\n * This pattern is like allP, but fulfillments and rejections are transposed - rejections become the fulfillment values and vice versa.\n *\n * @func noneP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Function\n * @sig [Promise a] -> Promise [a]\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} A Promise that is resolved with a list of rejection reasons if all Promises are rejected, or a Promise that is rejected with the fulfillment value of the first Promise that resolves.\n * @see {@link RA.allP|allP}\n * @example\n *\n * RA.noneP([Promise.reject('hello'), Promise.reject('world')]); //=> Promise(['hello', 'world'])\n * RA.noneP([]); //=> Promise([])\n * RA.noneP([Promise.reject(), Promise.resolve('hello world')]); //=> Promise('hello world')\n * RA.noneP([Promise.reject(), 'hello world']); //=> Promise('hello world')\n */\nvar noneP = curryN(1, pipe(map(resolveP), map(function (p) {\n  return p.then(rejectP, resolveP);\n}), allP));\nexport default noneP;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,GAAG,EAAEC,IAAI,QAAQ,OAAO;AACzC,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAGN,MAAM,CAAC,CAAC,EAAEE,IAAI,CAACD,GAAG,CAACI,QAAQ,CAAC,EAAEJ,GAAG,CAAC,UAAUM,CAAC,EAAE;EACzD,OAAOA,CAAC,CAACC,IAAI,CAACJ,OAAO,EAAEC,QAAQ,CAAC;AAClC,CAAC,CAAC,EAAEF,IAAI,CAAC,CAAC;AACV,eAAeG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}