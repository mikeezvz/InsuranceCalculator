{"ast":null,"code":"import { resolve as resolvePathTemplate } from 'openapi-path-templating';\n\n// These functions will update the request.\n// They'll be given {req, value, paramter, spec, operation}.\n\nexport default {\n  body: bodyBuilder,\n  header: headerBuilder,\n  query: queryBuilder,\n  path: pathBuilder,\n  formData: formDataBuilder\n};\n\n// Add the body to the request\nfunction bodyBuilder({\n  req,\n  value\n}) {\n  if (value !== undefined) {\n    req.body = value;\n  }\n}\n\n// Add a form data object.\nfunction formDataBuilder({\n  req,\n  value,\n  parameter\n}) {\n  if (value === false && parameter.type === 'boolean') {\n    value = 'false';\n  }\n  if (value === 0 && ['number', 'integer'].indexOf(parameter.type) > -1) {\n    value = '0';\n  }\n  if (value) {\n    req.form = req.form || {};\n    req.form[parameter.name] = {\n      collectionFormat: parameter.collectionFormat,\n      value\n    };\n  } else if (parameter.allowEmptyValue && value !== undefined) {\n    req.form = req.form || {};\n    const paramName = parameter.name;\n    req.form[paramName] = req.form[paramName] || {};\n    req.form[paramName].allowEmptyValue = true;\n  }\n}\n\n// Add a header to the request\nfunction headerBuilder({\n  req,\n  parameter,\n  value\n}) {\n  req.headers = req.headers || {};\n  if (typeof value !== 'undefined') {\n    req.headers[parameter.name] = value;\n  }\n}\n\n// Replace path paramters, with values ( ie: the URL )\nfunction pathBuilder({\n  req,\n  value,\n  parameter,\n  baseURL\n}) {\n  if (value !== undefined) {\n    const pathname = req.url.replace(baseURL, '');\n    const resolvedPathname = resolvePathTemplate(pathname, {\n      [parameter.name]: value\n    });\n    req.url = baseURL + resolvedPathname;\n  }\n}\n\n// Add a query to the `query` object, which will later be stringified into the URL's search\nfunction queryBuilder({\n  req,\n  value,\n  parameter\n}) {\n  req.query = req.query || {};\n  if (value === false && parameter.type === 'boolean') {\n    value = 'false';\n  }\n  if (value === 0 && ['number', 'integer'].indexOf(parameter.type) > -1) {\n    value = '0';\n  }\n  if (value) {\n    req.query[parameter.name] = {\n      collectionFormat: parameter.collectionFormat,\n      value\n    };\n  } else if (parameter.allowEmptyValue && value !== undefined) {\n    const paramName = parameter.name;\n    req.query[paramName] = req.query[paramName] || {};\n    req.query[paramName].allowEmptyValue = true;\n  }\n}","map":{"version":3,"names":["resolve","resolvePathTemplate","body","bodyBuilder","header","headerBuilder","query","queryBuilder","path","pathBuilder","formData","formDataBuilder","req","value","undefined","parameter","type","indexOf","form","name","collectionFormat","allowEmptyValue","paramName","headers","baseURL","pathname","url","replace","resolvedPathname"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/execute/swagger2/parameter-builders.js"],"sourcesContent":["import { resolve as resolvePathTemplate } from 'openapi-path-templating';\n\n// These functions will update the request.\n// They'll be given {req, value, paramter, spec, operation}.\n\nexport default {\n  body: bodyBuilder,\n  header: headerBuilder,\n  query: queryBuilder,\n  path: pathBuilder,\n  formData: formDataBuilder\n};\n\n// Add the body to the request\nfunction bodyBuilder({\n  req,\n  value\n}) {\n  if (value !== undefined) {\n    req.body = value;\n  }\n}\n\n// Add a form data object.\nfunction formDataBuilder({\n  req,\n  value,\n  parameter\n}) {\n  if (value === false && parameter.type === 'boolean') {\n    value = 'false';\n  }\n  if (value === 0 && ['number', 'integer'].indexOf(parameter.type) > -1) {\n    value = '0';\n  }\n  if (value) {\n    req.form = req.form || {};\n    req.form[parameter.name] = {\n      collectionFormat: parameter.collectionFormat,\n      value\n    };\n  } else if (parameter.allowEmptyValue && value !== undefined) {\n    req.form = req.form || {};\n    const paramName = parameter.name;\n    req.form[paramName] = req.form[paramName] || {};\n    req.form[paramName].allowEmptyValue = true;\n  }\n}\n\n// Add a header to the request\nfunction headerBuilder({\n  req,\n  parameter,\n  value\n}) {\n  req.headers = req.headers || {};\n  if (typeof value !== 'undefined') {\n    req.headers[parameter.name] = value;\n  }\n}\n\n// Replace path paramters, with values ( ie: the URL )\nfunction pathBuilder({\n  req,\n  value,\n  parameter,\n  baseURL\n}) {\n  if (value !== undefined) {\n    const pathname = req.url.replace(baseURL, '');\n    const resolvedPathname = resolvePathTemplate(pathname, {\n      [parameter.name]: value\n    });\n    req.url = baseURL + resolvedPathname;\n  }\n}\n\n// Add a query to the `query` object, which will later be stringified into the URL's search\nfunction queryBuilder({\n  req,\n  value,\n  parameter\n}) {\n  req.query = req.query || {};\n  if (value === false && parameter.type === 'boolean') {\n    value = 'false';\n  }\n  if (value === 0 && ['number', 'integer'].indexOf(parameter.type) > -1) {\n    value = '0';\n  }\n  if (value) {\n    req.query[parameter.name] = {\n      collectionFormat: parameter.collectionFormat,\n      value\n    };\n  } else if (parameter.allowEmptyValue && value !== undefined) {\n    const paramName = parameter.name;\n    req.query[paramName] = req.query[paramName] || {};\n    req.query[paramName].allowEmptyValue = true;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}