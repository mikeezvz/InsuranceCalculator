{"ast":null,"code":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function _intersperse(separator, list) {\n  var length = list.length;\n  if (length === 0) {\n    return [];\n  }\n  var out = Array(length * 2 - 1);\n  var idx = 0;\n  while (idx < length) {\n    var i = idx * 2;\n    if (idx === length - 1) {\n      out[i] = list[idx];\n    } else {\n      out[i] = list[idx];\n      out[i + 1] = separator;\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;","map":{"version":3,"names":["_checkForMethod","_curry2","intersperse","_intersperse","separator","list","length","out","Array","idx","i"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/intersperse.js"],"sourcesContent":["import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function _intersperse(separator, list) {\n  var length = list.length;\n  if (length === 0) {\n    return [];\n  }\n  var out = Array(length * 2 - 1);\n  var idx = 0;\n  while (idx < length) {\n    var i = idx * 2;\n    if (idx === length - 1) {\n      out[i] = list[idx];\n    } else {\n      out[i] = list[idx];\n      out[i + 1] = separator;\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;"],"mappings":"AAAA,OAAOA,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,OAAO,MAAM,uBAAuB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAaD,OAAO,EAAE,aAAaD,eAAe,CAAC,aAAa,EAAE,SAASG,YAAYA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACzH,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;EACxB,IAAIA,MAAM,KAAK,CAAC,EAAE;IAChB,OAAO,EAAE;EACX;EACA,IAAIC,GAAG,GAAGC,KAAK,CAACF,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;EAC/B,IAAIG,GAAG,GAAG,CAAC;EACX,OAAOA,GAAG,GAAGH,MAAM,EAAE;IACnB,IAAII,CAAC,GAAGD,GAAG,GAAG,CAAC;IACf,IAAIA,GAAG,KAAKH,MAAM,GAAG,CAAC,EAAE;MACtBC,GAAG,CAACG,CAAC,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAC;IACpB,CAAC,MAAM;MACLF,GAAG,CAACG,CAAC,CAAC,GAAGL,IAAI,CAACI,GAAG,CAAC;MAClBF,GAAG,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGN,SAAS;IACxB;IACAK,GAAG,IAAI,CAAC;EACV;EACA,OAAOF,GAAG;AACZ,CAAC,CAAC,CAAC;AACH,eAAeL,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}