{"ast":null,"code":"import { pipe, curry, find, defaultTo } from 'ramda';\n\n/**\n * Returns the first element of the list which matches the predicate.\n * Returns default value if no element matches or matched element is `null`, `undefined` or `NaN`.\n * Dispatches to the find method of the second argument, if present.\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func findOr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @category List\n * @sig  a -> (b -> Boolean) -> [b] -> b | a\n * @param {*} defaultValue The default value\n * @param {Function} fn The predicate function used to determine if the element is the desired one.\n * @param {Array} list The array to consider.\n * @return {*} The element found, or the default value.\n * @see {@link http://ramdajs.com/docs/#defaultTo|R.defaultTo}, {@link http://ramdajs.com/docs/#find|R.find}\n * @example\n *\n * RA.findOr(1, isUndefined, [1, 2, undefined]); // => 1\n * RA.findOr(1, val => val === 2, [1, 2, undefined]); // => 2\n * RA.findOr(1, val => val === 3, [1, 2, undefined]); // => 1\n */\n\nvar findOr = curry(function (defaultVal, fn, list) {\n  return pipe(find(fn), defaultTo(defaultVal))(list);\n});\nexport default findOr;","map":{"version":3,"names":["pipe","curry","find","defaultTo","findOr","defaultVal","fn","list"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/findOr.js"],"sourcesContent":["import { pipe, curry, find, defaultTo } from 'ramda';\n\n/**\n * Returns the first element of the list which matches the predicate.\n * Returns default value if no element matches or matched element is `null`, `undefined` or `NaN`.\n * Dispatches to the find method of the second argument, if present.\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func findOr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @category List\n * @sig  a -> (b -> Boolean) -> [b] -> b | a\n * @param {*} defaultValue The default value\n * @param {Function} fn The predicate function used to determine if the element is the desired one.\n * @param {Array} list The array to consider.\n * @return {*} The element found, or the default value.\n * @see {@link http://ramdajs.com/docs/#defaultTo|R.defaultTo}, {@link http://ramdajs.com/docs/#find|R.find}\n * @example\n *\n * RA.findOr(1, isUndefined, [1, 2, undefined]); // => 1\n * RA.findOr(1, val => val === 2, [1, 2, undefined]); // => 2\n * RA.findOr(1, val => val === 3, [1, 2, undefined]); // => 1\n */\n\nvar findOr = curry(function (defaultVal, fn, list) {\n  return pipe(find(fn), defaultTo(defaultVal))(list);\n});\nexport default findOr;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGH,KAAK,CAAC,UAAUI,UAAU,EAAEC,EAAE,EAAEC,IAAI,EAAE;EACjD,OAAOP,IAAI,CAACE,IAAI,CAACI,EAAE,CAAC,EAAEH,SAAS,CAACE,UAAU,CAAC,CAAC,CAACE,IAAI,CAAC;AACpD,CAAC,CAAC;AACF,eAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}