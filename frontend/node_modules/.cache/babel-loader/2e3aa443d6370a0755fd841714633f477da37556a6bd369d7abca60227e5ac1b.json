{"ast":null,"code":"import { both, pipe, toString, equals, curryN } from 'ramda';\nimport isObj from './isObj.js';\n\n/**\n * Checks if input value is a native `Promise`.\n * The Promise object represents the eventual completion (or failure)\n * of an asynchronous operation, and its resulting value.\n *\n * @func isPromise\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.1.0|v2.1.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link https://promisesaplus.com/|Promises/A+}, {@link RA.isThenable|isThenable}\n * @example\n *\n * RA.isPromise(null); // => false\n * RA.isPromise(undefined); // => false\n * RA.isPromise([]); // => false\n * RA.isPromise(Promise.resolve()); // => true\n * RA.isPromise(Promise.reject()); // => true\n * RA.isPromise({ then: () => 1 }); // => false\n */\nvar isPromise = curryN(1, both(isObj, pipe(toString, equals('[object Promise]'))));\nexport default isPromise;","map":{"version":3,"names":["both","pipe","toString","equals","curryN","isObj","isPromise"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isPromise.js"],"sourcesContent":["import { both, pipe, toString, equals, curryN } from 'ramda';\nimport isObj from './isObj.js';\n\n/**\n * Checks if input value is a native `Promise`.\n * The Promise object represents the eventual completion (or failure)\n * of an asynchronous operation, and its resulting value.\n *\n * @func isPromise\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.1.0|v2.1.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link https://promisesaplus.com/|Promises/A+}, {@link RA.isThenable|isThenable}\n * @example\n *\n * RA.isPromise(null); // => false\n * RA.isPromise(undefined); // => false\n * RA.isPromise([]); // => false\n * RA.isPromise(Promise.resolve()); // => true\n * RA.isPromise(Promise.reject()); // => true\n * RA.isPromise({ then: () => 1 }); // => false\n */\nvar isPromise = curryN(1, both(isObj, pipe(toString, equals('[object Promise]'))));\nexport default isPromise;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,OAAO;AAC5D,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGF,MAAM,CAAC,CAAC,EAAEJ,IAAI,CAACK,KAAK,EAAEJ,IAAI,CAACC,QAAQ,EAAEC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;AAClF,eAAeG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}