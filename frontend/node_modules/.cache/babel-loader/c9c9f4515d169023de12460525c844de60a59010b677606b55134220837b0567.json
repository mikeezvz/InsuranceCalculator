{"ast":null,"code":"import { addIndex, reduce } from 'ramda';\n\n/**\n * {@link http://ramdajs.com/docs/#reduce|R.reduce} function that more closely resembles Array.prototype.reduce.\n * It takes two new parameters to its callback function: the current index, and the entire list.\n *\n * `reduceIndexed` implementation is simple : `\n * const reduceIndexed = R.addIndex(R.reduce);\n * `\n * @func reduceIndexed\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.5.0|v2.5.0}\n * @category List\n * @typedef Idx = Number\n * @sig ((a, b, Idx, [b]) => a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives four values,\n * the accumulator, the current element from the array, index and the entire list\n * @param {*} acc The accumulator value\n * @param {Array} list The list to iterate over\n * @return {*} The final, accumulated value\n * @see {@link http://ramdajs.com/docs/#addIndex|R.addIndex}, {@link http://ramdajs.com/docs/#reduce|R.reduce}\n * @example\n *\n * const initialList = ['f', 'o', 'o', 'b', 'a', 'r'];\n *\n * reduceIndexed((acc, val, idx, list) => acc + '-' + val + idx, '', initialList);\n * //=> \"-f0-o1-o2-b3-a4-r5\"\n */\nvar reduceIndexed = addIndex(reduce);\nexport default reduceIndexed;","map":{"version":3,"names":["addIndex","reduce","reduceIndexed"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/reduceIndexed.js"],"sourcesContent":["import { addIndex, reduce } from 'ramda';\n\n/**\n * {@link http://ramdajs.com/docs/#reduce|R.reduce} function that more closely resembles Array.prototype.reduce.\n * It takes two new parameters to its callback function: the current index, and the entire list.\n *\n * `reduceIndexed` implementation is simple : `\n * const reduceIndexed = R.addIndex(R.reduce);\n * `\n * @func reduceIndexed\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.5.0|v2.5.0}\n * @category List\n * @typedef Idx = Number\n * @sig ((a, b, Idx, [b]) => a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives four values,\n * the accumulator, the current element from the array, index and the entire list\n * @param {*} acc The accumulator value\n * @param {Array} list The list to iterate over\n * @return {*} The final, accumulated value\n * @see {@link http://ramdajs.com/docs/#addIndex|R.addIndex}, {@link http://ramdajs.com/docs/#reduce|R.reduce}\n * @example\n *\n * const initialList = ['f', 'o', 'o', 'b', 'a', 'r'];\n *\n * reduceIndexed((acc, val, idx, list) => acc + '-' + val + idx, '', initialList);\n * //=> \"-f0-o1-o2-b3-a4-r5\"\n */\nvar reduceIndexed = addIndex(reduce);\nexport default reduceIndexed;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAGF,QAAQ,CAACC,MAAM,CAAC;AACpC,eAAeC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}