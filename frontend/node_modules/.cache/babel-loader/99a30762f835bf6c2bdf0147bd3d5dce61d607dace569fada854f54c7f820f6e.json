{"ast":null,"code":"import { F as stubFalse } from 'ramda';\nimport { MemberElement, BREAK, cloneDeep, toValue } from '@swagger-api/apidom-core';\nimport SpecificationVisitor from \"../SpecificationVisitor.mjs\";\nimport { isOpenApiExtension } from \"../../predicates.mjs\";\nclass PatternedFieldsVisitor extends SpecificationVisitor {\n  specPath;\n  ignoredFields;\n  fieldPatternPredicate = stubFalse;\n  canSupportSpecificationExtensions = false;\n  specificationExtensionPredicate = isOpenApiExtension;\n  constructor({\n    specPath,\n    ignoredFields,\n    fieldPatternPredicate,\n    canSupportSpecificationExtensions,\n    specificationExtensionPredicate,\n    ...rest\n  }) {\n    super({\n      ...rest\n    });\n    this.specPath = specPath;\n    this.ignoredFields = ignoredFields || [];\n    if (typeof fieldPatternPredicate === 'function') {\n      this.fieldPatternPredicate = fieldPatternPredicate;\n    }\n    if (typeof canSupportSpecificationExtensions === 'boolean') {\n      this.canSupportSpecificationExtensions = canSupportSpecificationExtensions;\n    }\n    if (typeof specificationExtensionPredicate === 'function') {\n      this.specificationExtensionPredicate = specificationExtensionPredicate;\n    }\n  }\n  ObjectElement(objectElement) {\n    // @ts-ignore\n    objectElement.forEach((value, key, memberElement) => {\n      if (this.canSupportSpecificationExtensions && this.specificationExtensionPredicate(memberElement)) {\n        const extensionElement = this.toRefractedElement(['document', 'extension'], memberElement);\n        this.element.content.push(extensionElement);\n      } else if (!this.ignoredFields.includes(toValue(key)) && this.fieldPatternPredicate(toValue(key))) {\n        const specPath = this.specPath(value);\n        const patternedFieldElement = this.toRefractedElement(specPath, value);\n        const newMemberElement = new MemberElement(cloneDeep(key), patternedFieldElement);\n        this.copyMetaAndAttributes(memberElement, newMemberElement);\n        newMemberElement.classes.push('patterned-field');\n        this.element.content.push(newMemberElement);\n      } else if (!this.ignoredFields.includes(toValue(key))) {\n        this.element.content.push(cloneDeep(memberElement));\n      }\n    });\n    this.copyMetaAndAttributes(objectElement, this.element);\n    return BREAK;\n  }\n}\nexport default PatternedFieldsVisitor;","map":{"version":3,"names":["F","stubFalse","MemberElement","BREAK","cloneDeep","toValue","SpecificationVisitor","isOpenApiExtension","PatternedFieldsVisitor","specPath","ignoredFields","fieldPatternPredicate","canSupportSpecificationExtensions","specificationExtensionPredicate","constructor","rest","ObjectElement","objectElement","forEach","value","key","memberElement","extensionElement","toRefractedElement","element","content","push","includes","patternedFieldElement","newMemberElement","copyMetaAndAttributes","classes"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-0/es/refractor/visitors/generics/PatternedFieldsVisitor.mjs"],"sourcesContent":["import { F as stubFalse } from 'ramda';\nimport { MemberElement, BREAK, cloneDeep, toValue } from '@swagger-api/apidom-core';\nimport SpecificationVisitor from \"../SpecificationVisitor.mjs\";\nimport { isOpenApiExtension } from \"../../predicates.mjs\";\nclass PatternedFieldsVisitor extends SpecificationVisitor {\n  specPath;\n  ignoredFields;\n  fieldPatternPredicate = stubFalse;\n  canSupportSpecificationExtensions = false;\n  specificationExtensionPredicate = isOpenApiExtension;\n  constructor({\n    specPath,\n    ignoredFields,\n    fieldPatternPredicate,\n    canSupportSpecificationExtensions,\n    specificationExtensionPredicate,\n    ...rest\n  }) {\n    super({\n      ...rest\n    });\n    this.specPath = specPath;\n    this.ignoredFields = ignoredFields || [];\n    if (typeof fieldPatternPredicate === 'function') {\n      this.fieldPatternPredicate = fieldPatternPredicate;\n    }\n    if (typeof canSupportSpecificationExtensions === 'boolean') {\n      this.canSupportSpecificationExtensions = canSupportSpecificationExtensions;\n    }\n    if (typeof specificationExtensionPredicate === 'function') {\n      this.specificationExtensionPredicate = specificationExtensionPredicate;\n    }\n  }\n  ObjectElement(objectElement) {\n    // @ts-ignore\n    objectElement.forEach((value, key, memberElement) => {\n      if (this.canSupportSpecificationExtensions && this.specificationExtensionPredicate(memberElement)) {\n        const extensionElement = this.toRefractedElement(['document', 'extension'], memberElement);\n        this.element.content.push(extensionElement);\n      } else if (!this.ignoredFields.includes(toValue(key)) && this.fieldPatternPredicate(toValue(key))) {\n        const specPath = this.specPath(value);\n        const patternedFieldElement = this.toRefractedElement(specPath, value);\n        const newMemberElement = new MemberElement(cloneDeep(key), patternedFieldElement);\n        this.copyMetaAndAttributes(memberElement, newMemberElement);\n        newMemberElement.classes.push('patterned-field');\n        this.element.content.push(newMemberElement);\n      } else if (!this.ignoredFields.includes(toValue(key))) {\n        this.element.content.push(cloneDeep(memberElement));\n      }\n    });\n    this.copyMetaAndAttributes(objectElement, this.element);\n    return BREAK;\n  }\n}\nexport default PatternedFieldsVisitor;"],"mappings":"AAAA,SAASA,CAAC,IAAIC,SAAS,QAAQ,OAAO;AACtC,SAASC,aAAa,EAAEC,KAAK,EAAEC,SAAS,EAAEC,OAAO,QAAQ,0BAA0B;AACnF,OAAOC,oBAAoB,MAAM,6BAA6B;AAC9D,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,MAAMC,sBAAsB,SAASF,oBAAoB,CAAC;EACxDG,QAAQ;EACRC,aAAa;EACbC,qBAAqB,GAAGV,SAAS;EACjCW,iCAAiC,GAAG,KAAK;EACzCC,+BAA+B,GAAGN,kBAAkB;EACpDO,WAAWA,CAAC;IACVL,QAAQ;IACRC,aAAa;IACbC,qBAAqB;IACrBC,iCAAiC;IACjCC,+BAA+B;IAC/B,GAAGE;EACL,CAAC,EAAE;IACD,KAAK,CAAC;MACJ,GAAGA;IACL,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,aAAa,GAAGA,aAAa,IAAI,EAAE;IACxC,IAAI,OAAOC,qBAAqB,KAAK,UAAU,EAAE;MAC/C,IAAI,CAACA,qBAAqB,GAAGA,qBAAqB;IACpD;IACA,IAAI,OAAOC,iCAAiC,KAAK,SAAS,EAAE;MAC1D,IAAI,CAACA,iCAAiC,GAAGA,iCAAiC;IAC5E;IACA,IAAI,OAAOC,+BAA+B,KAAK,UAAU,EAAE;MACzD,IAAI,CAACA,+BAA+B,GAAGA,+BAA+B;IACxE;EACF;EACAG,aAAaA,CAACC,aAAa,EAAE;IAC3B;IACAA,aAAa,CAACC,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,EAAEC,aAAa,KAAK;MACnD,IAAI,IAAI,CAACT,iCAAiC,IAAI,IAAI,CAACC,+BAA+B,CAACQ,aAAa,CAAC,EAAE;QACjG,MAAMC,gBAAgB,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC,UAAU,EAAE,WAAW,CAAC,EAAEF,aAAa,CAAC;QAC1F,IAAI,CAACG,OAAO,CAACC,OAAO,CAACC,IAAI,CAACJ,gBAAgB,CAAC;MAC7C,CAAC,MAAM,IAAI,CAAC,IAAI,CAACZ,aAAa,CAACiB,QAAQ,CAACtB,OAAO,CAACe,GAAG,CAAC,CAAC,IAAI,IAAI,CAACT,qBAAqB,CAACN,OAAO,CAACe,GAAG,CAAC,CAAC,EAAE;QACjG,MAAMX,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACU,KAAK,CAAC;QACrC,MAAMS,qBAAqB,GAAG,IAAI,CAACL,kBAAkB,CAACd,QAAQ,EAAEU,KAAK,CAAC;QACtE,MAAMU,gBAAgB,GAAG,IAAI3B,aAAa,CAACE,SAAS,CAACgB,GAAG,CAAC,EAAEQ,qBAAqB,CAAC;QACjF,IAAI,CAACE,qBAAqB,CAACT,aAAa,EAAEQ,gBAAgB,CAAC;QAC3DA,gBAAgB,CAACE,OAAO,CAACL,IAAI,CAAC,iBAAiB,CAAC;QAChD,IAAI,CAACF,OAAO,CAACC,OAAO,CAACC,IAAI,CAACG,gBAAgB,CAAC;MAC7C,CAAC,MAAM,IAAI,CAAC,IAAI,CAACnB,aAAa,CAACiB,QAAQ,CAACtB,OAAO,CAACe,GAAG,CAAC,CAAC,EAAE;QACrD,IAAI,CAACI,OAAO,CAACC,OAAO,CAACC,IAAI,CAACtB,SAAS,CAACiB,aAAa,CAAC,CAAC;MACrD;IACF,CAAC,CAAC;IACF,IAAI,CAACS,qBAAqB,CAACb,aAAa,EAAE,IAAI,CAACO,OAAO,CAAC;IACvD,OAAOrB,KAAK;EACd;AACF;AACA,eAAeK,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}