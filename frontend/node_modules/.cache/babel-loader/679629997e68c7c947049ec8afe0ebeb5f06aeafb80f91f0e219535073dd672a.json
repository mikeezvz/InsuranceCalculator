{"ast":null,"code":"import { visit } from \"../../traversal/visitor.mjs\";\nimport serializeValue from \"./value/index.mjs\";\nclass YamlVisitor {\n  static indentChar = '  ';\n  result;\n  indent;\n  constructor({\n    directive = false,\n    indent = 0\n  } = {}) {\n    this.result = directive ? '%YAML 1.2\\n---\\n' : '';\n    this.indent = indent;\n  }\n  NumberElement(element) {\n    this.result += serializeValue(element);\n  }\n  BooleanElement(element) {\n    const value = serializeValue(element);\n    this.result += value ? 'true' : 'false';\n  }\n  StringElement(element) {\n    // for simplicity and avoiding ambiguity we always wrap strings in quotes\n    this.result += JSON.stringify(serializeValue(element));\n  }\n  NullElement() {\n    this.result += 'null';\n  }\n  ArrayElement(element) {\n    if (element.length === 0) {\n      this.result += '[]';\n      return false;\n    }\n    element.forEach(item => {\n      const visitor = new YamlVisitor({\n        indent: this.indent + 1\n      });\n      const indent = YamlVisitor.indentChar.repeat(this.indent);\n      visit(item, visitor);\n      const {\n        result\n      } = visitor;\n      this.result += result.startsWith('\\n') ? `\\n${indent}-${result}` : `\\n${indent}- ${result}`;\n    });\n    return false;\n  }\n  ObjectElement(element) {\n    if (element.length === 0) {\n      this.result += '{}';\n      return false;\n    }\n    element.forEach((value, key) => {\n      const keyVisitor = new YamlVisitor({\n        indent: this.indent + 1\n      });\n      const valueVisitor = new YamlVisitor({\n        indent: this.indent + 1\n      });\n      const indent = YamlVisitor.indentChar.repeat(this.indent);\n      visit(key, keyVisitor);\n      visit(value, valueVisitor);\n      const {\n        result: keyResult\n      } = keyVisitor;\n      const {\n        result: valueResult\n      } = valueVisitor;\n      this.result += valueResult.startsWith('\\n') ? `\\n${indent}${keyResult}:${valueResult}` : `\\n${indent}${keyResult}: ${valueResult}`;\n    });\n    return false;\n  }\n}\nconst serializer = (element, {\n  directive = false\n} = {}) => {\n  const visitor = new YamlVisitor({\n    directive\n  });\n  visit(element, visitor);\n  return visitor.result;\n};\nexport default serializer;","map":{"version":3,"names":["visit","serializeValue","YamlVisitor","indentChar","result","indent","constructor","directive","NumberElement","element","BooleanElement","value","StringElement","JSON","stringify","NullElement","ArrayElement","length","forEach","item","visitor","repeat","startsWith","ObjectElement","key","keyVisitor","valueVisitor","keyResult","valueResult","serializer"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-core/es/transformers/serializers/yaml-1-2.mjs"],"sourcesContent":["import { visit } from \"../../traversal/visitor.mjs\";\nimport serializeValue from \"./value/index.mjs\";\nclass YamlVisitor {\n  static indentChar = '  ';\n  result;\n  indent;\n  constructor({\n    directive = false,\n    indent = 0\n  } = {}) {\n    this.result = directive ? '%YAML 1.2\\n---\\n' : '';\n    this.indent = indent;\n  }\n  NumberElement(element) {\n    this.result += serializeValue(element);\n  }\n  BooleanElement(element) {\n    const value = serializeValue(element);\n    this.result += value ? 'true' : 'false';\n  }\n  StringElement(element) {\n    // for simplicity and avoiding ambiguity we always wrap strings in quotes\n    this.result += JSON.stringify(serializeValue(element));\n  }\n  NullElement() {\n    this.result += 'null';\n  }\n  ArrayElement(element) {\n    if (element.length === 0) {\n      this.result += '[]';\n      return false;\n    }\n    element.forEach(item => {\n      const visitor = new YamlVisitor({\n        indent: this.indent + 1\n      });\n      const indent = YamlVisitor.indentChar.repeat(this.indent);\n      visit(item, visitor);\n      const {\n        result\n      } = visitor;\n      this.result += result.startsWith('\\n') ? `\\n${indent}-${result}` : `\\n${indent}- ${result}`;\n    });\n    return false;\n  }\n  ObjectElement(element) {\n    if (element.length === 0) {\n      this.result += '{}';\n      return false;\n    }\n    element.forEach((value, key) => {\n      const keyVisitor = new YamlVisitor({\n        indent: this.indent + 1\n      });\n      const valueVisitor = new YamlVisitor({\n        indent: this.indent + 1\n      });\n      const indent = YamlVisitor.indentChar.repeat(this.indent);\n      visit(key, keyVisitor);\n      visit(value, valueVisitor);\n      const {\n        result: keyResult\n      } = keyVisitor;\n      const {\n        result: valueResult\n      } = valueVisitor;\n      this.result += valueResult.startsWith('\\n') ? `\\n${indent}${keyResult}:${valueResult}` : `\\n${indent}${keyResult}: ${valueResult}`;\n    });\n    return false;\n  }\n}\nconst serializer = (element, {\n  directive = false\n} = {}) => {\n  const visitor = new YamlVisitor({\n    directive\n  });\n  visit(element, visitor);\n  return visitor.result;\n};\nexport default serializer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}