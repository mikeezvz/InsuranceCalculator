{"ast":null,"code":"import { identity } from 'ramda';\nconst defaultOptions = {\n  parse: {\n    /**\n     * This is media type that will be used to parse the input.\n     */\n    mediaType: 'text/plain',\n    /**\n     * Determines how different types of files will be parsed.\n     *\n     * You can add additional parsers of your own, replace an existing one with\n     * your own implementation, or remove any resolver by removing it from the list.\n     * It's recommended to keep the order of parser from most specific ones to most generic ones.\n     */\n    parsers: [],\n    /**\n     * These options are merged with parser plugin instance before the plugin is run.\n     */\n    parserOpts: {}\n  },\n  resolve: {\n    /**\n     * baseURI serves as a base for all relative URL found in ApiDOM references.\n     */\n    baseURI: '',\n    /**\n     * Determines how References will be resolved.\n     *\n     * You can add additional resolvers of your own, replace an existing one with\n     * your own implementation, or remove any resolver by removing it from the list.\n     */\n    resolvers: [],\n    /**\n     * These options are merged with resolver plugin instance before the plugin is run.\n     */\n    resolverOpts: {},\n    /**\n     * Determines strategies how References are identified and processed by resolvers.\n     * Strategy is determined by media type.\n     *\n     * You can add additional resolver strategies of your own, replace an existing one with\n     * your own implementation, or remove any resolve strategy by removing it from the list.\n     */\n    strategies: [],\n    /**\n     * These options are available in resolver strategy `canResolve` and `resolve` methods.\n     */\n    strategyOpts: {},\n    /**\n     * Determines whether internal references will be resolved.\n     * Internal references will simply be ignored.\n     */\n    internal: true,\n    /**\n     * Determines whether external references will be resolved.\n     * If this option is disabled, then none of above resolvers will be called.\n     * Instead, external references will simply be ignored.\n     */\n    external: true,\n    /**\n     * Determines the maximum depth of resolve algorithms.\n     * By default, there is no limit.\n     *\n     * This option tracks the depth of the file tree not the depth of the dereference path.\n     *\n     * It can be set to any positive integer number or zero (0).\n     *\n     * The resolver should throw MaximumResolverDepthError if resolution depth\n     * is exceeded by this option.\n     */\n    maxDepth: +Infinity\n  },\n  dereference: {\n    /**\n     * Determines strategies how ApiDOM is dereferenced.\n     * Strategy is determined by media type or by inspecting ApiDOM to be dereferenced.\n     *\n     * You can add additional dereference strategies of your own, replace an existing one with\n     * your own implementation, or remove any dereference strategy by removing it from the list.\n     */\n    strategies: [],\n    /**\n     * These options are available in dereference strategy `canDereference` and `dereference` methods.\n     */\n    strategyOpts: {},\n    /**\n     * This option accepts an instance of pre-computed ReferenceSet.\n     * If provided it will speed up the dereferencing significantly as the external\n     * resolution doesn't need to happen anymore.\n     */\n    refSet: null,\n    /**\n     * Determines the maximum depth of dereferencing.\n     * By default, there is no limit.\n     *\n     * The maxDepth represents a number of references that needed to be followed\n     * before the eventual value was reached.\n     *\n     * It can be set to any positive integer number or zero (0).\n     *\n     * The dereferencing should throw MaximumDereferenceDepthError if dereferencing depth\n     * is exceeded by this option.\n     */\n    maxDepth: +Infinity,\n    /**\n     * Determines how circular references are handled.\n     *\n     * \"ignore\" - circular reference are allowed\n     * \"replace\" - circular references are not allowed and are translated to RefElement\n     * \"error\" - circular references are not allowed and will throw an error\n     */\n    circular: 'ignore',\n    /**\n     * This function is used to replace circular references when `circular` option is set to \"replace\".\n     * By default, it's an identity function. It means that circular references are replaced with RefElement.\n     */\n    circularReplacer: identity,\n    /**\n     * Determines whether the dereferencing process will be immutable.\n     * By default, the dereferencing process is immutable, which means that the original\n     * ApiDOM passed to the dereference process is NOT modified.\n     *\n     * true - the dereferencing process will be immutable (deep cloning of ApiDOM is involved)\n     * false - the dereferencing process will be mutable\n     */\n    immutable: true\n  },\n  bundle: {\n    /**\n     * Determines strategies how ApiDOM is bundled.\n     * Strategy is determined by media type or by inspecting ApiDOM to be bundled.\n     *\n     * You can add additional bundle strategies of your own, replace an existing one with\n     * your own implementation, or remove any bundle strategy by removing it from the list.\n     */\n    strategies: [],\n    /**\n     * This option accepts an instance of pre-computed ReferenceSet.\n     * If provided it will speed up the bundling significantly as the external\n     * resolution doesn't need to happen anymore.\n     */\n    refSet: null,\n    /**\n     * Determines the maximum depth of bundling.\n     * By default, there is no limit.\n     *\n     * The maxDepth represents a number of references that needed to be followed\n     * before the eventual value was reached.\n     *\n     * It can be set to any positive integer number or zero (0).\n     *\n     * The bundling should throw MaximumBundleDepthError if bundling depth\n     * is exceeded by this option.\n     */\n    maxDepth: +Infinity\n  }\n};\nexport default defaultOptions;","map":{"version":3,"names":["identity","defaultOptions","parse","mediaType","parsers","parserOpts","resolve","baseURI","resolvers","resolverOpts","strategies","strategyOpts","internal","external","maxDepth","Infinity","dereference","refSet","circular","circularReplacer","immutable","bundle"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/options/index.mjs"],"sourcesContent":["import { identity } from 'ramda';\nconst defaultOptions = {\n  parse: {\n    /**\n     * This is media type that will be used to parse the input.\n     */\n    mediaType: 'text/plain',\n    /**\n     * Determines how different types of files will be parsed.\n     *\n     * You can add additional parsers of your own, replace an existing one with\n     * your own implementation, or remove any resolver by removing it from the list.\n     * It's recommended to keep the order of parser from most specific ones to most generic ones.\n     */\n    parsers: [],\n    /**\n     * These options are merged with parser plugin instance before the plugin is run.\n     */\n    parserOpts: {}\n  },\n  resolve: {\n    /**\n     * baseURI serves as a base for all relative URL found in ApiDOM references.\n     */\n    baseURI: '',\n    /**\n     * Determines how References will be resolved.\n     *\n     * You can add additional resolvers of your own, replace an existing one with\n     * your own implementation, or remove any resolver by removing it from the list.\n     */\n    resolvers: [],\n    /**\n     * These options are merged with resolver plugin instance before the plugin is run.\n     */\n    resolverOpts: {},\n    /**\n     * Determines strategies how References are identified and processed by resolvers.\n     * Strategy is determined by media type.\n     *\n     * You can add additional resolver strategies of your own, replace an existing one with\n     * your own implementation, or remove any resolve strategy by removing it from the list.\n     */\n    strategies: [],\n    /**\n     * These options are available in resolver strategy `canResolve` and `resolve` methods.\n     */\n    strategyOpts: {},\n    /**\n     * Determines whether internal references will be resolved.\n     * Internal references will simply be ignored.\n     */\n    internal: true,\n    /**\n     * Determines whether external references will be resolved.\n     * If this option is disabled, then none of above resolvers will be called.\n     * Instead, external references will simply be ignored.\n     */\n    external: true,\n    /**\n     * Determines the maximum depth of resolve algorithms.\n     * By default, there is no limit.\n     *\n     * This option tracks the depth of the file tree not the depth of the dereference path.\n     *\n     * It can be set to any positive integer number or zero (0).\n     *\n     * The resolver should throw MaximumResolverDepthError if resolution depth\n     * is exceeded by this option.\n     */\n    maxDepth: +Infinity\n  },\n  dereference: {\n    /**\n     * Determines strategies how ApiDOM is dereferenced.\n     * Strategy is determined by media type or by inspecting ApiDOM to be dereferenced.\n     *\n     * You can add additional dereference strategies of your own, replace an existing one with\n     * your own implementation, or remove any dereference strategy by removing it from the list.\n     */\n    strategies: [],\n    /**\n     * These options are available in dereference strategy `canDereference` and `dereference` methods.\n     */\n    strategyOpts: {},\n    /**\n     * This option accepts an instance of pre-computed ReferenceSet.\n     * If provided it will speed up the dereferencing significantly as the external\n     * resolution doesn't need to happen anymore.\n     */\n    refSet: null,\n    /**\n     * Determines the maximum depth of dereferencing.\n     * By default, there is no limit.\n     *\n     * The maxDepth represents a number of references that needed to be followed\n     * before the eventual value was reached.\n     *\n     * It can be set to any positive integer number or zero (0).\n     *\n     * The dereferencing should throw MaximumDereferenceDepthError if dereferencing depth\n     * is exceeded by this option.\n     */\n    maxDepth: +Infinity,\n    /**\n     * Determines how circular references are handled.\n     *\n     * \"ignore\" - circular reference are allowed\n     * \"replace\" - circular references are not allowed and are translated to RefElement\n     * \"error\" - circular references are not allowed and will throw an error\n     */\n    circular: 'ignore',\n    /**\n     * This function is used to replace circular references when `circular` option is set to \"replace\".\n     * By default, it's an identity function. It means that circular references are replaced with RefElement.\n     */\n    circularReplacer: identity,\n    /**\n     * Determines whether the dereferencing process will be immutable.\n     * By default, the dereferencing process is immutable, which means that the original\n     * ApiDOM passed to the dereference process is NOT modified.\n     *\n     * true - the dereferencing process will be immutable (deep cloning of ApiDOM is involved)\n     * false - the dereferencing process will be mutable\n     */\n    immutable: true\n  },\n  bundle: {\n    /**\n     * Determines strategies how ApiDOM is bundled.\n     * Strategy is determined by media type or by inspecting ApiDOM to be bundled.\n     *\n     * You can add additional bundle strategies of your own, replace an existing one with\n     * your own implementation, or remove any bundle strategy by removing it from the list.\n     */\n    strategies: [],\n    /**\n     * This option accepts an instance of pre-computed ReferenceSet.\n     * If provided it will speed up the bundling significantly as the external\n     * resolution doesn't need to happen anymore.\n     */\n    refSet: null,\n    /**\n     * Determines the maximum depth of bundling.\n     * By default, there is no limit.\n     *\n     * The maxDepth represents a number of references that needed to be followed\n     * before the eventual value was reached.\n     *\n     * It can be set to any positive integer number or zero (0).\n     *\n     * The bundling should throw MaximumBundleDepthError if bundling depth\n     * is exceeded by this option.\n     */\n    maxDepth: +Infinity\n  }\n};\nexport default defaultOptions;"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE;IACL;AACJ;AACA;IACIC,SAAS,EAAE,YAAY;IACvB;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,OAAO,EAAE,EAAE;IACX;AACJ;AACA;IACIC,UAAU,EAAE,CAAC;EACf,CAAC;EACDC,OAAO,EAAE;IACP;AACJ;AACA;IACIC,OAAO,EAAE,EAAE;IACX;AACJ;AACA;AACA;AACA;AACA;IACIC,SAAS,EAAE,EAAE;IACb;AACJ;AACA;IACIC,YAAY,EAAE,CAAC,CAAC;IAChB;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,UAAU,EAAE,EAAE;IACd;AACJ;AACA;IACIC,YAAY,EAAE,CAAC,CAAC;IAChB;AACJ;AACA;AACA;IACIC,QAAQ,EAAE,IAAI;IACd;AACJ;AACA;AACA;AACA;IACIC,QAAQ,EAAE,IAAI;IACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,QAAQ,EAAE,CAACC;EACb,CAAC;EACDC,WAAW,EAAE;IACX;AACJ;AACA;AACA;AACA;AACA;AACA;IACIN,UAAU,EAAE,EAAE;IACd;AACJ;AACA;IACIC,YAAY,EAAE,CAAC,CAAC;IAChB;AACJ;AACA;AACA;AACA;IACIM,MAAM,EAAE,IAAI;IACZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIH,QAAQ,EAAE,CAACC,QAAQ;IACnB;AACJ;AACA;AACA;AACA;AACA;AACA;IACIG,QAAQ,EAAE,QAAQ;IAClB;AACJ;AACA;AACA;IACIC,gBAAgB,EAAEnB,QAAQ;IAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIoB,SAAS,EAAE;EACb,CAAC;EACDC,MAAM,EAAE;IACN;AACJ;AACA;AACA;AACA;AACA;AACA;IACIX,UAAU,EAAE,EAAE;IACd;AACJ;AACA;AACA;AACA;IACIO,MAAM,EAAE,IAAI;IACZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIH,QAAQ,EAAE,CAACC;EACb;AACF,CAAC;AACD,eAAed,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}