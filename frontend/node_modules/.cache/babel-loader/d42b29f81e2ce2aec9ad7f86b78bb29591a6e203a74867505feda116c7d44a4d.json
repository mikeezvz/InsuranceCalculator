{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  var idx = 0;\n  var list = Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;","map":{"version":3,"names":["_curry2","times","fn","n","len","Number","isNaN","RangeError","idx","list","Array"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/times.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  var idx = 0;\n  var list = Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAG,aAAaD,OAAO,CAAC,SAASC,KAAKA,CAACC,EAAE,EAAEC,CAAC,EAAE;EACrD,IAAIC,GAAG,GAAGC,MAAM,CAACF,CAAC,CAAC;EACnB,IAAIC,GAAG,GAAG,CAAC,IAAIE,KAAK,CAACF,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIG,UAAU,CAAC,iCAAiC,CAAC;EACzD;EACA,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,IAAI,GAAGC,KAAK,CAACN,GAAG,CAAC;EACrB,OAAOI,GAAG,GAAGJ,GAAG,EAAE;IAChBK,IAAI,CAACD,GAAG,CAAC,GAAGN,EAAE,CAACM,GAAG,CAAC;IACnBA,GAAG,IAAI,CAAC;EACV;EACA,OAAOC,IAAI;AACb,CAAC,CAAC;AACF,eAAeR,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}