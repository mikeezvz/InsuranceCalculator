{"ast":null,"code":"/* eslint-disable camelcase */\nimport { ParseResultElement, ObjectElement, toValue, transclude, cloneDeep } from '@swagger-api/apidom-core';\nimport { compile as jsonPointerCompile, evaluate as jsonPointerEvaluate, EvaluationJsonPointerError, InvalidJsonPointerError } from '@swagger-api/apidom-json-pointer';\nimport { mediaTypes, OpenApi3_1Element } from '@swagger-api/apidom-ns-openapi-3-1';\nimport { dereferenceApiDOM, url, ReferenceSet, Reference, options as referenceOptions } from '@swagger-api/apidom-reference/configuration/empty';\nimport BinaryParser from '@swagger-api/apidom-reference/parse/parsers/binary';\nimport OpenAPI3_1ResolveStrategy from '@swagger-api/apidom-reference/resolve/strategies/openapi-3-1';\nimport { DEFAULT_BASE_URL } from '../../../constants.js';\nimport * as optionsUtil from '../../utils/options.js';\nimport normalize from './normalize.js';\nimport HTTPResolverSwaggerClient from '../../apidom/reference/resolve/resolvers/http-swagger-client/index.js';\nimport JSONParser from '../../apidom/reference/parse/parsers/json/index.js';\nimport YAMLParser from '../../apidom/reference/parse/parsers/yaml-1-2/index.js';\nimport OpenAPIJSON3_1Parser from '../../apidom/reference/parse/parsers/openapi-json-3-1/index.js';\nimport OpenAPIYAML3_1Parser from '../../apidom/reference/parse/parsers/openapi-yaml-3-1/index.js';\nimport OpenAPI3_1SwaggerClientDereferenceStrategy from '../../apidom/reference/dereference/strategies/openapi-3-1-swagger-client/index.js';\nexport const circularReplacer = refElement => {\n  const $refBaseURI = toValue(refElement.meta.get('baseURI'));\n  const referencingElement = refElement.meta.get('referencingElement');\n\n  /**\n   * Removing semantics from the absolutified referencing element by\n   * using generic ObjectElement to represent the reference.\n   */\n  return new ObjectElement({\n    $ref: $refBaseURI\n  }, cloneDeep(referencingElement.meta), cloneDeep(referencingElement.attributes));\n};\nconst resolveOpenAPI31Strategy = async options => {\n  const {\n    spec,\n    timeout,\n    redirects,\n    requestInterceptor,\n    responseInterceptor,\n    pathDiscriminator = [],\n    allowMetaPatches = false,\n    useCircularStructures = false,\n    skipNormalization = false,\n    parameterMacro = null,\n    modelPropertyMacro = null,\n    mode = 'non-strict'\n  } = options;\n  try {\n    const {\n      cache\n    } = resolveOpenAPI31Strategy;\n\n    // determining BaseURI\n    const cwd = url.isHttpUrl(url.cwd()) ? url.cwd() : DEFAULT_BASE_URL;\n    const retrievalURI = optionsUtil.retrievalURI(options);\n    const baseURI = url.resolve(cwd, retrievalURI);\n\n    // prepare spec for dereferencing\n    let openApiElement;\n    if (cache.has(spec)) {\n      openApiElement = cache.get(spec);\n    } else {\n      openApiElement = OpenApi3_1Element.refract(spec);\n      openApiElement.classes.push('result');\n      cache.set(spec, openApiElement);\n    }\n    const openApiParseResultElement = new ParseResultElement([openApiElement]);\n\n    // prepare fragment for dereferencing\n    const jsonPointer = jsonPointerCompile(pathDiscriminator);\n    const jsonPointerURI = jsonPointer === '' ? '' : `#${jsonPointer}`;\n    const fragmentElement = jsonPointerEvaluate(jsonPointer, openApiElement);\n\n    // prepare reference set for dereferencing\n    const openApiElementReference = new Reference({\n      uri: baseURI,\n      value: openApiParseResultElement\n    });\n    const refSet = new ReferenceSet({\n      refs: [openApiElementReference]\n    });\n    if (jsonPointer !== '') refSet.rootRef = undefined; // reset root reference as we want fragment to become the root reference\n\n    // prepare ancestors; needed for cases where fragment is not OpenAPI element\n    const ancestors = [new Set([fragmentElement])];\n    const errors = [];\n    const dereferenced = await dereferenceApiDOM(fragmentElement, {\n      resolve: {\n        /**\n         * swagger-client only supports resolving HTTP(S) URLs or spec objects.\n         * If runtime env is detected as non-browser one,\n         * and baseURI was not provided as part of resolver options,\n         * then below baseURI check will make sure that constant HTTPS URL is used as baseURI.\n         */\n        baseURI: `${baseURI}${jsonPointerURI}`,\n        resolvers: [new HTTPResolverSwaggerClient({\n          timeout: timeout || 10000,\n          redirects: redirects || 10\n        })],\n        resolverOpts: {\n          swaggerHTTPClientConfig: {\n            requestInterceptor,\n            responseInterceptor\n          }\n        },\n        strategies: [new OpenAPI3_1ResolveStrategy()]\n      },\n      parse: {\n        mediaType: mediaTypes.latest(),\n        parsers: [new OpenAPIJSON3_1Parser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new OpenAPIYAML3_1Parser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new JSONParser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new YAMLParser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new BinaryParser({\n          allowEmpty: false,\n          sourceMap: false\n        })]\n      },\n      dereference: {\n        maxDepth: 100,\n        strategies: [new OpenAPI3_1SwaggerClientDereferenceStrategy({\n          allowMetaPatches,\n          useCircularStructures,\n          parameterMacro,\n          modelPropertyMacro,\n          mode,\n          ancestors\n        })],\n        refSet,\n        dereferenceOpts: {\n          errors\n        },\n        immutable: false,\n        circular: useCircularStructures ? 'ignore' : 'replace',\n        circularReplacer: useCircularStructures ? referenceOptions.dereference.circularReplacer : circularReplacer\n      }\n    });\n    const transcluded = transclude(fragmentElement, dereferenced, openApiElement);\n    const normalized = skipNormalization ? transcluded : normalize(transcluded);\n    return {\n      spec: toValue(normalized),\n      errors\n    };\n  } catch (error) {\n    if (error instanceof InvalidJsonPointerError || error instanceof EvaluationJsonPointerError) {\n      return {\n        spec: null,\n        errors: []\n      };\n    }\n    throw error;\n  }\n};\nresolveOpenAPI31Strategy.cache = new WeakMap();\nexport default resolveOpenAPI31Strategy;\n/* eslint-enable camelcase */","map":{"version":3,"names":["ParseResultElement","ObjectElement","toValue","transclude","cloneDeep","compile","jsonPointerCompile","evaluate","jsonPointerEvaluate","EvaluationJsonPointerError","InvalidJsonPointerError","mediaTypes","OpenApi3_1Element","dereferenceApiDOM","url","ReferenceSet","Reference","options","referenceOptions","BinaryParser","OpenAPI3_1ResolveStrategy","DEFAULT_BASE_URL","optionsUtil","normalize","HTTPResolverSwaggerClient","JSONParser","YAMLParser","OpenAPIJSON3_1Parser","OpenAPIYAML3_1Parser","OpenAPI3_1SwaggerClientDereferenceStrategy","circularReplacer","refElement","$refBaseURI","meta","get","referencingElement","$ref","attributes","resolveOpenAPI31Strategy","spec","timeout","redirects","requestInterceptor","responseInterceptor","pathDiscriminator","allowMetaPatches","useCircularStructures","skipNormalization","parameterMacro","modelPropertyMacro","mode","cache","cwd","isHttpUrl","retrievalURI","baseURI","resolve","openApiElement","has","refract","classes","push","set","openApiParseResultElement","jsonPointer","jsonPointerURI","fragmentElement","openApiElementReference","uri","value","refSet","refs","rootRef","undefined","ancestors","Set","errors","dereferenced","resolvers","resolverOpts","swaggerHTTPClientConfig","strategies","parse","mediaType","latest","parsers","allowEmpty","sourceMap","dereference","maxDepth","dereferenceOpts","immutable","circular","transcluded","normalized","error","WeakMap"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/strategies/openapi-3-1-apidom/resolve.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport { ParseResultElement, ObjectElement, toValue, transclude, cloneDeep } from '@swagger-api/apidom-core';\nimport { compile as jsonPointerCompile, evaluate as jsonPointerEvaluate, EvaluationJsonPointerError, InvalidJsonPointerError } from '@swagger-api/apidom-json-pointer';\nimport { mediaTypes, OpenApi3_1Element } from '@swagger-api/apidom-ns-openapi-3-1';\nimport { dereferenceApiDOM, url, ReferenceSet, Reference, options as referenceOptions } from '@swagger-api/apidom-reference/configuration/empty';\nimport BinaryParser from '@swagger-api/apidom-reference/parse/parsers/binary';\nimport OpenAPI3_1ResolveStrategy from '@swagger-api/apidom-reference/resolve/strategies/openapi-3-1';\nimport { DEFAULT_BASE_URL } from '../../../constants.js';\nimport * as optionsUtil from '../../utils/options.js';\nimport normalize from './normalize.js';\nimport HTTPResolverSwaggerClient from '../../apidom/reference/resolve/resolvers/http-swagger-client/index.js';\nimport JSONParser from '../../apidom/reference/parse/parsers/json/index.js';\nimport YAMLParser from '../../apidom/reference/parse/parsers/yaml-1-2/index.js';\nimport OpenAPIJSON3_1Parser from '../../apidom/reference/parse/parsers/openapi-json-3-1/index.js';\nimport OpenAPIYAML3_1Parser from '../../apidom/reference/parse/parsers/openapi-yaml-3-1/index.js';\nimport OpenAPI3_1SwaggerClientDereferenceStrategy from '../../apidom/reference/dereference/strategies/openapi-3-1-swagger-client/index.js';\nexport const circularReplacer = refElement => {\n  const $refBaseURI = toValue(refElement.meta.get('baseURI'));\n  const referencingElement = refElement.meta.get('referencingElement');\n\n  /**\n   * Removing semantics from the absolutified referencing element by\n   * using generic ObjectElement to represent the reference.\n   */\n  return new ObjectElement({\n    $ref: $refBaseURI\n  }, cloneDeep(referencingElement.meta), cloneDeep(referencingElement.attributes));\n};\nconst resolveOpenAPI31Strategy = async options => {\n  const {\n    spec,\n    timeout,\n    redirects,\n    requestInterceptor,\n    responseInterceptor,\n    pathDiscriminator = [],\n    allowMetaPatches = false,\n    useCircularStructures = false,\n    skipNormalization = false,\n    parameterMacro = null,\n    modelPropertyMacro = null,\n    mode = 'non-strict'\n  } = options;\n  try {\n    const {\n      cache\n    } = resolveOpenAPI31Strategy;\n\n    // determining BaseURI\n    const cwd = url.isHttpUrl(url.cwd()) ? url.cwd() : DEFAULT_BASE_URL;\n    const retrievalURI = optionsUtil.retrievalURI(options);\n    const baseURI = url.resolve(cwd, retrievalURI);\n\n    // prepare spec for dereferencing\n    let openApiElement;\n    if (cache.has(spec)) {\n      openApiElement = cache.get(spec);\n    } else {\n      openApiElement = OpenApi3_1Element.refract(spec);\n      openApiElement.classes.push('result');\n      cache.set(spec, openApiElement);\n    }\n    const openApiParseResultElement = new ParseResultElement([openApiElement]);\n\n    // prepare fragment for dereferencing\n    const jsonPointer = jsonPointerCompile(pathDiscriminator);\n    const jsonPointerURI = jsonPointer === '' ? '' : `#${jsonPointer}`;\n    const fragmentElement = jsonPointerEvaluate(jsonPointer, openApiElement);\n\n    // prepare reference set for dereferencing\n    const openApiElementReference = new Reference({\n      uri: baseURI,\n      value: openApiParseResultElement\n    });\n    const refSet = new ReferenceSet({\n      refs: [openApiElementReference]\n    });\n    if (jsonPointer !== '') refSet.rootRef = undefined; // reset root reference as we want fragment to become the root reference\n\n    // prepare ancestors; needed for cases where fragment is not OpenAPI element\n    const ancestors = [new Set([fragmentElement])];\n    const errors = [];\n    const dereferenced = await dereferenceApiDOM(fragmentElement, {\n      resolve: {\n        /**\n         * swagger-client only supports resolving HTTP(S) URLs or spec objects.\n         * If runtime env is detected as non-browser one,\n         * and baseURI was not provided as part of resolver options,\n         * then below baseURI check will make sure that constant HTTPS URL is used as baseURI.\n         */\n        baseURI: `${baseURI}${jsonPointerURI}`,\n        resolvers: [new HTTPResolverSwaggerClient({\n          timeout: timeout || 10000,\n          redirects: redirects || 10\n        })],\n        resolverOpts: {\n          swaggerHTTPClientConfig: {\n            requestInterceptor,\n            responseInterceptor\n          }\n        },\n        strategies: [new OpenAPI3_1ResolveStrategy()]\n      },\n      parse: {\n        mediaType: mediaTypes.latest(),\n        parsers: [new OpenAPIJSON3_1Parser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new OpenAPIYAML3_1Parser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new JSONParser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new YAMLParser({\n          allowEmpty: false,\n          sourceMap: false\n        }), new BinaryParser({\n          allowEmpty: false,\n          sourceMap: false\n        })]\n      },\n      dereference: {\n        maxDepth: 100,\n        strategies: [new OpenAPI3_1SwaggerClientDereferenceStrategy({\n          allowMetaPatches,\n          useCircularStructures,\n          parameterMacro,\n          modelPropertyMacro,\n          mode,\n          ancestors\n        })],\n        refSet,\n        dereferenceOpts: {\n          errors\n        },\n        immutable: false,\n        circular: useCircularStructures ? 'ignore' : 'replace',\n        circularReplacer: useCircularStructures ? referenceOptions.dereference.circularReplacer : circularReplacer\n      }\n    });\n    const transcluded = transclude(fragmentElement, dereferenced, openApiElement);\n    const normalized = skipNormalization ? transcluded : normalize(transcluded);\n    return {\n      spec: toValue(normalized),\n      errors\n    };\n  } catch (error) {\n    if (error instanceof InvalidJsonPointerError || error instanceof EvaluationJsonPointerError) {\n      return {\n        spec: null,\n        errors: []\n      };\n    }\n    throw error;\n  }\n};\nresolveOpenAPI31Strategy.cache = new WeakMap();\nexport default resolveOpenAPI31Strategy;\n/* eslint-enable camelcase */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}