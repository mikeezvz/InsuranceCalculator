{"ast":null,"code":"import { hasIn, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\n\n/**\n * Checks whether the passed value is iterable.\n *\n * @func isIterable\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.18.0|v2.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol}\n * @return {boolean}\n * @example\n *\n * RA.isIterable(['arrays', 'are', 'iterable']); //=> true\n * RA.isIterable('strings are iterable, too'); //=> true\n * RA.isIterable((function* () {})()); //=> true (generator objects are both iterable and iterators)\n *\n * RA.isIterable({}); //=> false\n * RA.isIterable(-0); //=> false\n * RA.isIterable(null); //=> false\n * RA.isIterable(undefined); //=> false\n */\nvar isIterable = curryN(1, function (val) {\n  if (typeof Symbol === 'undefined') {\n    return false;\n  }\n  return hasIn(Symbol.iterator, Object(val)) && isFunction(val[Symbol.iterator]);\n});\nexport default isIterable;","map":{"version":3,"names":["hasIn","curryN","isFunction","isIterable","val","Symbol","iterator","Object"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isIterable.js"],"sourcesContent":["import { hasIn, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\n\n/**\n * Checks whether the passed value is iterable.\n *\n * @func isIterable\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.18.0|v2.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol}\n * @return {boolean}\n * @example\n *\n * RA.isIterable(['arrays', 'are', 'iterable']); //=> true\n * RA.isIterable('strings are iterable, too'); //=> true\n * RA.isIterable((function* () {})()); //=> true (generator objects are both iterable and iterators)\n *\n * RA.isIterable({}); //=> false\n * RA.isIterable(-0); //=> false\n * RA.isIterable(null); //=> false\n * RA.isIterable(undefined); //=> false\n */\nvar isIterable = curryN(1, function (val) {\n  if (typeof Symbol === 'undefined') {\n    return false;\n  }\n  return hasIn(Symbol.iterator, Object(val)) && isFunction(val[Symbol.iterator]);\n});\nexport default isIterable;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,MAAM,QAAQ,OAAO;AACrC,OAAOC,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGF,MAAM,CAAC,CAAC,EAAE,UAAUG,GAAG,EAAE;EACxC,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,OAAO,KAAK;EACd;EACA,OAAOL,KAAK,CAACK,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAACH,GAAG,CAAC,CAAC,IAAIF,UAAU,CAACE,GAAG,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC;AAChF,CAAC,CAAC;AACF,eAAeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}