{"ast":null,"code":"import { Mixin } from 'ts-mixer';\nimport { always, defaultTo } from 'ramda';\nimport { isNonEmptyString, isUndefined } from 'ramda-adjunct';\nimport { ArrayElement, isStringElement, cloneDeep, toValue } from '@swagger-api/apidom-core';\nimport { FallbackVisitor, FixedFieldsVisitor } from '@swagger-api/apidom-ns-openapi-3-0';\nimport { isSchemaElement, isJsonSchemaDialectElement } from \"../../../../predicates.mjs\";\nimport SchemaElement from \"../../../../elements/Schema.mjs\";\nimport JsonSchemaDialectElement from \"../../../../elements/JsonSchemaDialect.mjs\";\nimport ParentSchemaAwareVisitor from \"./ParentSchemaAwareVisitor.mjs\";\nclass SchemaVisitor extends Mixin(FixedFieldsVisitor, ParentSchemaAwareVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new SchemaElement();\n    this.specPath = always(['document', 'objects', 'Schema']);\n    this.canSupportSpecificationExtensions = true;\n    this.jsonSchemaDefaultDialect = JsonSchemaDialectElement.default;\n    this.passingOptionsNames.push('parent');\n  }\n  ObjectElement(objectElement) {\n    this.handle$schema(objectElement);\n    this.handle$id(objectElement);\n\n    // for further processing consider this Schema Element as parent for all embedded Schema Elements\n    this.parent = this.element;\n    const result = FixedFieldsVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // mark this SchemaElement with reference metadata\n    if (isStringElement(this.element.$ref)) {\n      this.element.classes.push('reference-element');\n      this.element.setMetaProperty('referenced-element', 'schema');\n    }\n    return result;\n  }\n  BooleanElement(booleanElement) {\n    const result = super.enter(booleanElement);\n    this.element.classes.push('boolean-json-schema');\n    return result;\n  }\n\n  /**\n   * This function depends on some external context, so we need to make sure this function\n   * works even when no context is provided like when directly refracting generic Object Element\n   * into Schema Element: SchemaElement.refract(new ObjectElement({ type: 'object' });\n   */\n  getJsonSchemaDialect() {\n    let jsonSchemaDialect;\n    if (this.openApiSemanticElement !== undefined &&\n    // @ts-ignore\n    isJsonSchemaDialectElement(this.openApiSemanticElement.jsonSchemaDialect)) {\n      // @ts-ignore\n      jsonSchemaDialect = toValue(this.openApiSemanticElement.jsonSchemaDialect);\n    } else if (this.openApiGenericElement !== undefined && isStringElement(this.openApiGenericElement.get('jsonSchemaDialect'))) {\n      jsonSchemaDialect = toValue(this.openApiGenericElement.get('jsonSchemaDialect'));\n    } else {\n      jsonSchemaDialect = toValue(this.jsonSchemaDefaultDialect);\n    }\n    return jsonSchemaDialect;\n  }\n  handle$schema(objectElement) {\n    // handle $schema keyword in embedded resources\n    if (isUndefined(this.parent) && !isStringElement(objectElement.get('$schema'))) {\n      // no parent available and no $schema is defined, set default jsonSchemaDialect\n      this.element.setMetaProperty('inherited$schema', this.getJsonSchemaDialect());\n    } else if (isSchemaElement(this.parent) && !isStringElement(objectElement.get('$schema'))) {\n      // parent is available and no $schema is defined, set parent $schema\n      const inherited$schema = defaultTo(toValue(this.parent.meta.get('inherited$schema')), toValue(this.parent.$schema));\n      this.element.setMetaProperty('inherited$schema', inherited$schema);\n    }\n  }\n  handle$id(objectElement) {\n    // handle $id keyword in embedded resources\n    // fetch parent's inherited$id\n    const inherited$id = this.parent !== undefined ? cloneDeep(this.parent.getMetaProperty('inherited$id', [])) : new ArrayElement();\n    // get current $id keyword\n    const $id = toValue(objectElement.get('$id'));\n\n    // remember $id keyword if it's a non-empty strings\n    if (isNonEmptyString($id)) {\n      inherited$id.push($id);\n    }\n    this.element.setMetaProperty('inherited$id', inherited$id);\n  }\n}\nexport default SchemaVisitor;","map":{"version":3,"names":["Mixin","always","defaultTo","isNonEmptyString","isUndefined","ArrayElement","isStringElement","cloneDeep","toValue","FallbackVisitor","FixedFieldsVisitor","isSchemaElement","isJsonSchemaDialectElement","SchemaElement","JsonSchemaDialectElement","ParentSchemaAwareVisitor","SchemaVisitor","constructor","options","element","specPath","canSupportSpecificationExtensions","jsonSchemaDefaultDialect","default","passingOptionsNames","push","ObjectElement","objectElement","handle$schema","handle$id","parent","result","prototype","call","$ref","classes","setMetaProperty","BooleanElement","booleanElement","enter","getJsonSchemaDialect","jsonSchemaDialect","openApiSemanticElement","undefined","openApiGenericElement","get","inherited$schema","meta","$schema","inherited$id","getMetaProperty","$id"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-1/es/refractor/visitors/open-api-3-1/schema/index.mjs"],"sourcesContent":["import { Mixin } from 'ts-mixer';\nimport { always, defaultTo } from 'ramda';\nimport { isNonEmptyString, isUndefined } from 'ramda-adjunct';\nimport { ArrayElement, isStringElement, cloneDeep, toValue } from '@swagger-api/apidom-core';\nimport { FallbackVisitor, FixedFieldsVisitor } from '@swagger-api/apidom-ns-openapi-3-0';\nimport { isSchemaElement, isJsonSchemaDialectElement } from \"../../../../predicates.mjs\";\nimport SchemaElement from \"../../../../elements/Schema.mjs\";\nimport JsonSchemaDialectElement from \"../../../../elements/JsonSchemaDialect.mjs\";\nimport ParentSchemaAwareVisitor from \"./ParentSchemaAwareVisitor.mjs\";\nclass SchemaVisitor extends Mixin(FixedFieldsVisitor, ParentSchemaAwareVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new SchemaElement();\n    this.specPath = always(['document', 'objects', 'Schema']);\n    this.canSupportSpecificationExtensions = true;\n    this.jsonSchemaDefaultDialect = JsonSchemaDialectElement.default;\n    this.passingOptionsNames.push('parent');\n  }\n  ObjectElement(objectElement) {\n    this.handle$schema(objectElement);\n    this.handle$id(objectElement);\n\n    // for further processing consider this Schema Element as parent for all embedded Schema Elements\n    this.parent = this.element;\n    const result = FixedFieldsVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // mark this SchemaElement with reference metadata\n    if (isStringElement(this.element.$ref)) {\n      this.element.classes.push('reference-element');\n      this.element.setMetaProperty('referenced-element', 'schema');\n    }\n    return result;\n  }\n  BooleanElement(booleanElement) {\n    const result = super.enter(booleanElement);\n    this.element.classes.push('boolean-json-schema');\n    return result;\n  }\n\n  /**\n   * This function depends on some external context, so we need to make sure this function\n   * works even when no context is provided like when directly refracting generic Object Element\n   * into Schema Element: SchemaElement.refract(new ObjectElement({ type: 'object' });\n   */\n  getJsonSchemaDialect() {\n    let jsonSchemaDialect;\n    if (this.openApiSemanticElement !== undefined &&\n    // @ts-ignore\n    isJsonSchemaDialectElement(this.openApiSemanticElement.jsonSchemaDialect)) {\n      // @ts-ignore\n      jsonSchemaDialect = toValue(this.openApiSemanticElement.jsonSchemaDialect);\n    } else if (this.openApiGenericElement !== undefined && isStringElement(this.openApiGenericElement.get('jsonSchemaDialect'))) {\n      jsonSchemaDialect = toValue(this.openApiGenericElement.get('jsonSchemaDialect'));\n    } else {\n      jsonSchemaDialect = toValue(this.jsonSchemaDefaultDialect);\n    }\n    return jsonSchemaDialect;\n  }\n  handle$schema(objectElement) {\n    // handle $schema keyword in embedded resources\n    if (isUndefined(this.parent) && !isStringElement(objectElement.get('$schema'))) {\n      // no parent available and no $schema is defined, set default jsonSchemaDialect\n      this.element.setMetaProperty('inherited$schema', this.getJsonSchemaDialect());\n    } else if (isSchemaElement(this.parent) && !isStringElement(objectElement.get('$schema'))) {\n      // parent is available and no $schema is defined, set parent $schema\n      const inherited$schema = defaultTo(toValue(this.parent.meta.get('inherited$schema')), toValue(this.parent.$schema));\n      this.element.setMetaProperty('inherited$schema', inherited$schema);\n    }\n  }\n  handle$id(objectElement) {\n    // handle $id keyword in embedded resources\n    // fetch parent's inherited$id\n    const inherited$id = this.parent !== undefined ? cloneDeep(this.parent.getMetaProperty('inherited$id', [])) : new ArrayElement();\n    // get current $id keyword\n    const $id = toValue(objectElement.get('$id'));\n\n    // remember $id keyword if it's a non-empty strings\n    if (isNonEmptyString($id)) {\n      inherited$id.push($id);\n    }\n    this.element.setMetaProperty('inherited$id', inherited$id);\n  }\n}\nexport default SchemaVisitor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}