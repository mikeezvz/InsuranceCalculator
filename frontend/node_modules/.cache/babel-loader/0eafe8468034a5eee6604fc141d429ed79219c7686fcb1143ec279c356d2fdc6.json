{"ast":null,"code":"import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError` or `URIError` object.\n *\n * @func isError\n * @category Type\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.30.0|v2.30.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean} Returns `true` if value is an error object, `false` otherwise\n * @example\n *\n * RA.isError(new Error()); //=> true\n * RA.isError(Error); //=> false\n * RA.isError(1); // => false\n */\nvar isError = curryN(1, pipe(type, identical('Error')));\nexport default isError;","map":{"version":3,"names":["type","identical","pipe","curryN","isError"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isError.js"],"sourcesContent":["import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError` or `URIError` object.\n *\n * @func isError\n * @category Type\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.30.0|v2.30.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean} Returns `true` if value is an error object, `false` otherwise\n * @example\n *\n * RA.isError(new Error()); //=> true\n * RA.isError(Error); //=> false\n * RA.isError(1); // => false\n */\nvar isError = curryN(1, pipe(type, identical('Error')));\nexport default isError;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,QAAQ,OAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAGD,MAAM,CAAC,CAAC,EAAED,IAAI,CAACF,IAAI,EAAEC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AACvD,eAAeG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}