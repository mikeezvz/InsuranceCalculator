{"ast":null,"code":"import { tail, compose, pathOr, map, concat, transduce, pipe, trim, split, join, curry } from 'ramda';\nimport { isInteger, trimStart, trimEnd, isUndefined, trimCharsStart, isEmptyString, repeatStr, concatRight } from 'ramda-adjunct';\nimport { unraw } from 'unraw';\n\n/**\n * Helpers.\n */\n\nconst blockStyleRegExp = /^(?<style>[|>])(?<chomping>[+-]?)(?<indentation>[0-9]*)\\s/;\nconst getIndentationIndicator = content => {\n  const matches = content.match(blockStyleRegExp);\n  const indicator = pathOr('', ['groups', 'indentation'], matches);\n  return isEmptyString(indicator) ? undefined : parseInt(indicator, 10);\n};\nconst getIndentation = content => {\n  const explicitIndentationIndicator = getIndentationIndicator(content);\n\n  // we have explicit indentation indicator\n  if (isInteger(explicitIndentationIndicator)) {\n    return repeatStr(' ', explicitIndentationIndicator);\n  }\n\n  // we assume indentation indicator from first line\n  const firstLine = pathOr('', [1], content.split('\\n'));\n  const implicitIndentationIndicator = pathOr(0, ['groups', 'indentation', 'length'], firstLine.match(/^(?<indentation>[ ]*)/));\n  return repeatStr(' ', implicitIndentationIndicator);\n};\nconst getChompingIndicator = content => {\n  const matches = content.match(blockStyleRegExp);\n  const indicator = pathOr('', ['groups', 'chomping'], matches);\n  return isEmptyString(indicator) ? undefined : indicator;\n};\nconst chomp = (indicator, content) => {\n  // clip (single newline at end)\n  if (isUndefined(indicator)) {\n    return `${trimEnd(content)}\\n`;\n  }\n  // strip (no newline at end)\n  if (indicator === '-') {\n    return trimEnd(content);\n  }\n  // keep (all newlines from end)\n  if (indicator === '+') {\n    return content;\n  }\n  return content;\n};\n\n/**\n * Normalizes lines breaks.\n * https://yaml.org/spec/1.2/spec.html#line%20break/normalization/\n */\n// @ts-ignore\nconst normalizeLineBreaks = val => val.replace(/\\r\\n/g, '\\n');\n\n// prevent escaped line breaks from being converted to a space\nconst preventLineBreakCollapseToSpace = val => val.replace(/\\\\\\n\\s*/g, '');\n\n// collapse line breaks into spaces\nconst collapseLineBreakToSpace = val => {\n  /**\n   * Safari doesn't support negative lookbehind, thus we use mimicking technique:\n   *\n   * - https://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript\n   *\n   * Ideally we want to use following replace, but that's not currently possible:\n   *\n   * .replace(/[^\\n]\\n([^\\n]+)/g, (match: string, p1: string) => ` ${p1.trimLeft()}`)\n   */\n  return val.replace(/(\\n)?\\n([^\\n]+)/g, (match, p1, p2) => p1 ? match : ` ${p2.trimStart()}`).replace(/[\\n]{2}/g, '\\n');\n};\nconst removeQuotes = curry((quoteType, val) => val.replace(new RegExp(`^${quoteType}`), '').replace(new RegExp(`${quoteType}$`), ''));\n\n/**\n * Formats Flow Scalar Plain style.\n * https://yaml.org/spec/1.2/spec.html#id2788859\n */\nexport const formatFlowPlain = pipe(normalizeLineBreaks, trim, collapseLineBreakToSpace, split('\\n'), map(trimStart), join('\\n'));\n\n/**\n * Formats Flow Scalar Single-Quoted style.\n * https://yaml.org/spec/1.2/spec.html#id2788097\n */\n\nexport const formatFlowSingleQuoted = pipe(normalizeLineBreaks, trim, collapseLineBreakToSpace, split('\\n'), map(trimStart), join('\\n'), removeQuotes(\"'\"));\n\n/**\n * Formats Flow Scalar Double-Quoted style.\n * https://yaml.org/spec/1.2/spec.html#id2787109\n */\nexport const formatFlowDoubleQuoted = pipe(normalizeLineBreaks, trim, preventLineBreakCollapseToSpace, collapseLineBreakToSpace, unraw, split('\\n'), map(trimStart), join('\\n'), removeQuotes('\"'));\n\n/**\n * Formats Block Scalar Literal style.\n * https://yaml.org/spec/1.2/spec.html#id2795688\n */\nexport const formatBlockLiteral = content => {\n  const indentation = getIndentation(content);\n  const chompingIndicator = getChompingIndicator(content);\n  const normalized = normalizeLineBreaks(content);\n  const lines = tail(normalized.split('\\n')); // first line only contains indicators\n  const transducer = compose(map(trimCharsStart(indentation)), map(concatRight('\\n')));\n  // @ts-ignore\n  const deindented = transduce(transducer, concat, '', lines);\n  return chomp(chompingIndicator, deindented);\n};\n\n/**\n * Formats BLock Scalar Folded style.\n * https://yaml.org/spec/1.2/spec.html#id2796251\n */\nexport const formatBlockFolded = content => {\n  const indentation = getIndentation(content);\n  const chompingIndicator = getChompingIndicator(content);\n  const normalized = normalizeLineBreaks(content);\n  const lines = tail(normalized.split('\\n')); // first line only contains indicators\n  const transducer = compose(map(trimCharsStart(indentation)), map(concatRight('\\n')));\n  // @ts-ignore\n  const deindented = transduce(transducer, concat, '', lines);\n  const collapsed = collapseLineBreakToSpace(deindented);\n  return chomp(chompingIndicator, collapsed);\n};","map":{"version":3,"names":["tail","compose","pathOr","map","concat","transduce","pipe","trim","split","join","curry","isInteger","trimStart","trimEnd","isUndefined","trimCharsStart","isEmptyString","repeatStr","concatRight","unraw","blockStyleRegExp","getIndentationIndicator","content","matches","match","indicator","undefined","parseInt","getIndentation","explicitIndentationIndicator","firstLine","implicitIndentationIndicator","getChompingIndicator","chomp","normalizeLineBreaks","val","replace","preventLineBreakCollapseToSpace","collapseLineBreakToSpace","p1","p2","removeQuotes","quoteType","RegExp","formatFlowPlain","formatFlowSingleQuoted","formatFlowDoubleQuoted","formatBlockLiteral","indentation","chompingIndicator","normalized","lines","transducer","deindented","formatBlockFolded","collapsed"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ast/es/yaml/schemas/canonical-format.mjs"],"sourcesContent":["import { tail, compose, pathOr, map, concat, transduce, pipe, trim, split, join, curry } from 'ramda';\nimport { isInteger, trimStart, trimEnd, isUndefined, trimCharsStart, isEmptyString, repeatStr, concatRight } from 'ramda-adjunct';\nimport { unraw } from 'unraw';\n\n/**\n * Helpers.\n */\n\nconst blockStyleRegExp = /^(?<style>[|>])(?<chomping>[+-]?)(?<indentation>[0-9]*)\\s/;\nconst getIndentationIndicator = content => {\n  const matches = content.match(blockStyleRegExp);\n  const indicator = pathOr('', ['groups', 'indentation'], matches);\n  return isEmptyString(indicator) ? undefined : parseInt(indicator, 10);\n};\nconst getIndentation = content => {\n  const explicitIndentationIndicator = getIndentationIndicator(content);\n\n  // we have explicit indentation indicator\n  if (isInteger(explicitIndentationIndicator)) {\n    return repeatStr(' ', explicitIndentationIndicator);\n  }\n\n  // we assume indentation indicator from first line\n  const firstLine = pathOr('', [1], content.split('\\n'));\n  const implicitIndentationIndicator = pathOr(0, ['groups', 'indentation', 'length'], firstLine.match(/^(?<indentation>[ ]*)/));\n  return repeatStr(' ', implicitIndentationIndicator);\n};\nconst getChompingIndicator = content => {\n  const matches = content.match(blockStyleRegExp);\n  const indicator = pathOr('', ['groups', 'chomping'], matches);\n  return isEmptyString(indicator) ? undefined : indicator;\n};\nconst chomp = (indicator, content) => {\n  // clip (single newline at end)\n  if (isUndefined(indicator)) {\n    return `${trimEnd(content)}\\n`;\n  }\n  // strip (no newline at end)\n  if (indicator === '-') {\n    return trimEnd(content);\n  }\n  // keep (all newlines from end)\n  if (indicator === '+') {\n    return content;\n  }\n  return content;\n};\n\n/**\n * Normalizes lines breaks.\n * https://yaml.org/spec/1.2/spec.html#line%20break/normalization/\n */\n// @ts-ignore\nconst normalizeLineBreaks = val => val.replace(/\\r\\n/g, '\\n');\n\n// prevent escaped line breaks from being converted to a space\nconst preventLineBreakCollapseToSpace = val => val.replace(/\\\\\\n\\s*/g, '');\n\n// collapse line breaks into spaces\nconst collapseLineBreakToSpace = val => {\n  /**\n   * Safari doesn't support negative lookbehind, thus we use mimicking technique:\n   *\n   * - https://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript\n   *\n   * Ideally we want to use following replace, but that's not currently possible:\n   *\n   * .replace(/[^\\n]\\n([^\\n]+)/g, (match: string, p1: string) => ` ${p1.trimLeft()}`)\n   */\n  return val.replace(/(\\n)?\\n([^\\n]+)/g, (match, p1, p2) => p1 ? match : ` ${p2.trimStart()}`).replace(/[\\n]{2}/g, '\\n');\n};\nconst removeQuotes = curry((quoteType, val) => val.replace(new RegExp(`^${quoteType}`), '').replace(new RegExp(`${quoteType}$`), ''));\n\n/**\n * Formats Flow Scalar Plain style.\n * https://yaml.org/spec/1.2/spec.html#id2788859\n */\nexport const formatFlowPlain = pipe(normalizeLineBreaks, trim, collapseLineBreakToSpace, split('\\n'), map(trimStart), join('\\n'));\n\n/**\n * Formats Flow Scalar Single-Quoted style.\n * https://yaml.org/spec/1.2/spec.html#id2788097\n */\n\nexport const formatFlowSingleQuoted = pipe(normalizeLineBreaks, trim, collapseLineBreakToSpace, split('\\n'), map(trimStart), join('\\n'), removeQuotes(\"'\"));\n\n/**\n * Formats Flow Scalar Double-Quoted style.\n * https://yaml.org/spec/1.2/spec.html#id2787109\n */\nexport const formatFlowDoubleQuoted = pipe(normalizeLineBreaks, trim, preventLineBreakCollapseToSpace, collapseLineBreakToSpace, unraw, split('\\n'), map(trimStart), join('\\n'), removeQuotes('\"'));\n\n/**\n * Formats Block Scalar Literal style.\n * https://yaml.org/spec/1.2/spec.html#id2795688\n */\nexport const formatBlockLiteral = content => {\n  const indentation = getIndentation(content);\n  const chompingIndicator = getChompingIndicator(content);\n  const normalized = normalizeLineBreaks(content);\n  const lines = tail(normalized.split('\\n')); // first line only contains indicators\n  const transducer = compose(map(trimCharsStart(indentation)), map(concatRight('\\n')));\n  // @ts-ignore\n  const deindented = transduce(transducer, concat, '', lines);\n  return chomp(chompingIndicator, deindented);\n};\n\n/**\n * Formats BLock Scalar Folded style.\n * https://yaml.org/spec/1.2/spec.html#id2796251\n */\nexport const formatBlockFolded = content => {\n  const indentation = getIndentation(content);\n  const chompingIndicator = getChompingIndicator(content);\n  const normalized = normalizeLineBreaks(content);\n  const lines = tail(normalized.split('\\n')); // first line only contains indicators\n  const transducer = compose(map(trimCharsStart(indentation)), map(concatRight('\\n')));\n  // @ts-ignore\n  const deindented = transduce(transducer, concat, '', lines);\n  const collapsed = collapseLineBreakToSpace(deindented);\n  return chomp(chompingIndicator, collapsed);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}