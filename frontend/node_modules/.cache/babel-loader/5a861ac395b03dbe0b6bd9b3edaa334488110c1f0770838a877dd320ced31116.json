{"ast":null,"code":"import { complement, curryN } from 'ramda';\nimport isPrimitive from './isPrimitive.js';\n\n/**\n * Checks if value is not a primitive data type. There are 6 primitive data types: `string`, `number`, `bigint`, `boolean`, `undefined`, `symbol` and a special case of `null`.\n *\n * @func isNotPrimitive\n * @memberOf RA\n * @category Type\n * @sig * -> Boolean\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isPrimitive|isPrimitive}, {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values|MDN Primitive values}, {@link https://developer.mozilla.org/en-US/docs/Glossary/Primitive|MDN Primitive}\n * @example\n *\n * RA.isNotPrimitive(new String(\"string\")); //=> true\n * RA.isNotPrimitive(new Number(1)); //=> true\n * RA.isNotPrimitive(\"string\"); //=> false\n * RA.isNotPrimitive(1); //=> false\n */\n\nvar isNotPrimitive = curryN(1, complement(isPrimitive));\nexport default isNotPrimitive;","map":{"version":3,"names":["complement","curryN","isPrimitive","isNotPrimitive"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotPrimitive.js"],"sourcesContent":["import { complement, curryN } from 'ramda';\nimport isPrimitive from './isPrimitive.js';\n\n/**\n * Checks if value is not a primitive data type. There are 6 primitive data types: `string`, `number`, `bigint`, `boolean`, `undefined`, `symbol` and a special case of `null`.\n *\n * @func isNotPrimitive\n * @memberOf RA\n * @category Type\n * @sig * -> Boolean\n * @since {@link https://char0n.github.io/ramda-adjunct/2.32.0|v2.32.0}\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isPrimitive|isPrimitive}, {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values|MDN Primitive values}, {@link https://developer.mozilla.org/en-US/docs/Glossary/Primitive|MDN Primitive}\n * @example\n *\n * RA.isNotPrimitive(new String(\"string\")); //=> true\n * RA.isNotPrimitive(new Number(1)); //=> true\n * RA.isNotPrimitive(\"string\"); //=> false\n * RA.isNotPrimitive(1); //=> false\n */\n\nvar isNotPrimitive = curryN(1, complement(isPrimitive));\nexport default isNotPrimitive;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAC1C,OAAOC,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAGF,MAAM,CAAC,CAAC,EAAED,UAAU,CAACE,WAAW,CAAC,CAAC;AACvD,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}