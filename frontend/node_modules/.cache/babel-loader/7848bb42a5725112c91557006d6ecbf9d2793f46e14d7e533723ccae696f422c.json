{"ast":null,"code":"import { curry, compose, complement, either } from 'ramda';\n\n/* eslint-disable max-len */\n/**\n * A function which calls the two provided functions and returns the complement of `||`ing the\n * results.\n * It returns false if the first function is truth-y and the complement of the second function\n * otherwise. Note that this is short-circuited, meaning that the second function will not be\n * invoked if the first returns a truth-y value. In short it will return true if neither predicate\n * returns true.\n *\n * In addition to functions, `RA.neither` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func neither\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} Returns a function that applies its arguments to `f` and `g` and returns the complement of `||`ing their outputs together.\n * @see {@link http://ramdajs.com/docs/#either|R.either}, {@link http://ramdajs.com/docs/#or|R.or}\n * @example\n *\n * const gt10 = R.gt(R.__, 10)\n * const even = (x) => x % 2 === 0;\n * const f = RA.neither(gt10, even);\n *\n * f(12); //=> false\n * f(8); //=> false\n * f(11); //=> false\n * f(9); //=> true\n */\n/* eslint-enable max-len */\nvar neither = curry(compose(complement, either));\nexport default neither;","map":{"version":3,"names":["curry","compose","complement","either","neither"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/neither.js"],"sourcesContent":["import { curry, compose, complement, either } from 'ramda';\n\n/* eslint-disable max-len */\n/**\n * A function which calls the two provided functions and returns the complement of `||`ing the\n * results.\n * It returns false if the first function is truth-y and the complement of the second function\n * otherwise. Note that this is short-circuited, meaning that the second function will not be\n * invoked if the first returns a truth-y value. In short it will return true if neither predicate\n * returns true.\n *\n * In addition to functions, `RA.neither` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func neither\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} Returns a function that applies its arguments to `f` and `g` and returns the complement of `||`ing their outputs together.\n * @see {@link http://ramdajs.com/docs/#either|R.either}, {@link http://ramdajs.com/docs/#or|R.or}\n * @example\n *\n * const gt10 = R.gt(R.__, 10)\n * const even = (x) => x % 2 === 0;\n * const f = RA.neither(gt10, even);\n *\n * f(12); //=> false\n * f(8); //=> false\n * f(11); //=> false\n * f(9); //=> true\n */\n/* eslint-enable max-len */\nvar neither = curry(compose(complement, either));\nexport default neither;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAGJ,KAAK,CAACC,OAAO,CAACC,UAAU,EAAEC,MAAM,CAAC,CAAC;AAChD,eAAeC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}