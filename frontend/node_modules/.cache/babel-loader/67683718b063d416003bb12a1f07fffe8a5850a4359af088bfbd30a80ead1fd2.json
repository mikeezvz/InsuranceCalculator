{"ast":null,"code":"import { pathOr } from 'ramda';\nimport { isFunction, noop } from 'ramda-adjunct';\nimport { visit, PredicateVisitor } from \"./visitor.mjs\";\nimport { isElement } from \"../predicates/index.mjs\";\nexport class CallbackVisitor extends PredicateVisitor {\n  callback;\n  constructor({\n    callback = noop,\n    ...rest\n  } = {}) {\n    super({\n      ...rest\n    });\n    this.callback = callback;\n  }\n  enter(element) {\n    if (this.predicate(element)) {\n      this.callback(element);\n      return this.returnOnTrue;\n    }\n    return this.returnOnFalse;\n  }\n}\n\n// executes the callback on this element and all descendants\nconst traverse = (options, element) => {\n  let callback;\n  let predicate;\n  if (isFunction(options)) {\n    callback = options;\n    predicate = isElement;\n  } else {\n    callback = pathOr(noop, ['callback'], options);\n    predicate = pathOr(isElement, ['predicate'], options);\n  }\n  const visitor = new CallbackVisitor({\n    callback,\n    predicate\n  });\n\n  // @ts-ignore\n  visit(element, visitor);\n};\nexport default traverse;","map":{"version":3,"names":["pathOr","isFunction","noop","visit","PredicateVisitor","isElement","CallbackVisitor","callback","constructor","rest","enter","element","predicate","returnOnTrue","returnOnFalse","traverse","options","visitor"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-core/es/traversal/traverse.mjs"],"sourcesContent":["import { pathOr } from 'ramda';\nimport { isFunction, noop } from 'ramda-adjunct';\nimport { visit, PredicateVisitor } from \"./visitor.mjs\";\nimport { isElement } from \"../predicates/index.mjs\";\nexport class CallbackVisitor extends PredicateVisitor {\n  callback;\n  constructor({\n    callback = noop,\n    ...rest\n  } = {}) {\n    super({\n      ...rest\n    });\n    this.callback = callback;\n  }\n  enter(element) {\n    if (this.predicate(element)) {\n      this.callback(element);\n      return this.returnOnTrue;\n    }\n    return this.returnOnFalse;\n  }\n}\n\n// executes the callback on this element and all descendants\nconst traverse = (options, element) => {\n  let callback;\n  let predicate;\n  if (isFunction(options)) {\n    callback = options;\n    predicate = isElement;\n  } else {\n    callback = pathOr(noop, ['callback'], options);\n    predicate = pathOr(isElement, ['predicate'], options);\n  }\n  const visitor = new CallbackVisitor({\n    callback,\n    predicate\n  });\n\n  // @ts-ignore\n  visit(element, visitor);\n};\nexport default traverse;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,UAAU,EAAEC,IAAI,QAAQ,eAAe;AAChD,SAASC,KAAK,EAAEC,gBAAgB,QAAQ,eAAe;AACvD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAO,MAAMC,eAAe,SAASF,gBAAgB,CAAC;EACpDG,QAAQ;EACRC,WAAWA,CAAC;IACVD,QAAQ,GAAGL,IAAI;IACf,GAAGO;EACL,CAAC,GAAG,CAAC,CAAC,EAAE;IACN,KAAK,CAAC;MACJ,GAAGA;IACL,CAAC,CAAC;IACF,IAAI,CAACF,QAAQ,GAAGA,QAAQ;EAC1B;EACAG,KAAKA,CAACC,OAAO,EAAE;IACb,IAAI,IAAI,CAACC,SAAS,CAACD,OAAO,CAAC,EAAE;MAC3B,IAAI,CAACJ,QAAQ,CAACI,OAAO,CAAC;MACtB,OAAO,IAAI,CAACE,YAAY;IAC1B;IACA,OAAO,IAAI,CAACC,aAAa;EAC3B;AACF;;AAEA;AACA,MAAMC,QAAQ,GAAGA,CAACC,OAAO,EAAEL,OAAO,KAAK;EACrC,IAAIJ,QAAQ;EACZ,IAAIK,SAAS;EACb,IAAIX,UAAU,CAACe,OAAO,CAAC,EAAE;IACvBT,QAAQ,GAAGS,OAAO;IAClBJ,SAAS,GAAGP,SAAS;EACvB,CAAC,MAAM;IACLE,QAAQ,GAAGP,MAAM,CAACE,IAAI,EAAE,CAAC,UAAU,CAAC,EAAEc,OAAO,CAAC;IAC9CJ,SAAS,GAAGZ,MAAM,CAACK,SAAS,EAAE,CAAC,WAAW,CAAC,EAAEW,OAAO,CAAC;EACvD;EACA,MAAMC,OAAO,GAAG,IAAIX,eAAe,CAAC;IAClCC,QAAQ;IACRK;EACF,CAAC,CAAC;;EAEF;EACAT,KAAK,CAACQ,OAAO,EAAEM,OAAO,CAAC;AACzB,CAAC;AACD,eAAeF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}