{"ast":null,"code":"import { curry, over, lensPath, mergeLeft } from 'ramda';\n\n/**\n * Create a new object with the own properties of the object under the `path`\n * merged with the own properties of the provided `source`.\n * If a key exists in both objects, the value from the `source` object will be used.\n *\n * @func mergePath\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Object\n * @sig [k] -> {a} -> {k: {a}} -> {k: {a}}\n * @see {@link RA.mergeProp|mergeProp}\n * @param {!Array} path The property path of the destination object\n * @param {!Object} source The source object\n * @param {!Object} obj The object that has destination object under corresponding property path\n * @return {!Object} The new version of object\n * @example\n *\n * RA.mergePath(\n *  ['outer', 'inner'],\n *  { foo: 3, bar: 4 },\n *  { outer: { inner: { foo: 2 } } }\n * ); //=> { outer: { inner: { foo: 3, bar: 4 } }\n */\nvar mergePath = curry(function (path, source, obj) {\n  return over(lensPath(path), mergeLeft(source), obj);\n});\nexport default mergePath;","map":{"version":3,"names":["curry","over","lensPath","mergeLeft","mergePath","path","source","obj"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/mergePath.js"],"sourcesContent":["import { curry, over, lensPath, mergeLeft } from 'ramda';\n\n/**\n * Create a new object with the own properties of the object under the `path`\n * merged with the own properties of the provided `source`.\n * If a key exists in both objects, the value from the `source` object will be used.\n *\n * @func mergePath\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Object\n * @sig [k] -> {a} -> {k: {a}} -> {k: {a}}\n * @see {@link RA.mergeProp|mergeProp}\n * @param {!Array} path The property path of the destination object\n * @param {!Object} source The source object\n * @param {!Object} obj The object that has destination object under corresponding property path\n * @return {!Object} The new version of object\n * @example\n *\n * RA.mergePath(\n *  ['outer', 'inner'],\n *  { foo: 3, bar: 4 },\n *  { outer: { inner: { foo: 2 } } }\n * ); //=> { outer: { inner: { foo: 3, bar: 4 } }\n */\nvar mergePath = curry(function (path, source, obj) {\n  return over(lensPath(path), mergeLeft(source), obj);\n});\nexport default mergePath;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGJ,KAAK,CAAC,UAAUK,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAE;EACjD,OAAON,IAAI,CAACC,QAAQ,CAACG,IAAI,CAAC,EAAEF,SAAS,CAACG,MAAM,CAAC,EAAEC,GAAG,CAAC;AACrD,CAAC,CAAC;AACF,eAAeH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}