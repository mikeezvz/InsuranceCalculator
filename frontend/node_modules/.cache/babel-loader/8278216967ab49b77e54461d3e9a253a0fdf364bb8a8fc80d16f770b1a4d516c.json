{"ast":null,"code":"import { Mixin } from 'ts-mixer';\nimport { always, range } from 'ramda';\nimport { cloneDeep, toValue } from '@swagger-api/apidom-core';\nimport ResponsesElement from \"../../../../elements/Responses.mjs\";\nimport MixedFieldsVisitor from \"../../generics/MixedFieldsVisitor.mjs\";\nimport FallbackVisitor from \"../../FallbackVisitor.mjs\";\nimport { isReferenceLikeElement } from \"../../../predicates.mjs\";\nimport { isReferenceElement, isResponseElement } from \"../../../../predicates.mjs\";\nclass ResponsesVisitor extends Mixin(MixedFieldsVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new ResponsesElement();\n    this.specPathFixedFields = always(['document', 'objects', 'Responses']);\n    this.canSupportSpecificationExtensions = true;\n    this.specPathPatternedFields = element => isReferenceLikeElement(element) ? ['document', 'objects', 'Reference'] : ['document', 'objects', 'Response'];\n    this.fieldPatternPredicate = value => new RegExp(`^(1XX|2XX|3XX|4XX|5XX|${range(100, 600).join('|')})$`).test(String(value));\n  }\n  ObjectElement(objectElement) {\n    const result = MixedFieldsVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // decorate every ReferenceElement with metadata about their referencing type\n    // @ts-ignore\n    this.element.filter(isReferenceElement).forEach(referenceElement => {\n      referenceElement.setMetaProperty('referenced-element', 'response');\n    });\n\n    // decorate every ResponseElement with metadata about their status code\n    // @ts-ignore\n    this.element.filter(isResponseElement).forEach((value, key) => {\n      const httpStatusCode = cloneDeep(key);\n      if (!this.fieldPatternPredicate(toValue(httpStatusCode))) return;\n      value.setMetaProperty('http-status-code', httpStatusCode);\n    });\n    return result;\n  }\n}\nexport default ResponsesVisitor;","map":{"version":3,"names":["Mixin","always","range","cloneDeep","toValue","ResponsesElement","MixedFieldsVisitor","FallbackVisitor","isReferenceLikeElement","isReferenceElement","isResponseElement","ResponsesVisitor","constructor","options","element","specPathFixedFields","canSupportSpecificationExtensions","specPathPatternedFields","fieldPatternPredicate","value","RegExp","join","test","String","ObjectElement","objectElement","result","prototype","call","filter","forEach","referenceElement","setMetaProperty","key","httpStatusCode"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-0/es/refractor/visitors/open-api-3-0/responses/index.mjs"],"sourcesContent":["import { Mixin } from 'ts-mixer';\nimport { always, range } from 'ramda';\nimport { cloneDeep, toValue } from '@swagger-api/apidom-core';\nimport ResponsesElement from \"../../../../elements/Responses.mjs\";\nimport MixedFieldsVisitor from \"../../generics/MixedFieldsVisitor.mjs\";\nimport FallbackVisitor from \"../../FallbackVisitor.mjs\";\nimport { isReferenceLikeElement } from \"../../../predicates.mjs\";\nimport { isReferenceElement, isResponseElement } from \"../../../../predicates.mjs\";\nclass ResponsesVisitor extends Mixin(MixedFieldsVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new ResponsesElement();\n    this.specPathFixedFields = always(['document', 'objects', 'Responses']);\n    this.canSupportSpecificationExtensions = true;\n    this.specPathPatternedFields = element => isReferenceLikeElement(element) ? ['document', 'objects', 'Reference'] : ['document', 'objects', 'Response'];\n    this.fieldPatternPredicate = value => new RegExp(`^(1XX|2XX|3XX|4XX|5XX|${range(100, 600).join('|')})$`).test(String(value));\n  }\n  ObjectElement(objectElement) {\n    const result = MixedFieldsVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // decorate every ReferenceElement with metadata about their referencing type\n    // @ts-ignore\n    this.element.filter(isReferenceElement).forEach(referenceElement => {\n      referenceElement.setMetaProperty('referenced-element', 'response');\n    });\n\n    // decorate every ResponseElement with metadata about their status code\n    // @ts-ignore\n    this.element.filter(isResponseElement).forEach((value, key) => {\n      const httpStatusCode = cloneDeep(key);\n      if (!this.fieldPatternPredicate(toValue(httpStatusCode))) return;\n      value.setMetaProperty('http-status-code', httpStatusCode);\n    });\n    return result;\n  }\n}\nexport default ResponsesVisitor;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAChC,SAASC,MAAM,EAAEC,KAAK,QAAQ,OAAO;AACrC,SAASC,SAAS,EAAEC,OAAO,QAAQ,0BAA0B;AAC7D,OAAOC,gBAAgB,MAAM,oCAAoC;AACjE,OAAOC,kBAAkB,MAAM,uCAAuC;AACtE,OAAOC,eAAe,MAAM,2BAA2B;AACvD,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,SAASC,kBAAkB,EAAEC,iBAAiB,QAAQ,4BAA4B;AAClF,MAAMC,gBAAgB,SAASX,KAAK,CAACM,kBAAkB,EAAEC,eAAe,CAAC,CAAC;EACxEK,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,OAAO,GAAG,IAAIT,gBAAgB,CAAC,CAAC;IACrC,IAAI,CAACU,mBAAmB,GAAGd,MAAM,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;IACvE,IAAI,CAACe,iCAAiC,GAAG,IAAI;IAC7C,IAAI,CAACC,uBAAuB,GAAGH,OAAO,IAAIN,sBAAsB,CAACM,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;IACtJ,IAAI,CAACI,qBAAqB,GAAGC,KAAK,IAAI,IAAIC,MAAM,CAAC,yBAAyBlB,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAACmB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAACC,IAAI,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC;EAC9H;EACAK,aAAaA,CAACC,aAAa,EAAE;IAC3B,MAAMC,MAAM,GAAGpB,kBAAkB,CAACqB,SAAS,CAACH,aAAa,CAACI,IAAI,CAAC,IAAI,EAAEH,aAAa,CAAC;;IAEnF;IACA;IACA,IAAI,CAACX,OAAO,CAACe,MAAM,CAACpB,kBAAkB,CAAC,CAACqB,OAAO,CAACC,gBAAgB,IAAI;MAClEA,gBAAgB,CAACC,eAAe,CAAC,oBAAoB,EAAE,UAAU,CAAC;IACpE,CAAC,CAAC;;IAEF;IACA;IACA,IAAI,CAAClB,OAAO,CAACe,MAAM,CAACnB,iBAAiB,CAAC,CAACoB,OAAO,CAAC,CAACX,KAAK,EAAEc,GAAG,KAAK;MAC7D,MAAMC,cAAc,GAAG/B,SAAS,CAAC8B,GAAG,CAAC;MACrC,IAAI,CAAC,IAAI,CAACf,qBAAqB,CAACd,OAAO,CAAC8B,cAAc,CAAC,CAAC,EAAE;MAC1Df,KAAK,CAACa,eAAe,CAAC,kBAAkB,EAAEE,cAAc,CAAC;IAC3D,CAAC,CAAC;IACF,OAAOR,MAAM;EACf;AACF;AACA,eAAef,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}