{"ast":null,"code":"import { indexOf } from './utils';\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n *\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n *\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n *\n * ## Examples\n *\n * Example instantiation:\n *\n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *\n * Using mutator methods (which may be used in combination with instantiation config properties):\n *\n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *\n *\n * ## Example use with a new tag for the replacement\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nvar HtmlTag = /** @class */function () {\n  /**\n   * @method constructor\n   * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n   */\n  function HtmlTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\n     * @cfg {String} tagName\n     *\n     * The tag name. Ex: 'a', 'button', etc.\n     *\n     * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toAnchorString}\n     * is executed.\n     */\n    this.tagName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {Object.<String, String>} attrs\n     *\n     * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n     * values are the attribute values.\n     */\n    this.attrs = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @cfg {String} innerHTML\n     *\n     * The inner HTML for the tag.\n     */\n    this.innerHTML = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * @protected\n     * @property {RegExp} whitespaceRegex\n     *\n     * Regular expression used to match whitespace in a string of CSS classes.\n     */\n    this.whitespaceRegex = /\\s+/; // default value just to get the above doc comment in the ES5 output and documentation generator\n    this.tagName = cfg.tagName || '';\n    this.attrs = cfg.attrs || {};\n    this.innerHTML = cfg.innerHtml || cfg.innerHTML || ''; // accept either the camelCased form or the fully capitalized acronym as in the DOM\n  }\n  /**\n   * Sets the tag name that will be used to generate the tag with.\n   *\n   * @param {String} tagName\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setTagName = function (tagName) {\n    this.tagName = tagName;\n    return this;\n  };\n  /**\n   * Retrieves the tag name.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getTagName = function () {\n    return this.tagName || '';\n  };\n  /**\n   * Sets an attribute on the HtmlTag.\n   *\n   * @param {String} attrName The attribute name to set.\n   * @param {String} attrValue The attribute value to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setAttr = function (attrName, attrValue) {\n    var tagAttrs = this.getAttrs();\n    tagAttrs[attrName] = attrValue;\n    return this;\n  };\n  /**\n   * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n   *\n   * @param {String} attrName The attribute name to retrieve.\n   * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n   */\n  HtmlTag.prototype.getAttr = function (attrName) {\n    return this.getAttrs()[attrName];\n  };\n  /**\n   * Sets one or more attributes on the HtmlTag.\n   *\n   * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setAttrs = function (attrs) {\n    Object.assign(this.getAttrs(), attrs);\n    return this;\n  };\n  /**\n   * Retrieves the attributes Object (map) for the HtmlTag.\n   *\n   * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n   */\n  HtmlTag.prototype.getAttrs = function () {\n    return this.attrs || (this.attrs = {});\n  };\n  /**\n   * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setClass = function (cssClass) {\n    return this.setAttr('class', cssClass);\n  };\n  /**\n   * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to add.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.addClass = function (cssClass) {\n    var classAttr = this.getClass(),\n      whitespaceRegex = this.whitespaceRegex,\n      classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n      newClasses = cssClass.split(whitespaceRegex),\n      newClass;\n    while (newClass = newClasses.shift()) {\n      if (indexOf(classes, newClass) === -1) {\n        classes.push(newClass);\n      }\n    }\n    this.getAttrs()['class'] = classes.join(' ');\n    return this;\n  };\n  /**\n   * Convenience method to remove one or more CSS classes from the HtmlTag.\n   *\n   * @param {String} cssClass One or more space-separated CSS classes to remove.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.removeClass = function (cssClass) {\n    var classAttr = this.getClass(),\n      whitespaceRegex = this.whitespaceRegex,\n      classes = !classAttr ? [] : classAttr.split(whitespaceRegex),\n      removeClasses = cssClass.split(whitespaceRegex),\n      removeClass;\n    while (classes.length && (removeClass = removeClasses.shift())) {\n      var idx = indexOf(classes, removeClass);\n      if (idx !== -1) {\n        classes.splice(idx, 1);\n      }\n    }\n    this.getAttrs()['class'] = classes.join(' ');\n    return this;\n  };\n  /**\n   * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n   * there are multiple.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getClass = function () {\n    return this.getAttrs()['class'] || '';\n  };\n  /**\n   * Convenience method to check if the tag has a CSS class or not.\n   *\n   * @param {String} cssClass The CSS class to check for.\n   * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n   */\n  HtmlTag.prototype.hasClass = function (cssClass) {\n    return (' ' + this.getClass() + ' ').indexOf(' ' + cssClass + ' ') !== -1;\n  };\n  /**\n   * Sets the inner HTML for the tag.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setInnerHTML = function (html) {\n    this.innerHTML = html;\n    return this;\n  };\n  /**\n   * Backwards compatibility method name.\n   *\n   * @param {String} html The inner HTML to set.\n   * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n   */\n  HtmlTag.prototype.setInnerHtml = function (html) {\n    return this.setInnerHTML(html);\n  };\n  /**\n   * Retrieves the inner HTML for the tag.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getInnerHTML = function () {\n    return this.innerHTML || '';\n  };\n  /**\n   * Backward compatibility method name.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.getInnerHtml = function () {\n    return this.getInnerHTML();\n  };\n  /**\n   * Override of superclass method used to generate the HTML string for the tag.\n   *\n   * @return {String}\n   */\n  HtmlTag.prototype.toAnchorString = function () {\n    var tagName = this.getTagName(),\n      attrsStr = this.buildAttrsStr();\n    attrsStr = attrsStr ? ' ' + attrsStr : ''; // prepend a space if there are actually attributes\n    return ['<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>'].join('');\n  };\n  /**\n   * Support method for {@link #toAnchorString}, returns the string space-separated key=\"value\" pairs, used to populate\n   * the stringified HtmlTag.\n   *\n   * @protected\n   * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n   */\n  HtmlTag.prototype.buildAttrsStr = function () {\n    if (!this.attrs) return ''; // no `attrs` Object (map) has been set, return empty string\n    var attrs = this.getAttrs(),\n      attrsArr = [];\n    for (var prop in attrs) {\n      if (attrs.hasOwnProperty(prop)) {\n        attrsArr.push(prop + '=\"' + attrs[prop] + '\"');\n      }\n    }\n    return attrsArr.join(' ');\n  };\n  return HtmlTag;\n}();\nexport { HtmlTag };","map":{"version":3,"names":["indexOf","HtmlTag","cfg","tagName","attrs","innerHTML","whitespaceRegex","innerHtml","prototype","setTagName","getTagName","setAttr","attrName","attrValue","tagAttrs","getAttrs","getAttr","setAttrs","Object","assign","setClass","cssClass","addClass","classAttr","getClass","classes","split","newClasses","newClass","shift","push","join","removeClass","removeClasses","length","idx","splice","hasClass","setInnerHTML","html","setInnerHtml","getInnerHTML","getInnerHtml","toAnchorString","attrsStr","buildAttrsStr","attrsArr","prop","hasOwnProperty"],"sources":["../../src/html-tag.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}