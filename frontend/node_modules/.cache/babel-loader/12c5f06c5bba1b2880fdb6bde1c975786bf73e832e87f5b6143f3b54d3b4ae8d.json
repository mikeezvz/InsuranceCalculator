{"ast":null,"code":"import { and, complement } from 'ramda';\n\n/**\n * Returns false if both arguments are truthy; true otherwise.\n *\n * @func nand\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.19.0|v2.19.0}\n * @category Logic\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean} false if both arguments are truesy\n * @example\n *\n * RA.nand(true, true); //=> false\n * RA.nand(false, true); //=> true\n * RA.nand(true, false); //=> true\n * RA.nand(false, false); //=> true\n * RA.nand(1.0, 1.0); //=> false\n * RA.nand(1.0, 0); //=> true\n * RA.nand(0, 1.0); //=> true\n * RA.nand(0, 0); //=> true\n */\nvar nand = complement(and); // eslint-disable-line ramda/complement-simplification\n\nexport default nand;","map":{"version":3,"names":["and","complement","nand"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/nand.js"],"sourcesContent":["import { and, complement } from 'ramda';\n\n/**\n * Returns false if both arguments are truthy; true otherwise.\n *\n * @func nand\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.19.0|v2.19.0}\n * @category Logic\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean} false if both arguments are truesy\n * @example\n *\n * RA.nand(true, true); //=> false\n * RA.nand(false, true); //=> true\n * RA.nand(true, false); //=> true\n * RA.nand(false, false); //=> true\n * RA.nand(1.0, 1.0); //=> false\n * RA.nand(1.0, 0); //=> true\n * RA.nand(0, 1.0); //=> true\n * RA.nand(0, 0); //=> true\n */\nvar nand = complement(and); // eslint-disable-line ramda/complement-simplification\n\nexport default nand;"],"mappings":"AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAGD,UAAU,CAACD,GAAG,CAAC,CAAC,CAAC;;AAE5B,eAAeE,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}