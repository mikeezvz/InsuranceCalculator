{"ast":null,"code":"const negate = require('lodash/negate');\nconst isObject = require('lodash/isObject');\nconst ArrayElement = require('./ArrayElement');\nconst MemberElement = require('./MemberElement');\nconst ObjectSlice = require('../ObjectSlice');\n\n/**\n * @class\n *\n * @param content\n * @param meta\n * @param attributes\n */\nclass ObjectElement extends ArrayElement {\n  constructor(content, meta, attributes) {\n    super(content || [], meta, attributes);\n    this.element = 'object';\n  }\n  primitive() {\n    return 'object';\n  }\n  toValue() {\n    return this.content.reduce((results, el) => {\n      results[el.key.toValue()] = el.value ? el.value.toValue() : undefined;\n      return results;\n    }, {});\n  }\n\n  /**\n   * @param key\n   * @returns {Element}\n   */\n  get(name) {\n    const member = this.getMember(name);\n    if (member) {\n      return member.value;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param key\n   * @returns {MemberElement}\n   */\n  getMember(name) {\n    if (name === undefined) {\n      return undefined;\n    }\n    return this.content.find(element => element.key.toValue() === name);\n  }\n\n  /**\n   * @param key\n   */\n  remove(name) {\n    let removed = null;\n    this.content = this.content.filter(item => {\n      if (item.key.toValue() === name) {\n        removed = item;\n        return false;\n      }\n      return true;\n    });\n    return removed;\n  }\n\n  /**\n   * @param key\n   * @returns {Element}\n   */\n  getKey(name) {\n    const member = this.getMember(name);\n    if (member) {\n      return member.key;\n    }\n    return undefined;\n  }\n\n  /**\n   * Set allows either a key/value pair to be given or an object\n   * If an object is given, each key is set to its respective value\n   */\n  set(keyOrObject, value) {\n    if (isObject(keyOrObject)) {\n      Object.keys(keyOrObject).forEach(objectKey => {\n        this.set(objectKey, keyOrObject[objectKey]);\n      });\n      return this;\n    }\n\n    // Store as key for clarity\n    const key = keyOrObject;\n    const member = this.getMember(key);\n    if (member) {\n      member.value = value;\n    } else {\n      this.content.push(new MemberElement(key, value));\n    }\n    return this;\n  }\n\n  /**\n   */\n  keys() {\n    return this.content.map(item => item.key.toValue());\n  }\n\n  /**\n   */\n  values() {\n    return this.content.map(item => item.value.toValue());\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  hasKey(value) {\n    return this.content.some(member => member.key.equals(value));\n  }\n\n  /**\n   * @returns {array}\n   */\n  items() {\n    return this.content.map(item => [item.key.toValue(), item.value.toValue()]);\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   */\n  map(callback, thisArg) {\n    return this.content.map(item => callback.bind(thisArg)(item.value, item.key, item));\n  }\n\n  /**\n   * Returns an array containing the truthy results of calling the given transformation with each element of this sequence\n   * @param transform - A closure that accepts the value, key and member element of this object as its argument and returns an optional value.\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   * @returns An array of the non-undefined results of calling transform with each element of the array\n   */\n  compactMap(callback, thisArg) {\n    const results = [];\n    this.forEach((value, key, member) => {\n      const result = callback.bind(thisArg)(value, key, member);\n      if (result) {\n        results.push(result);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   *\n   * @returns {ObjectSlice}\n   */\n  filter(callback, thisArg) {\n    return new ObjectSlice(this.content).filter(callback, thisArg);\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   *\n   * @returns {ObjectSlice}\n   *\n   * @memberof ObjectElement.prototype\n   */\n  reject(callback, thisArg) {\n    return this.filter(negate(callback), thisArg);\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   *\n   * @memberof ObjectElement.prototype\n   */\n  forEach(callback, thisArg) {\n    return this.content.forEach(item => callback.bind(thisArg)(item.value, item.key, item));\n  }\n}\nmodule.exports = ObjectElement;","map":{"version":3,"names":["negate","require","isObject","ArrayElement","MemberElement","ObjectSlice","ObjectElement","constructor","content","meta","attributes","element","primitive","toValue","reduce","results","el","key","value","undefined","get","name","member","getMember","find","remove","removed","filter","item","getKey","set","keyOrObject","Object","keys","forEach","objectKey","push","map","values","hasKey","some","equals","items","callback","thisArg","bind","compactMap","result","reject","module","exports"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/minim/lib/primitives/ObjectElement.js"],"sourcesContent":["const negate = require('lodash/negate');\nconst isObject = require('lodash/isObject');\n\nconst ArrayElement = require('./ArrayElement');\nconst MemberElement = require('./MemberElement');\nconst ObjectSlice = require('../ObjectSlice');\n\n/**\n * @class\n *\n * @param content\n * @param meta\n * @param attributes\n */\nclass ObjectElement extends ArrayElement {\n  constructor(content, meta, attributes) {\n    super(content || [], meta, attributes);\n    this.element = 'object';\n  }\n\n  primitive() {\n    return 'object';\n  }\n\n  toValue() {\n    return this.content.reduce((results, el) => {\n      results[el.key.toValue()] = el.value ? el.value.toValue() : undefined;\n      return results;\n    }, {});\n  }\n\n  /**\n   * @param key\n   * @returns {Element}\n   */\n  get(name) {\n    const member = this.getMember(name);\n\n    if (member) {\n      return member.value;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @param key\n   * @returns {MemberElement}\n   */\n  getMember(name) {\n    if (name === undefined) { return undefined; }\n\n    return this.content.find(element => element.key.toValue() === name);\n  }\n\n  /**\n   * @param key\n   */\n  remove(name) {\n    let removed = null;\n\n    this.content = this.content.filter((item) => {\n      if (item.key.toValue() === name) {\n        removed = item;\n        return false;\n      }\n\n      return true;\n    });\n\n    return removed;\n  }\n\n  /**\n   * @param key\n   * @returns {Element}\n   */\n  getKey(name) {\n    const member = this.getMember(name);\n\n    if (member) {\n      return member.key;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Set allows either a key/value pair to be given or an object\n   * If an object is given, each key is set to its respective value\n   */\n  set(keyOrObject, value) {\n    if (isObject(keyOrObject)) {\n      Object.keys(keyOrObject).forEach((objectKey) => {\n        this.set(objectKey, keyOrObject[objectKey]);\n      });\n\n      return this;\n    }\n\n    // Store as key for clarity\n    const key = keyOrObject;\n    const member = this.getMember(key);\n\n    if (member) {\n      member.value = value;\n    } else {\n      this.content.push(new MemberElement(key, value));\n    }\n\n    return this;\n  }\n\n  /**\n   */\n  keys() {\n    return this.content.map(item => item.key.toValue());\n  }\n\n  /**\n   */\n  values() {\n    return this.content.map(item => item.value.toValue());\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  hasKey(value) {\n    return this.content.some(member => member.key.equals(value));\n  }\n\n  /**\n   * @returns {array}\n   */\n  items() {\n    return this.content.map(item => [item.key.toValue(), item.value.toValue()]);\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   */\n  map(callback, thisArg) {\n    return this.content.map(item => callback.bind(thisArg)(item.value, item.key, item));\n  }\n\n  /**\n   * Returns an array containing the truthy results of calling the given transformation with each element of this sequence\n   * @param transform - A closure that accepts the value, key and member element of this object as its argument and returns an optional value.\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   * @returns An array of the non-undefined results of calling transform with each element of the array\n   */\n  compactMap(callback, thisArg) {\n    const results = [];\n\n    this.forEach((value, key, member) => {\n      const result = callback.bind(thisArg)(value, key, member);\n\n      if (result) {\n        results.push(result);\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   *\n   * @returns {ObjectSlice}\n   */\n  filter(callback, thisArg) {\n    return new ObjectSlice(this.content).filter(callback, thisArg);\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   *\n   * @returns {ObjectSlice}\n   *\n   * @memberof ObjectElement.prototype\n   */\n  reject(callback, thisArg) {\n    return this.filter(negate(callback), thisArg);\n  }\n\n  /**\n   * @param callback\n   * @param thisArg - Value to use as this (i.e the reference Object) when executing callback\n   *\n   * @memberof ObjectElement.prototype\n   */\n  forEach(callback, thisArg) {\n    return this.content.forEach(item => callback.bind(thisArg)(item.value, item.key, item));\n  }\n}\n\nmodule.exports = ObjectElement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}