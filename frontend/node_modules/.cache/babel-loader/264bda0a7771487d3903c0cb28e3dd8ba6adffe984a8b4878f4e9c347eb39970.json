{"ast":null,"code":"import { curryN } from 'ramda';\n\n/**\n * Y-combinator\n *\n * The Y combinator is an interesting function which only works with functional languages,\n * showing how recursion can still be done even without any variable or function declarations,\n * only functions and parameters\n *\n * @func Y\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Function\n * @sig (a, ... -> b -> b) -> (a, ... -> b)\n * @param {Function} le Recursive function maker\n * @return {Function}\n * @see {@link http://kestas.kuliukas.com/YCombinatorExplained/|Y combinator explained}\n * @example\n *\n * const makeFact = givenFact => (n) => {\n *   if (n < 2) { return 1 }\n *   return n * givenFact(n - 1);\n * };\n *\n * const factorial = RA.Y(makeFact);\n *\n * factorial(5); //=> 120\n */\n\nvar Y = curryN(1, function (le) {\n  return function (f) {\n    return f(f);\n  }(function (g) {\n    return le(function (x) {\n      return g(g)(x);\n    });\n  });\n});\nexport default Y;","map":{"version":3,"names":["curryN","Y","le","f","g","x"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/Y.js"],"sourcesContent":["import { curryN } from 'ramda';\n\n/**\n * Y-combinator\n *\n * The Y combinator is an interesting function which only works with functional languages,\n * showing how recursion can still be done even without any variable or function declarations,\n * only functions and parameters\n *\n * @func Y\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Function\n * @sig (a, ... -> b -> b) -> (a, ... -> b)\n * @param {Function} le Recursive function maker\n * @return {Function}\n * @see {@link http://kestas.kuliukas.com/YCombinatorExplained/|Y combinator explained}\n * @example\n *\n * const makeFact = givenFact => (n) => {\n *   if (n < 2) { return 1 }\n *   return n * givenFact(n - 1);\n * };\n *\n * const factorial = RA.Y(makeFact);\n *\n * factorial(5); //=> 120\n */\n\nvar Y = curryN(1, function (le) {\n  return function (f) {\n    return f(f);\n  }(function (g) {\n    return le(function (x) {\n      return g(g)(x);\n    });\n  });\n});\nexport default Y;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,CAAC,GAAGD,MAAM,CAAC,CAAC,EAAE,UAAUE,EAAE,EAAE;EAC9B,OAAO,UAAUC,CAAC,EAAE;IAClB,OAAOA,CAAC,CAACA,CAAC,CAAC;EACb,CAAC,CAAC,UAAUC,CAAC,EAAE;IACb,OAAOF,EAAE,CAAC,UAAUG,CAAC,EAAE;MACrB,OAAOD,CAAC,CAACA,CAAC,CAAC,CAACC,CAAC,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAeJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}