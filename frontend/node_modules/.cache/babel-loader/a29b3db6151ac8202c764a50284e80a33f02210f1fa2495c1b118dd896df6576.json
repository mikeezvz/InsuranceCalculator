{"ast":null,"code":"import { curry, has } from 'ramda';\nimport renameKeysWith from './renameKeysWith.js';\nvar valueOrKey = function valueOrKey(keysMap) {\n  return function (key) {\n    if (has(key, keysMap)) {\n      return keysMap[key];\n    }\n    return key;\n  };\n};\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * keys renamed according to the keysMap object as `{oldKey: newKey}`.\n * When some key is not found in the keysMap, then it's passed as-is.\n *\n * Keep in mind that in the case of keys conflict is behaviour undefined and\n * the result may vary between various JS engines!\n *\n * @func renameKeys\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.5.0|v1.5.0}\n * @category Object\n * @sig {a: b} -> {a: *} -> {b: *}\n * @param {!Object} keysMap\n * @param {!Object} obj\n * @return {!Object} New object with renamed keys\n * @see {@link https://github.com/ramda/ramda/wiki/Cookbook#rename-keys-of-an-object|Ramda Cookbook}, {@link RA.renameKeysWith|renameKeysWith}\n * @example\n *\n * const input = { firstName: 'Elisia', age: 22, type: 'human' };\n *\n * RA.renameKeys({ firstName: 'name', type: 'kind', foo: 'bar' })(input);\n * //=> { name: 'Elisia', age: 22, kind: 'human' }\n */\nvar renameKeys = curry(function (keysMap, obj) {\n  return renameKeysWith(valueOrKey(keysMap), obj);\n});\nexport default renameKeys;","map":{"version":3,"names":["curry","has","renameKeysWith","valueOrKey","keysMap","key","renameKeys","obj"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/renameKeys.js"],"sourcesContent":["import { curry, has } from 'ramda';\nimport renameKeysWith from './renameKeysWith.js';\nvar valueOrKey = function valueOrKey(keysMap) {\n  return function (key) {\n    if (has(key, keysMap)) {\n      return keysMap[key];\n    }\n    return key;\n  };\n};\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * keys renamed according to the keysMap object as `{oldKey: newKey}`.\n * When some key is not found in the keysMap, then it's passed as-is.\n *\n * Keep in mind that in the case of keys conflict is behaviour undefined and\n * the result may vary between various JS engines!\n *\n * @func renameKeys\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.5.0|v1.5.0}\n * @category Object\n * @sig {a: b} -> {a: *} -> {b: *}\n * @param {!Object} keysMap\n * @param {!Object} obj\n * @return {!Object} New object with renamed keys\n * @see {@link https://github.com/ramda/ramda/wiki/Cookbook#rename-keys-of-an-object|Ramda Cookbook}, {@link RA.renameKeysWith|renameKeysWith}\n * @example\n *\n * const input = { firstName: 'Elisia', age: 22, type: 'human' };\n *\n * RA.renameKeys({ firstName: 'name', type: 'kind', foo: 'bar' })(input);\n * //=> { name: 'Elisia', age: 22, kind: 'human' }\n */\nvar renameKeys = curry(function (keysMap, obj) {\n  return renameKeysWith(valueOrKey(keysMap), obj);\n});\nexport default renameKeys;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,GAAG,QAAQ,OAAO;AAClC,OAAOC,cAAc,MAAM,qBAAqB;AAChD,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,OAAO,EAAE;EAC5C,OAAO,UAAUC,GAAG,EAAE;IACpB,IAAIJ,GAAG,CAACI,GAAG,EAAED,OAAO,CAAC,EAAE;MACrB,OAAOA,OAAO,CAACC,GAAG,CAAC;IACrB;IACA,OAAOA,GAAG;EACZ,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGN,KAAK,CAAC,UAAUI,OAAO,EAAEG,GAAG,EAAE;EAC7C,OAAOL,cAAc,CAACC,UAAU,CAACC,OAAO,CAAC,EAAEG,GAAG,CAAC;AACjD,CAAC,CAAC;AACF,eAAeD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}