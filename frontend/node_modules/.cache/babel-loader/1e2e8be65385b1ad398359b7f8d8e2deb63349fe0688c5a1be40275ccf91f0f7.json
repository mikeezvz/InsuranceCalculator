{"ast":null,"code":"import { invoker } from 'ramda';\n\n/**\n * Composable shortcut for `Promise.then` that allows for success and failure callbacks.\n * The thenCatchP function returns a Promise. It takes three arguments: a callback function for the success of the Promise,\n * a callback function for the failure of the Promise, and the promise instance itself.\n *\n * @func thenCatchP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @category Function\n * @sig (a -> b) -> (c -> d) -> Promise a -> Promise b | d\n * @param {Function} onFulfilled A Function called if the Promise is fulfilled. This function has one argument, the fulfillment value\n * @param {Function} onRejected A Function called if the Promise is rejected. This function has one argument, the error\n * @param {Promise} promise Any Promise or Thenable object\n * @return {Promise}\n * @see {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n * @example\n *\n * const promise = Promise.resolve(1);\n * const add1 = x => x + 1;\n *\n * RA.thenCatchP(add1, console.error, promise); // => Promise(2)\n */\nexport var thenCatchP = invoker(2, 'then');\nexport default thenCatchP;","map":{"version":3,"names":["invoker","thenCatchP"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/thenCatchP.js"],"sourcesContent":["import { invoker } from 'ramda';\n\n/**\n * Composable shortcut for `Promise.then` that allows for success and failure callbacks.\n * The thenCatchP function returns a Promise. It takes three arguments: a callback function for the success of the Promise,\n * a callback function for the failure of the Promise, and the promise instance itself.\n *\n * @func thenCatchP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @category Function\n * @sig (a -> b) -> (c -> d) -> Promise a -> Promise b | d\n * @param {Function} onFulfilled A Function called if the Promise is fulfilled. This function has one argument, the fulfillment value\n * @param {Function} onRejected A Function called if the Promise is rejected. This function has one argument, the error\n * @param {Promise} promise Any Promise or Thenable object\n * @return {Promise}\n * @see {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n * @example\n *\n * const promise = Promise.resolve(1);\n * const add1 = x => x + 1;\n *\n * RA.thenCatchP(add1, console.error, promise); // => Promise(2)\n */\nexport var thenCatchP = invoker(2, 'then');\nexport default thenCatchP;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,UAAU,GAAGD,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;AAC1C,eAAeC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}