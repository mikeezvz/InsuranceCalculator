{"ast":null,"code":"import { last, defaultTo, groupBy } from 'ramda';\nimport { toValue, cloneDeep } from '@swagger-api/apidom-core';\nimport NormalizeStorage from \"./normalize-header-examples/NormalizeStorage.mjs\";\nconst removeSpaces = operationId => {\n  return operationId.replace(/\\s/g, '');\n};\nconst replaceSpecialCharsWithUnderscore = operationId => {\n  return operationId.replace(/\\W/gi, '_');\n};\nconst createNormalizedOperationId = (path, method) => {\n  const normalizedMethod = replaceSpecialCharsWithUnderscore(removeSpaces(method.toLowerCase()));\n  const normalizedPath = replaceSpecialCharsWithUnderscore(removeSpaces(path));\n  return `${normalizedMethod}${normalizedPath}`;\n};\nconst normalizeOperationId = (operationId, path, method) => {\n  const withoutSpaces = removeSpaces(operationId);\n  if (withoutSpaces.length > 0) {\n    return replaceSpecialCharsWithUnderscore(withoutSpaces);\n  }\n  return createNormalizedOperationId(path, method);\n};\n\n/**\n * Normalization of Operation.operationId field.\n *\n * This normalization is not guided by OpenAPI 3.1 specification.\n *\n * Existing Operation.operationId fields are normalized into snake case form.\n *\n * Operation Objects, that do not define operationId field, are left untouched.\n *\n * Original operationId is stored in meta and as new `__originalOperationId` field.\n *\n * This plugin also guarantees the uniqueness of all defined Operation.operationId fields,\n * and make sure Link.operationId fields are pointing to correct and normalized Operation.operationId fields.\n *\n * NOTE: this plugin is idempotent\n */\n\n/* eslint-disable no-param-reassign */\nconst plugin = ({\n  storageField = 'x-normalized',\n  operationIdNormalizer = normalizeOperationId\n} = {}) => toolbox => {\n  const {\n    predicates,\n    ancestorLineageToJSONPointer,\n    namespace\n  } = toolbox;\n  const pathTemplates = [];\n  const normalizedOperations = [];\n  const links = [];\n  let storage;\n  return {\n    visitor: {\n      OpenApi3_1Element: {\n        enter(element) {\n          storage = new NormalizeStorage(element, storageField, 'operation-ids');\n        },\n        leave() {\n          // group normalized operations by normalized operationId\n          const normalizedOperationGroups = groupBy(operationElement => {\n            return toValue(operationElement.operationId);\n          }, normalizedOperations);\n\n          // append incremental numerical suffixes to identical operationIds\n          Object.entries(normalizedOperationGroups).forEach(([normalizedOperationId, operationElements]) => {\n            if (!Array.isArray(operationElements)) return;\n            if (operationElements.length <= 1) return;\n            operationElements.forEach((operationElement, index) => {\n              const indexedNormalizedOperationId = `${normalizedOperationId}${index + 1}`;\n              // @ts-ignore\n              operationElement.operationId = new namespace.elements.String(indexedNormalizedOperationId);\n            });\n          });\n\n          // rectify possibly broken Link.operationId fields\n          links.forEach(linkElement => {\n            if (typeof linkElement.operationId === 'undefined') return;\n            const linkOperationId = String(toValue(linkElement.operationId));\n            const operationElement = normalizedOperations.find(normalizedOperationElement => {\n              const originalOperationId = toValue(normalizedOperationElement.meta.get('originalOperationId'));\n              return originalOperationId === linkOperationId;\n            });\n\n            // Link Object doesn't need to be rectified\n            if (typeof operationElement === 'undefined') return;\n            linkElement.operationId = cloneDeep.safe(operationElement.operationId);\n            linkElement.meta.set('originalOperationId', linkOperationId);\n            linkElement.set('__originalOperationId', linkOperationId);\n          });\n\n          // cleanup the references\n          normalizedOperations.length = 0;\n          links.length = 0;\n          storage = undefined;\n        }\n      },\n      PathItemElement: {\n        enter(pathItemElement) {\n          // `path` meta may not be always available, e.g. in Callback Object or Components Object\n          const pathTemplate = defaultTo('path', toValue(pathItemElement.meta.get('path')));\n          pathTemplates.push(pathTemplate);\n        },\n        leave() {\n          pathTemplates.pop();\n        }\n      },\n      OperationElement: {\n        enter(operationElement, key, parent, path, ancestors) {\n          // operationId field is undefined, needs no normalization\n          if (typeof operationElement.operationId === 'undefined') return;\n          const operationJSONPointer = ancestorLineageToJSONPointer([...ancestors, parent, operationElement]);\n\n          // skip visiting this Operation Object if it's already normalized\n          if (storage.includes(operationJSONPointer)) {\n            return;\n          }\n\n          // cast operationId to string type\n          const originalOperationId = String(toValue(operationElement.operationId));\n          // perform operationId normalization\n          const pathTemplate = last(pathTemplates);\n          // `http-method` meta may not be always available, e.g. in Callback Object or Components Object\n          const method = defaultTo('method', toValue(operationElement.meta.get('http-method')));\n          const normalizedOperationId = operationIdNormalizer(originalOperationId, pathTemplate, method);\n\n          // normalization is not necessary\n          if (originalOperationId === normalizedOperationId) return;\n\n          // @ts-ignore\n          operationElement.operationId = new namespace.elements.String(normalizedOperationId);\n          operationElement.set('__originalOperationId', originalOperationId);\n          operationElement.meta.set('originalOperationId', originalOperationId);\n          normalizedOperations.push(operationElement);\n          storage.append(operationJSONPointer);\n        }\n      },\n      LinkElement: {\n        leave(linkElement) {\n          // make sure this Link elements doesn't come from base namespace\n          if (!predicates.isLinkElement(linkElement)) return;\n          // ignore Link Objects with undefined operationId\n          if (typeof linkElement.operationId === 'undefined') return;\n          links.push(linkElement);\n        }\n      }\n    }\n  };\n};\n/* eslint-enable */\n\nexport default plugin;","map":{"version":3,"names":["last","defaultTo","groupBy","toValue","cloneDeep","NormalizeStorage","removeSpaces","operationId","replace","replaceSpecialCharsWithUnderscore","createNormalizedOperationId","path","method","normalizedMethod","toLowerCase","normalizedPath","normalizeOperationId","withoutSpaces","length","plugin","storageField","operationIdNormalizer","toolbox","predicates","ancestorLineageToJSONPointer","namespace","pathTemplates","normalizedOperations","links","storage","visitor","OpenApi3_1Element","enter","element","leave","normalizedOperationGroups","operationElement","Object","entries","forEach","normalizedOperationId","operationElements","Array","isArray","index","indexedNormalizedOperationId","elements","String","linkElement","linkOperationId","find","normalizedOperationElement","originalOperationId","meta","get","safe","set","undefined","PathItemElement","pathItemElement","pathTemplate","push","pop","OperationElement","key","parent","ancestors","operationJSONPointer","includes","append","LinkElement","isLinkElement"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-1/es/refractor/plugins/normalize-operation-ids.mjs"],"sourcesContent":["import { last, defaultTo, groupBy } from 'ramda';\nimport { toValue, cloneDeep } from '@swagger-api/apidom-core';\nimport NormalizeStorage from \"./normalize-header-examples/NormalizeStorage.mjs\";\nconst removeSpaces = operationId => {\n  return operationId.replace(/\\s/g, '');\n};\nconst replaceSpecialCharsWithUnderscore = operationId => {\n  return operationId.replace(/\\W/gi, '_');\n};\nconst createNormalizedOperationId = (path, method) => {\n  const normalizedMethod = replaceSpecialCharsWithUnderscore(removeSpaces(method.toLowerCase()));\n  const normalizedPath = replaceSpecialCharsWithUnderscore(removeSpaces(path));\n  return `${normalizedMethod}${normalizedPath}`;\n};\nconst normalizeOperationId = (operationId, path, method) => {\n  const withoutSpaces = removeSpaces(operationId);\n  if (withoutSpaces.length > 0) {\n    return replaceSpecialCharsWithUnderscore(withoutSpaces);\n  }\n  return createNormalizedOperationId(path, method);\n};\n\n/**\n * Normalization of Operation.operationId field.\n *\n * This normalization is not guided by OpenAPI 3.1 specification.\n *\n * Existing Operation.operationId fields are normalized into snake case form.\n *\n * Operation Objects, that do not define operationId field, are left untouched.\n *\n * Original operationId is stored in meta and as new `__originalOperationId` field.\n *\n * This plugin also guarantees the uniqueness of all defined Operation.operationId fields,\n * and make sure Link.operationId fields are pointing to correct and normalized Operation.operationId fields.\n *\n * NOTE: this plugin is idempotent\n */\n\n/* eslint-disable no-param-reassign */\nconst plugin = ({\n  storageField = 'x-normalized',\n  operationIdNormalizer = normalizeOperationId\n} = {}) => toolbox => {\n  const {\n    predicates,\n    ancestorLineageToJSONPointer,\n    namespace\n  } = toolbox;\n  const pathTemplates = [];\n  const normalizedOperations = [];\n  const links = [];\n  let storage;\n  return {\n    visitor: {\n      OpenApi3_1Element: {\n        enter(element) {\n          storage = new NormalizeStorage(element, storageField, 'operation-ids');\n        },\n        leave() {\n          // group normalized operations by normalized operationId\n          const normalizedOperationGroups = groupBy(operationElement => {\n            return toValue(operationElement.operationId);\n          }, normalizedOperations);\n\n          // append incremental numerical suffixes to identical operationIds\n          Object.entries(normalizedOperationGroups).forEach(([normalizedOperationId, operationElements]) => {\n            if (!Array.isArray(operationElements)) return;\n            if (operationElements.length <= 1) return;\n            operationElements.forEach((operationElement, index) => {\n              const indexedNormalizedOperationId = `${normalizedOperationId}${index + 1}`;\n              // @ts-ignore\n              operationElement.operationId = new namespace.elements.String(indexedNormalizedOperationId);\n            });\n          });\n\n          // rectify possibly broken Link.operationId fields\n          links.forEach(linkElement => {\n            if (typeof linkElement.operationId === 'undefined') return;\n            const linkOperationId = String(toValue(linkElement.operationId));\n            const operationElement = normalizedOperations.find(normalizedOperationElement => {\n              const originalOperationId = toValue(normalizedOperationElement.meta.get('originalOperationId'));\n              return originalOperationId === linkOperationId;\n            });\n\n            // Link Object doesn't need to be rectified\n            if (typeof operationElement === 'undefined') return;\n            linkElement.operationId = cloneDeep.safe(operationElement.operationId);\n            linkElement.meta.set('originalOperationId', linkOperationId);\n            linkElement.set('__originalOperationId', linkOperationId);\n          });\n\n          // cleanup the references\n          normalizedOperations.length = 0;\n          links.length = 0;\n          storage = undefined;\n        }\n      },\n      PathItemElement: {\n        enter(pathItemElement) {\n          // `path` meta may not be always available, e.g. in Callback Object or Components Object\n          const pathTemplate = defaultTo('path', toValue(pathItemElement.meta.get('path')));\n          pathTemplates.push(pathTemplate);\n        },\n        leave() {\n          pathTemplates.pop();\n        }\n      },\n      OperationElement: {\n        enter(operationElement, key, parent, path, ancestors) {\n          // operationId field is undefined, needs no normalization\n          if (typeof operationElement.operationId === 'undefined') return;\n          const operationJSONPointer = ancestorLineageToJSONPointer([...ancestors, parent, operationElement]);\n\n          // skip visiting this Operation Object if it's already normalized\n          if (storage.includes(operationJSONPointer)) {\n            return;\n          }\n\n          // cast operationId to string type\n          const originalOperationId = String(toValue(operationElement.operationId));\n          // perform operationId normalization\n          const pathTemplate = last(pathTemplates);\n          // `http-method` meta may not be always available, e.g. in Callback Object or Components Object\n          const method = defaultTo('method', toValue(operationElement.meta.get('http-method')));\n          const normalizedOperationId = operationIdNormalizer(originalOperationId, pathTemplate, method);\n\n          // normalization is not necessary\n          if (originalOperationId === normalizedOperationId) return;\n\n          // @ts-ignore\n          operationElement.operationId = new namespace.elements.String(normalizedOperationId);\n          operationElement.set('__originalOperationId', originalOperationId);\n          operationElement.meta.set('originalOperationId', originalOperationId);\n          normalizedOperations.push(operationElement);\n          storage.append(operationJSONPointer);\n        }\n      },\n      LinkElement: {\n        leave(linkElement) {\n          // make sure this Link elements doesn't come from base namespace\n          if (!predicates.isLinkElement(linkElement)) return;\n          // ignore Link Objects with undefined operationId\n          if (typeof linkElement.operationId === 'undefined') return;\n          links.push(linkElement);\n        }\n      }\n    }\n  };\n};\n/* eslint-enable */\n\nexport default plugin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}