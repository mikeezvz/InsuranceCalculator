{"ast":null,"code":"import { propEq, complement } from 'ramda';\n\n/**\n * Returns true if the specified object property is not equal,\n * in R.equals terms, to the given value; false otherwise.\n *\n * @func propNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Relation\n * @sig  a -> String -> Object -> Boolean\n * @param {a} val The value to compare to\n * @param {String} name The property to pick\n * @param {Object} object The object, that presumably contains value under the property\n * @return {boolean} Comparison result\n * @see {@link http://ramdajs.com/docs/#propEq|R.propEq}\n * @example\n *\n * const abby = { name: 'Abby', age: 7, hair: 'blond' };\n * const fred = { name: 'Fred', age: 12, hair: 'brown' };\n * const rusty = { name: 'Rusty', age: 10, hair: 'brown' };\n * const alois = { name: 'Alois', age: 15, disposition: 'surly' };\n * const kids = [abby, fred, rusty, alois];\n * const hasNotBrownHair = RA.propNotEq('brown', 'hair');\n *\n * R.filter(hasNotBrownHair, kids); //=> [abby, alois]\n */\nvar propNotEq = complement(propEq);\nexport default propNotEq;","map":{"version":3,"names":["propEq","complement","propNotEq"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/propNotEq.js"],"sourcesContent":["import { propEq, complement } from 'ramda';\n\n/**\n * Returns true if the specified object property is not equal,\n * in R.equals terms, to the given value; false otherwise.\n *\n * @func propNotEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Relation\n * @sig  a -> String -> Object -> Boolean\n * @param {a} val The value to compare to\n * @param {String} name The property to pick\n * @param {Object} object The object, that presumably contains value under the property\n * @return {boolean} Comparison result\n * @see {@link http://ramdajs.com/docs/#propEq|R.propEq}\n * @example\n *\n * const abby = { name: 'Abby', age: 7, hair: 'blond' };\n * const fred = { name: 'Fred', age: 12, hair: 'brown' };\n * const rusty = { name: 'Rusty', age: 10, hair: 'brown' };\n * const alois = { name: 'Alois', age: 15, disposition: 'surly' };\n * const kids = [abby, fred, rusty, alois];\n * const hasNotBrownHair = RA.propNotEq('brown', 'hair');\n *\n * R.filter(hasNotBrownHair, kids); //=> [abby, alois]\n */\nvar propNotEq = complement(propEq);\nexport default propNotEq;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,QAAQ,OAAO;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGD,UAAU,CAACD,MAAM,CAAC;AAClC,eAAeE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}