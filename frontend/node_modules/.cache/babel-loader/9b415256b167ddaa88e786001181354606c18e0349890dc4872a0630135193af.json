{"ast":null,"code":"import { both, lte, flip, curryN } from 'ramda';\nimport isNumber from './isNumber.js';\n\n/**\n * Checks if value is a non-positive `Number` primitive or object. This includes all negative\n * numbers and zero.\n *\n * @func isNonPositive\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.6.0|v2.6.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegative|isNegative}, {@link RA.isNonNegative|isNonNegative}\n * @example\n *\n * RA.isNonPositive(0); // => true\n * RA.isNonPositive(-1); // => true\n * RA.isNonPositive(-Infinity); // => true\n * RA.isNonPositive(Number.MIN_VALUE); // => true\n *\n * RA.isNonPositive(Infinity); // => false\n * RA.isNonPositive(Number.MAX_VALUE); // => false\n * RA.isNonPositive(NaN); // => false\n */\nvar isNonPositive = curryN(1, both(isNumber, flip(lte)(0)));\nexport default isNonPositive;","map":{"version":3,"names":["both","lte","flip","curryN","isNumber","isNonPositive"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNonPositive.js"],"sourcesContent":["import { both, lte, flip, curryN } from 'ramda';\nimport isNumber from './isNumber.js';\n\n/**\n * Checks if value is a non-positive `Number` primitive or object. This includes all negative\n * numbers and zero.\n *\n * @func isNonPositive\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.6.0|v2.6.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegative|isNegative}, {@link RA.isNonNegative|isNonNegative}\n * @example\n *\n * RA.isNonPositive(0); // => true\n * RA.isNonPositive(-1); // => true\n * RA.isNonPositive(-Infinity); // => true\n * RA.isNonPositive(Number.MIN_VALUE); // => true\n *\n * RA.isNonPositive(Infinity); // => false\n * RA.isNonPositive(Number.MAX_VALUE); // => false\n * RA.isNonPositive(NaN); // => false\n */\nvar isNonPositive = curryN(1, both(isNumber, flip(lte)(0)));\nexport default isNonPositive;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAGF,MAAM,CAAC,CAAC,EAAEH,IAAI,CAACI,QAAQ,EAAEF,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,eAAeI,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}