{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isString from \"./internal/_isString.js\";\nimport clone from \"./clone.js\";\nvar swapObject = function (indexA, indexB, o) {\n  var copy = clone(o);\n  var properties = Object.getOwnPropertyNames(copy);\n  if (properties.includes(indexA) && properties.includes(indexB)) {\n    var tmp = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = tmp;\n  }\n  return copy;\n};\nvar swapList = function (indexA, indexB, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveIndexA = indexA < 0 ? length + indexA : indexA;\n  var positiveIndexB = indexB < 0 ? length + indexB : indexB;\n  var positiveMin = Math.min(positiveIndexA, positiveIndexB);\n  var positiveMax = Math.max(positiveIndexA, positiveIndexB);\n  if (positiveIndexA < 0 || positiveIndexA > length) {\n    return result;\n  }\n  if (positiveIndexB < 0 || positiveIndexB > length) {\n    return result;\n  }\n  if (positiveIndexA === positiveIndexB) {\n    return result;\n  }\n  result = [].concat(result.slice(0, positiveMin)).concat([result[positiveMax]]).concat(result.slice(positiveMin + 1, positiveMax)).concat([result[positiveMin]]).concat(result.slice(positiveMax + 1, length));\n  return result;\n};\nvar swapString = function (indexA, indexB, s) {\n  var result = swapList(indexA, indexB, s);\n  return _isArray(result) ? result.join('') : result;\n};\n\n/**\n * Swap an item, at index `indexA` with another item, at index `indexB`, in an object or a list of elements.\n * A new result will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number|string|Object} indexA The first index\n * @param {Number|string|Object} indexB The second index\n * @param {Array|Object} o Either the object or list which will serve to realise the swap\n * @return {Array|Object} The new object or list reordered\n * @example\n *\n *      R.swap(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['c', 'b', 'a', 'd', 'e', 'f']\n *      R.swap(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'b', 'c', 'd', 'e', 'a']\n *      R.swap('a', 'b', {a: 1, b: 2}); //=> {a: 2, b: 1}\n *      R.swap(0, 2, 'foo'); //=> 'oof'\n */\nvar swap = /*#__PURE__*/_curry3(function (indexA, indexB, o) {\n  if (_isArray(o)) {\n    return swapList(indexA, indexB, o);\n  } else if (_isString(o)) {\n    return swapString(indexA, indexB, o);\n  } else {\n    return swapObject(indexA, indexB, o);\n  }\n});\nexport default swap;","map":{"version":3,"names":["_curry3","_isArray","_isString","clone","swapObject","indexA","indexB","o","copy","properties","Object","getOwnPropertyNames","includes","tmp","swapList","list","length","result","slice","positiveIndexA","positiveIndexB","positiveMin","Math","min","positiveMax","max","concat","swapString","s","join","swap"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/swap.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isString from \"./internal/_isString.js\";\nimport clone from \"./clone.js\";\nvar swapObject = function (indexA, indexB, o) {\n  var copy = clone(o);\n  var properties = Object.getOwnPropertyNames(copy);\n  if (properties.includes(indexA) && properties.includes(indexB)) {\n    var tmp = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = tmp;\n  }\n  return copy;\n};\nvar swapList = function (indexA, indexB, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveIndexA = indexA < 0 ? length + indexA : indexA;\n  var positiveIndexB = indexB < 0 ? length + indexB : indexB;\n  var positiveMin = Math.min(positiveIndexA, positiveIndexB);\n  var positiveMax = Math.max(positiveIndexA, positiveIndexB);\n  if (positiveIndexA < 0 || positiveIndexA > length) {\n    return result;\n  }\n  if (positiveIndexB < 0 || positiveIndexB > length) {\n    return result;\n  }\n  if (positiveIndexA === positiveIndexB) {\n    return result;\n  }\n  result = [].concat(result.slice(0, positiveMin)).concat([result[positiveMax]]).concat(result.slice(positiveMin + 1, positiveMax)).concat([result[positiveMin]]).concat(result.slice(positiveMax + 1, length));\n  return result;\n};\nvar swapString = function (indexA, indexB, s) {\n  var result = swapList(indexA, indexB, s);\n  return _isArray(result) ? result.join('') : result;\n};\n\n/**\n * Swap an item, at index `indexA` with another item, at index `indexB`, in an object or a list of elements.\n * A new result will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number|string|Object} indexA The first index\n * @param {Number|string|Object} indexB The second index\n * @param {Array|Object} o Either the object or list which will serve to realise the swap\n * @return {Array|Object} The new object or list reordered\n * @example\n *\n *      R.swap(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['c', 'b', 'a', 'd', 'e', 'f']\n *      R.swap(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'b', 'c', 'd', 'e', 'a']\n *      R.swap('a', 'b', {a: 1, b: 2}); //=> {a: 2, b: 1}\n *      R.swap(0, 2, 'foo'); //=> 'oof'\n */\nvar swap = /*#__PURE__*/_curry3(function (indexA, indexB, o) {\n  if (_isArray(o)) {\n    return swapList(indexA, indexB, o);\n  } else if (_isString(o)) {\n    return swapString(indexA, indexB, o);\n  } else {\n    return swapObject(indexA, indexB, o);\n  }\n});\nexport default swap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}