{"ast":null,"code":"import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Predicate for determining if a provided value is an instance of a Set.\n *\n * @func isSet\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isMap|isMap}}\n * @example\n *\n * RA.isSet(new Map()); //=> false\n * RA.isSet(new Set()); //=> true\n * RA.isSet(new Set([1,2]); //=> true\n * RA.isSet(new Object()); //=> false\n */\n\nvar isSet = curryN(1, pipe(type, identical('Set')));\nexport default isSet;","map":{"version":3,"names":["type","identical","pipe","curryN","isSet"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isSet.js"],"sourcesContent":["import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Predicate for determining if a provided value is an instance of a Set.\n *\n * @func isSet\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isMap|isMap}}\n * @example\n *\n * RA.isSet(new Map()); //=> false\n * RA.isSet(new Set()); //=> true\n * RA.isSet(new Set([1,2]); //=> true\n * RA.isSet(new Object()); //=> false\n */\n\nvar isSet = curryN(1, pipe(type, identical('Set')));\nexport default isSet;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,QAAQ,OAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GAAGD,MAAM,CAAC,CAAC,EAAED,IAAI,CAACF,IAAI,EAAEC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AACnD,eAAeG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}