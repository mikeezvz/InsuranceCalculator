{"ast":null,"code":"import { view, defaultTo, curryN } from 'ramda';\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n * Returns the defaultValue if \"view\" is null, undefined or NaN; otherwise the \"view\" is returned.\n *\n * @func viewOr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Object\n * @typedef Lens s b = Functor f => (b -> f b) -> s -> f s\n * @sig a -> Lens s b -> s -> b | a\n * @see {@link http://ramdajs.com/docs/#view|R.view}\n * @param {*} defaultValue The default value\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @returns {*} \"view\" or defaultValue\n *\n * @example\n *\n * RA.viewOr('N/A', R.lensProp('x'), {}); // => 'N/A'\n * RA.viewOr('N/A', R.lensProp('x'), { x: 1 }); // => 1\n * RA.viewOr('some', R.lensProp('y'), { y: null }); // => 'some'\n * RA.viewOr('some', R.lensProp('y'), { y: false }); // => false\n */\n\nvar viewOr = curryN(3, function (defaultValue, lens, data) {\n  return defaultTo(defaultValue, view(lens, data));\n});\nexport default viewOr;","map":{"version":3,"names":["view","defaultTo","curryN","viewOr","defaultValue","lens","data"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/viewOr.js"],"sourcesContent":["import { view, defaultTo, curryN } from 'ramda';\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n * Returns the defaultValue if \"view\" is null, undefined or NaN; otherwise the \"view\" is returned.\n *\n * @func viewOr\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Object\n * @typedef Lens s b = Functor f => (b -> f b) -> s -> f s\n * @sig a -> Lens s b -> s -> b | a\n * @see {@link http://ramdajs.com/docs/#view|R.view}\n * @param {*} defaultValue The default value\n * @param {Function} lens Van Laarhoven lens\n * @param {*} data The data structure\n * @returns {*} \"view\" or defaultValue\n *\n * @example\n *\n * RA.viewOr('N/A', R.lensProp('x'), {}); // => 'N/A'\n * RA.viewOr('N/A', R.lensProp('x'), { x: 1 }); // => 1\n * RA.viewOr('some', R.lensProp('y'), { y: null }); // => 'some'\n * RA.viewOr('some', R.lensProp('y'), { y: false }); // => false\n */\n\nvar viewOr = curryN(3, function (defaultValue, lens, data) {\n  return defaultTo(defaultValue, view(lens, data));\n});\nexport default viewOr;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGD,MAAM,CAAC,CAAC,EAAE,UAAUE,YAAY,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACzD,OAAOL,SAAS,CAACG,YAAY,EAAEJ,IAAI,CAACK,IAAI,EAAEC,IAAI,CAAC,CAAC;AAClD,CAAC,CAAC;AACF,eAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}