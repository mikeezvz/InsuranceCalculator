{"ast":null,"code":"import { apply, curryN, fromPairs, map, pipe, zip } from 'ramda';\n\n/**\n * Creates a new object out of a list of keys and a list of values by applying the function\n * to each equally-positioned pair in the lists.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n *\n * @func zipObjWith\n * @memberOf RA\n * @category Object\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig (b, a) -> [k, v] -> [a] -> [b] -> { k: v }\n * @param {Function} fn The function to transform each value-key pair\n * @param {Array} keys Array to transform into the properties on the output object\n * @param {Array} values Array to transform into the values on the output object\n * @return {Object}  The object made by pairing up and transforming same-indexed elements of `keys` and `values`.\n * @see {@link https://ramdajs.com/docs/#zipObj|zipObj}, {@link RA.unzipObjWith|unzipObjWith}\n * @example\n *\n * RA.zipObjWith((value, key) => [key, `${key}${value + 1}`]), ['a', 'b', 'c'], [1, 2, 3]);\n *  // => { a: 'a2', b: 'b3', c: 'c4' }\n */\nvar zipObjWith = curryN(3, function (fn, keys, values) {\n  return pipe(zip, map(apply(fn)), fromPairs)(values, keys);\n});\nexport default zipObjWith;","map":{"version":3,"names":["apply","curryN","fromPairs","map","pipe","zip","zipObjWith","fn","keys","values"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/zipObjWith.js"],"sourcesContent":["import { apply, curryN, fromPairs, map, pipe, zip } from 'ramda';\n\n/**\n * Creates a new object out of a list of keys and a list of values by applying the function\n * to each equally-positioned pair in the lists.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n *\n * @func zipObjWith\n * @memberOf RA\n * @category Object\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @sig (b, a) -> [k, v] -> [a] -> [b] -> { k: v }\n * @param {Function} fn The function to transform each value-key pair\n * @param {Array} keys Array to transform into the properties on the output object\n * @param {Array} values Array to transform into the values on the output object\n * @return {Object}  The object made by pairing up and transforming same-indexed elements of `keys` and `values`.\n * @see {@link https://ramdajs.com/docs/#zipObj|zipObj}, {@link RA.unzipObjWith|unzipObjWith}\n * @example\n *\n * RA.zipObjWith((value, key) => [key, `${key}${value + 1}`]), ['a', 'b', 'c'], [1, 2, 3]);\n *  // => { a: 'a2', b: 'b3', c: 'c4' }\n */\nvar zipObjWith = curryN(3, function (fn, keys, values) {\n  return pipe(zip, map(apply(fn)), fromPairs)(values, keys);\n});\nexport default zipObjWith;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,QAAQ,OAAO;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGL,MAAM,CAAC,CAAC,EAAE,UAAUM,EAAE,EAAEC,IAAI,EAAEC,MAAM,EAAE;EACrD,OAAOL,IAAI,CAACC,GAAG,EAAEF,GAAG,CAACH,KAAK,CAACO,EAAE,CAAC,CAAC,EAAEL,SAAS,CAAC,CAACO,MAAM,EAAED,IAAI,CAAC;AAC3D,CAAC,CAAC;AACF,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}