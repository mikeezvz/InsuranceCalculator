{"ast":null,"code":"\"use strict\";\n\n// NOTE: don't construct errors here or they'll have the wrong stack trace.\n// NOTE: don't make custom error class; the JS engines use `SyntaxError`\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.errorMessages = exports.ErrorType = void 0;\n/**\n * Keys for possible error messages used by `unraw`.\n * Note: These do _not_ map to actual error object types. All errors thrown\n * are `SyntaxError`.\n */\n// Don't use const enum or JS users won't be able to access the enum values\nvar ErrorType;\n(function (ErrorType) {\n  /**\n   * Thrown when a badly formed Unicode escape sequence is found. Possible\n   * reasons include the code being too short (`\"\\u25\"`) or having invalid\n   * characters (`\"\\u2$A5\"`).\n   */\n  ErrorType[\"MalformedUnicode\"] = \"MALFORMED_UNICODE\";\n  /**\n   * Thrown when a badly formed hexadecimal escape sequence is found. Possible\n   * reasons include the code being too short (`\"\\x2\"`) or having invalid\n   * characters (`\"\\x2$\"`).\n   */\n  ErrorType[\"MalformedHexadecimal\"] = \"MALFORMED_HEXADECIMAL\";\n  /**\n   * Thrown when a Unicode code point escape sequence has too high of a code\n   * point. The maximum code point allowed is `\\u{10FFFF}`, so `\\u{110000}` and\n   * higher will throw this error.\n   */\n  ErrorType[\"CodePointLimit\"] = \"CODE_POINT_LIMIT\";\n  /**\n   * Thrown when an octal escape sequences is encountered and `allowOctals` is\n   * `false`. For example, `unraw(\"\\234\", false)`.\n   */\n  ErrorType[\"OctalDeprecation\"] = \"OCTAL_DEPRECATION\";\n  /**\n   * Thrown only when a single backslash is found at the end of a string. For\n   * example, `\"\\\\\"` or `\"test\\\\x24\\\\\"`.\n   */\n  ErrorType[\"EndOfString\"] = \"END_OF_STRING\";\n})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));\n/** Map of error message names to the full text of the message. */\nexports.errorMessages = new Map([[ErrorType.MalformedUnicode, \"malformed Unicode character escape sequence\"], [ErrorType.MalformedHexadecimal, \"malformed hexadecimal character escape sequence\"], [ErrorType.CodePointLimit, \"Unicode codepoint must not be greater than 0x10FFFF in escape sequence\"], [ErrorType.OctalDeprecation, '\"0\"-prefixed octal literals and octal escape sequences are deprecated; ' + 'for octal literals use the \"0o\" prefix instead'], [ErrorType.EndOfString, \"malformed escape sequence at end of string\"]]);","map":{"version":3,"names":["Object","defineProperty","exports","value","errorMessages","ErrorType","Map","MalformedUnicode","MalformedHexadecimal","CodePointLimit","OctalDeprecation","EndOfString"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/unraw/dist/errors.js"],"sourcesContent":["\"use strict\";\n// NOTE: don't construct errors here or they'll have the wrong stack trace.\n// NOTE: don't make custom error class; the JS engines use `SyntaxError`\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.errorMessages = exports.ErrorType = void 0;\n/**\n * Keys for possible error messages used by `unraw`.\n * Note: These do _not_ map to actual error object types. All errors thrown\n * are `SyntaxError`.\n */\n// Don't use const enum or JS users won't be able to access the enum values\nvar ErrorType;\n(function (ErrorType) {\n    /**\n     * Thrown when a badly formed Unicode escape sequence is found. Possible\n     * reasons include the code being too short (`\"\\u25\"`) or having invalid\n     * characters (`\"\\u2$A5\"`).\n     */\n    ErrorType[\"MalformedUnicode\"] = \"MALFORMED_UNICODE\";\n    /**\n     * Thrown when a badly formed hexadecimal escape sequence is found. Possible\n     * reasons include the code being too short (`\"\\x2\"`) or having invalid\n     * characters (`\"\\x2$\"`).\n     */\n    ErrorType[\"MalformedHexadecimal\"] = \"MALFORMED_HEXADECIMAL\";\n    /**\n     * Thrown when a Unicode code point escape sequence has too high of a code\n     * point. The maximum code point allowed is `\\u{10FFFF}`, so `\\u{110000}` and\n     * higher will throw this error.\n     */\n    ErrorType[\"CodePointLimit\"] = \"CODE_POINT_LIMIT\";\n    /**\n     * Thrown when an octal escape sequences is encountered and `allowOctals` is\n     * `false`. For example, `unraw(\"\\234\", false)`.\n     */\n    ErrorType[\"OctalDeprecation\"] = \"OCTAL_DEPRECATION\";\n    /**\n     * Thrown only when a single backslash is found at the end of a string. For\n     * example, `\"\\\\\"` or `\"test\\\\x24\\\\\"`.\n     */\n    ErrorType[\"EndOfString\"] = \"END_OF_STRING\";\n})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));\n/** Map of error message names to the full text of the message. */\nexports.errorMessages = new Map([\n    [ErrorType.MalformedUnicode, \"malformed Unicode character escape sequence\"],\n    [\n        ErrorType.MalformedHexadecimal,\n        \"malformed hexadecimal character escape sequence\"\n    ],\n    [\n        ErrorType.CodePointLimit,\n        \"Unicode codepoint must not be greater than 0x10FFFF in escape sequence\"\n    ],\n    [\n        ErrorType.OctalDeprecation,\n        '\"0\"-prefixed octal literals and octal escape sequences are deprecated; ' +\n            'for octal literals use the \"0o\" prefix instead'\n    ],\n    [ErrorType.EndOfString, \"malformed escape sequence at end of string\"]\n]);\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,SAAS,GAAG,KAAK,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS;AACb,CAAC,UAAUA,SAAS,EAAE;EAClB;AACJ;AACA;AACA;AACA;EACIA,SAAS,CAAC,kBAAkB,CAAC,GAAG,mBAAmB;EACnD;AACJ;AACA;AACA;AACA;EACIA,SAAS,CAAC,sBAAsB,CAAC,GAAG,uBAAuB;EAC3D;AACJ;AACA;AACA;AACA;EACIA,SAAS,CAAC,gBAAgB,CAAC,GAAG,kBAAkB;EAChD;AACJ;AACA;AACA;EACIA,SAAS,CAAC,kBAAkB,CAAC,GAAG,mBAAmB;EACnD;AACJ;AACA;AACA;EACIA,SAAS,CAAC,aAAa,CAAC,GAAG,eAAe;AAC9C,CAAC,EAAEA,SAAS,GAAGH,OAAO,CAACG,SAAS,KAAKH,OAAO,CAACG,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7D;AACAH,OAAO,CAACE,aAAa,GAAG,IAAIE,GAAG,CAAC,CAC5B,CAACD,SAAS,CAACE,gBAAgB,EAAE,6CAA6C,CAAC,EAC3E,CACIF,SAAS,CAACG,oBAAoB,EAC9B,iDAAiD,CACpD,EACD,CACIH,SAAS,CAACI,cAAc,EACxB,wEAAwE,CAC3E,EACD,CACIJ,SAAS,CAACK,gBAAgB,EAC1B,yEAAyE,GACrE,gDAAgD,CACvD,EACD,CAACL,SAAS,CAACM,WAAW,EAAE,4CAA4C,CAAC,CACxE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}