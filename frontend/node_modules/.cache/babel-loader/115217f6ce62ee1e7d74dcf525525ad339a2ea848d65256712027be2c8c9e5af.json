{"ast":null,"code":"import curry from \"./curry.js\";\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with natural sorting using localeCompare.\n *\n * @func\n * @memberOf R\n * @since v0.30.1\n * @category Function\n * @sig Ord b => s -> (a -> b) -> a -> a -> Number\n * @param {String|Array} locales A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor.\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if a occurs before b, `1` if a occurs after b, otherwise `0`\n * @see R.ascend\n * @example\n *\n *      const unsorted = ['3', '1', '10', 'Ørjan', 'Bob', 'Älva'];\n *\n *      R.sort(R.ascendNatural('en', R.identity), unsorted);\n *      // => ['1', '3', '10', 'Älva', 'Bob', 'Ørjan']\n *\n *      R.sort(R.ascendNatural('sv', R.identity), unsorted);\n *      // => ['1', '3', '10', 'Bob', 'Älva', 'Ørjan']\n *\n *     R.sort(R.ascend(R.identity), unsorted);\n *      // => ['1', '10', '3', 'Bob', 'Älva', 'Ørjan']\n */\nvar ascendNatural = /*#__PURE__*/curry(function ascendNatural(locales, fn, a, b) {\n  const aa = fn(a);\n  const bb = fn(b);\n  return aa.localeCompare(bb, locales, {\n    numeric: true\n  });\n});\nexport default ascendNatural;","map":{"version":3,"names":["curry","ascendNatural","locales","fn","a","b","aa","bb","localeCompare","numeric"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/ascendNatural.js"],"sourcesContent":["import curry from \"./curry.js\";\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with natural sorting using localeCompare.\n *\n * @func\n * @memberOf R\n * @since v0.30.1\n * @category Function\n * @sig Ord b => s -> (a -> b) -> a -> a -> Number\n * @param {String|Array} locales A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor.\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if a occurs before b, `1` if a occurs after b, otherwise `0`\n * @see R.ascend\n * @example\n *\n *      const unsorted = ['3', '1', '10', 'Ørjan', 'Bob', 'Älva'];\n *\n *      R.sort(R.ascendNatural('en', R.identity), unsorted);\n *      // => ['1', '3', '10', 'Älva', 'Bob', 'Ørjan']\n *\n *      R.sort(R.ascendNatural('sv', R.identity), unsorted);\n *      // => ['1', '3', '10', 'Bob', 'Älva', 'Ørjan']\n *\n *     R.sort(R.ascend(R.identity), unsorted);\n *      // => ['1', '10', '3', 'Bob', 'Älva', 'Ørjan']\n */\nvar ascendNatural = /*#__PURE__*/curry(function ascendNatural(locales, fn, a, b) {\n  const aa = fn(a);\n  const bb = fn(b);\n  return aa.localeCompare(bb, locales, {\n    numeric: true\n  });\n});\nexport default ascendNatural;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAaD,KAAK,CAAC,SAASC,aAAaA,CAACC,OAAO,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC/E,MAAMC,EAAE,GAAGH,EAAE,CAACC,CAAC,CAAC;EAChB,MAAMG,EAAE,GAAGJ,EAAE,CAACE,CAAC,CAAC;EAChB,OAAOC,EAAE,CAACE,aAAa,CAACD,EAAE,EAAEL,OAAO,EAAE;IACnCO,OAAO,EAAE;EACX,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,eAAeR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}