{"ast":null,"code":"import { isInteger } from 'ramda-adjunct';\nimport { isObjectElement, isArrayElement, cloneDeep } from '@swagger-api/apidom-core';\nimport parse from \"./parse.mjs\";\nimport EvaluationJsonPointerError from \"./errors/EvaluationJsonPointerError.mjs\"; // evaluates JSON Pointer against ApiDOM fragment\nconst evaluate = (pointer, element) => {\n  let tokens;\n  try {\n    tokens = parse(pointer);\n  } catch (error) {\n    throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while parsing the pointer \"${pointer}\".`, {\n      pointer,\n      element: cloneDeep(element),\n      cause: error\n    });\n  }\n  return tokens.reduce((acc, token, tokenPosition) => {\n    if (isObjectElement(acc)) {\n      // @ts-ignore\n      if (!acc.hasKey(token)) {\n        throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while evaluating token \"${token}\" against an ObjectElement`, {\n          pointer,\n          tokens,\n          failedToken: token,\n          failedTokenPosition: tokenPosition,\n          element: cloneDeep(acc)\n        });\n      }\n      // @ts-ignore\n      return acc.get(token);\n    }\n    if (isArrayElement(acc)) {\n      if (!(token in acc.content) || !isInteger(Number(token))) {\n        throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while evaluating token \"${token}\" against an ArrayElement`, {\n          pointer,\n          tokens,\n          failedToken: token,\n          failedTokenPosition: tokenPosition,\n          element: cloneDeep(acc)\n        });\n      }\n      // @ts-ignore\n      return acc.get(Number(token));\n    }\n    throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while evaluating token \"${token}\" against an unexpected Element`, {\n      pointer,\n      tokens,\n      failedToken: token,\n      failedTokenPosition: tokenPosition,\n      element: cloneDeep(acc)\n    });\n  }, element);\n};\nexport default evaluate;","map":{"version":3,"names":["isInteger","isObjectElement","isArrayElement","cloneDeep","parse","EvaluationJsonPointerError","evaluate","pointer","element","tokens","error","cause","reduce","acc","token","tokenPosition","hasKey","failedToken","failedTokenPosition","get","content","Number"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-json-pointer/es/evaluate.mjs"],"sourcesContent":["import { isInteger } from 'ramda-adjunct';\nimport { isObjectElement, isArrayElement, cloneDeep } from '@swagger-api/apidom-core';\nimport parse from \"./parse.mjs\";\nimport EvaluationJsonPointerError from \"./errors/EvaluationJsonPointerError.mjs\"; // evaluates JSON Pointer against ApiDOM fragment\nconst evaluate = (pointer, element) => {\n  let tokens;\n  try {\n    tokens = parse(pointer);\n  } catch (error) {\n    throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while parsing the pointer \"${pointer}\".`, {\n      pointer,\n      element: cloneDeep(element),\n      cause: error\n    });\n  }\n  return tokens.reduce((acc, token, tokenPosition) => {\n    if (isObjectElement(acc)) {\n      // @ts-ignore\n      if (!acc.hasKey(token)) {\n        throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while evaluating token \"${token}\" against an ObjectElement`, {\n          pointer,\n          tokens,\n          failedToken: token,\n          failedTokenPosition: tokenPosition,\n          element: cloneDeep(acc)\n        });\n      }\n      // @ts-ignore\n      return acc.get(token);\n    }\n    if (isArrayElement(acc)) {\n      if (!(token in acc.content) || !isInteger(Number(token))) {\n        throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while evaluating token \"${token}\" against an ArrayElement`, {\n          pointer,\n          tokens,\n          failedToken: token,\n          failedTokenPosition: tokenPosition,\n          element: cloneDeep(acc)\n        });\n      }\n      // @ts-ignore\n      return acc.get(Number(token));\n    }\n    throw new EvaluationJsonPointerError(`JSON Pointer evaluation failed while evaluating token \"${token}\" against an unexpected Element`, {\n      pointer,\n      tokens,\n      failedToken: token,\n      failedTokenPosition: tokenPosition,\n      element: cloneDeep(acc)\n    });\n  }, element);\n};\nexport default evaluate;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,eAAe,EAAEC,cAAc,EAAEC,SAAS,QAAQ,0BAA0B;AACrF,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,0BAA0B,MAAM,yCAAyC,CAAC,CAAC;AAClF,MAAMC,QAAQ,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EACrC,IAAIC,MAAM;EACV,IAAI;IACFA,MAAM,GAAGL,KAAK,CAACG,OAAO,CAAC;EACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAM,IAAIL,0BAA0B,CAAC,6DAA6DE,OAAO,IAAI,EAAE;MAC7GA,OAAO;MACPC,OAAO,EAAEL,SAAS,CAACK,OAAO,CAAC;MAC3BG,KAAK,EAAED;IACT,CAAC,CAAC;EACJ;EACA,OAAOD,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,aAAa,KAAK;IAClD,IAAId,eAAe,CAACY,GAAG,CAAC,EAAE;MACxB;MACA,IAAI,CAACA,GAAG,CAACG,MAAM,CAACF,KAAK,CAAC,EAAE;QACtB,MAAM,IAAIT,0BAA0B,CAAC,0DAA0DS,KAAK,4BAA4B,EAAE;UAChIP,OAAO;UACPE,MAAM;UACNQ,WAAW,EAAEH,KAAK;UAClBI,mBAAmB,EAAEH,aAAa;UAClCP,OAAO,EAAEL,SAAS,CAACU,GAAG;QACxB,CAAC,CAAC;MACJ;MACA;MACA,OAAOA,GAAG,CAACM,GAAG,CAACL,KAAK,CAAC;IACvB;IACA,IAAIZ,cAAc,CAACW,GAAG,CAAC,EAAE;MACvB,IAAI,EAAEC,KAAK,IAAID,GAAG,CAACO,OAAO,CAAC,IAAI,CAACpB,SAAS,CAACqB,MAAM,CAACP,KAAK,CAAC,CAAC,EAAE;QACxD,MAAM,IAAIT,0BAA0B,CAAC,0DAA0DS,KAAK,2BAA2B,EAAE;UAC/HP,OAAO;UACPE,MAAM;UACNQ,WAAW,EAAEH,KAAK;UAClBI,mBAAmB,EAAEH,aAAa;UAClCP,OAAO,EAAEL,SAAS,CAACU,GAAG;QACxB,CAAC,CAAC;MACJ;MACA;MACA,OAAOA,GAAG,CAACM,GAAG,CAACE,MAAM,CAACP,KAAK,CAAC,CAAC;IAC/B;IACA,MAAM,IAAIT,0BAA0B,CAAC,0DAA0DS,KAAK,iCAAiC,EAAE;MACrIP,OAAO;MACPE,MAAM;MACNQ,WAAW,EAAEH,KAAK;MAClBI,mBAAmB,EAAEH,aAAa;MAClCP,OAAO,EAAEL,SAAS,CAACU,GAAG;IACxB,CAAC,CAAC;EACJ,CAAC,EAAEL,OAAO,CAAC;AACb,CAAC;AACD,eAAeF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}