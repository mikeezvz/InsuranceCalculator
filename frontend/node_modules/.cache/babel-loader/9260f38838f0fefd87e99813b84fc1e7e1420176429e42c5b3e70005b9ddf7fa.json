{"ast":null,"code":"import { complement } from 'ramda';\nimport isString from './isString.js';\n\n/**\n * Checks if input value is complement of `String`.\n *\n * @func isNotString\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.4.0|v0.4.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isString|isString}\n * @example\n *\n * RA.isNotString('abc'); //=> false\n * RA.isNotString(1); //=> true\n */\nvar isNotString = complement(isString);\nexport default isNotString;","map":{"version":3,"names":["complement","isString","isNotString"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotString.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isString from './isString.js';\n\n/**\n * Checks if input value is complement of `String`.\n *\n * @func isNotString\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.4.0|v0.4.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isString|isString}\n * @example\n *\n * RA.isNotString('abc'); //=> false\n * RA.isNotString(1); //=> true\n */\nvar isNotString = complement(isString);\nexport default isNotString;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,QAAQ,MAAM,eAAe;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGF,UAAU,CAACC,QAAQ,CAAC;AACtC,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}