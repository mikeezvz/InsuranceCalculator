{"ast":null,"code":"import { complement } from 'ramda';\nimport isMap from './isMap.js';\n\n/**\n * Checks if value is complement of `Map` object.\n *\n * @func isNotMap\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isMap|isMap}\n * @example\n *\n * RA.isNotMap(new Map()); //=> false\n * RA.isNotMap(new Map([[1, 2], [2, 1]])); //=> false\n * RA.isNotMap(new Set()); //=> true\n * RA.isNotMap({}); //=> true\n * RA.isNotMap(12); //=> true\n */\n\nvar isNotMap = complement(isMap);\nexport default isNotMap;","map":{"version":3,"names":["complement","isMap","isNotMap"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isNotMap.js"],"sourcesContent":["import { complement } from 'ramda';\nimport isMap from './isMap.js';\n\n/**\n * Checks if value is complement of `Map` object.\n *\n * @func isNotMap\n * @memberOf RA\n * @category Type\n * @since {@link https://char0n.github.io/ramda-adjunct/2.27.0|v2.27.0}\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isMap|isMap}\n * @example\n *\n * RA.isNotMap(new Map()); //=> false\n * RA.isNotMap(new Map([[1, 2], [2, 1]])); //=> false\n * RA.isNotMap(new Set()); //=> true\n * RA.isNotMap({}); //=> true\n * RA.isNotMap(12); //=> true\n */\n\nvar isNotMap = complement(isMap);\nexport default isNotMap;"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GAAGF,UAAU,CAACC,KAAK,CAAC;AAChC,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}