{"ast":null,"code":"import { nAry } from 'ramda';\n\n/**\n * Accepts a function with any arity and returns a function with arity of zero.\n * The returned function ignores any arguments supplied to it.\n *\n * @func dropArgs\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.10.0|v2.10.0}\n * @category Logic\n * @sig (...a -> b)-> () -> b\n * @param {Function} fn The function with any arity\n * @return {Function} Returns function with arity of zero\n * @see {@link http://ramdajs.com/docs/#nAry|R.nAry}\n * @example\n *\n * const fn = (a = 1, b = 2) => a + b;\n *\n * RA.dropArgs(fn)('ignore1', 'ignore2'); //=> 3\n */\nvar dropArgs = nAry(0);\nexport default dropArgs;","map":{"version":3,"names":["nAry","dropArgs"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/dropArgs.js"],"sourcesContent":["import { nAry } from 'ramda';\n\n/**\n * Accepts a function with any arity and returns a function with arity of zero.\n * The returned function ignores any arguments supplied to it.\n *\n * @func dropArgs\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.10.0|v2.10.0}\n * @category Logic\n * @sig (...a -> b)-> () -> b\n * @param {Function} fn The function with any arity\n * @return {Function} Returns function with arity of zero\n * @see {@link http://ramdajs.com/docs/#nAry|R.nAry}\n * @example\n *\n * const fn = (a = 1, b = 2) => a + b;\n *\n * RA.dropArgs(fn)('ignore1', 'ignore2'); //=> 3\n */\nvar dropArgs = nAry(0);\nexport default dropArgs;"],"mappings":"AAAA,SAASA,IAAI,QAAQ,OAAO;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGD,IAAI,CAAC,CAAC,CAAC;AACtB,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}