{"ast":null,"code":"import { isEmpty, isNil, anyPass, test } from 'ramda';\nimport isFalse from './isFalse.js';\n/**\n * Returns `true` if the given value is its type's empty value, `false`, `undefined`\n * as well as strings containing only whitespace characters; `false` otherwise.\n *\n * @func isBlank\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/3.1.0|v3.1.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link https://blog.appsignal.com/2018/09/11/differences-between-nil-empty-blank-and-present.html|Differences Between #nil?, #empty?, #blank?, and #present?}\n * @example\n *\n * RA.isBlank(''); //=> true\n * RA.isBlank('   '); //=> true\n * RA.isBlank('\\t\\n'); //=> true\n * RA.isBlank({}); //=> true\n * RA.isBlank(null); //=> true\n * RA.isBlank(undefined); //=> true\n * RA.isBlank([]); //=> true\n * RA.isBlank(false); //=> true\n * RA.isBlank('value'); //=> false\n * RA.isBlank({ foo: 'foo' }); //=> false\n * RA.isBlank([1, 2, 3]); //=> false\n * RA.isBlank(true); //=> false\n */\nvar isBlank = anyPass([isFalse, isNil, isEmpty, test(/^\\s+$/gm)]);\nexport default isBlank;","map":{"version":3,"names":["isEmpty","isNil","anyPass","test","isFalse","isBlank"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isBlank.js"],"sourcesContent":["import { isEmpty, isNil, anyPass, test } from 'ramda';\nimport isFalse from './isFalse.js';\n/**\n * Returns `true` if the given value is its type's empty value, `false`, `undefined`\n * as well as strings containing only whitespace characters; `false` otherwise.\n *\n * @func isBlank\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/3.1.0|v3.1.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link https://blog.appsignal.com/2018/09/11/differences-between-nil-empty-blank-and-present.html|Differences Between #nil?, #empty?, #blank?, and #present?}\n * @example\n *\n * RA.isBlank(''); //=> true\n * RA.isBlank('   '); //=> true\n * RA.isBlank('\\t\\n'); //=> true\n * RA.isBlank({}); //=> true\n * RA.isBlank(null); //=> true\n * RA.isBlank(undefined); //=> true\n * RA.isBlank([]); //=> true\n * RA.isBlank(false); //=> true\n * RA.isBlank('value'); //=> false\n * RA.isBlank({ foo: 'foo' }); //=> false\n * RA.isBlank([1, 2, 3]); //=> false\n * RA.isBlank(true); //=> false\n */\nvar isBlank = anyPass([isFalse, isNil, isEmpty, test(/^\\s+$/gm)]);\nexport default isBlank;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,IAAI,QAAQ,OAAO;AACrD,OAAOC,OAAO,MAAM,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAGH,OAAO,CAAC,CAACE,OAAO,EAAEH,KAAK,EAAED,OAAO,EAAEG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACjE,eAAeE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}