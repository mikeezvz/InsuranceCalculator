{"ast":null,"code":"import ApiDOMAggregateError from \"./ApiDOMAggregateError.mjs\";\nclass ApiDOMError extends Error {\n  static [Symbol.hasInstance](instance) {\n    // we want to ApiDOMAggregateError to act as if ApiDOMError was its superclass\n    return super[Symbol.hasInstance](instance) || Function.prototype[Symbol.hasInstance].call(ApiDOMAggregateError, instance);\n  }\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    if (typeof message === 'string') {\n      this.message = message;\n    }\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n\n    /**\n     * This needs to stay here until our minimum supported version of Node.js is >= 16.9.0.\n     * Node.js is >= 16.9.0 supports error causes natively.\n     */\n    if (options != null && typeof options === 'object' && Object.hasOwn(options, 'cause') && !('cause' in this)) {\n      const {\n        cause\n      } = options;\n      this.cause = cause;\n      if (cause instanceof Error && 'stack' in cause) {\n        this.stack = `${this.stack}\\nCAUSE: ${cause.stack}`;\n      }\n    }\n  }\n}\nexport default ApiDOMError;","map":{"version":3,"names":["ApiDOMAggregateError","ApiDOMError","Error","Symbol","hasInstance","instance","Function","prototype","call","constructor","message","options","name","captureStackTrace","stack","Object","hasOwn","cause"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-error/es/ApiDOMError.mjs"],"sourcesContent":["import ApiDOMAggregateError from \"./ApiDOMAggregateError.mjs\";\nclass ApiDOMError extends Error {\n  static [Symbol.hasInstance](instance) {\n    // we want to ApiDOMAggregateError to act as if ApiDOMError was its superclass\n    return super[Symbol.hasInstance](instance) || Function.prototype[Symbol.hasInstance].call(ApiDOMAggregateError, instance);\n  }\n  constructor(message, options) {\n    super(message, options);\n    this.name = this.constructor.name;\n    if (typeof message === 'string') {\n      this.message = message;\n    }\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n\n    /**\n     * This needs to stay here until our minimum supported version of Node.js is >= 16.9.0.\n     * Node.js is >= 16.9.0 supports error causes natively.\n     */\n    if (options != null && typeof options === 'object' && Object.hasOwn(options, 'cause') && !('cause' in this)) {\n      const {\n        cause\n      } = options;\n      this.cause = cause;\n      if (cause instanceof Error && 'stack' in cause) {\n        this.stack = `${this.stack}\\nCAUSE: ${cause.stack}`;\n      }\n    }\n  }\n}\nexport default ApiDOMError;"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,4BAA4B;AAC7D,MAAMC,WAAW,SAASC,KAAK,CAAC;EAC9B,QAAQC,MAAM,CAACC,WAAW,EAAEC,QAAQ,EAAE;IACpC;IACA,OAAO,KAAK,CAACF,MAAM,CAACC,WAAW,CAAC,CAACC,QAAQ,CAAC,IAAIC,QAAQ,CAACC,SAAS,CAACJ,MAAM,CAACC,WAAW,CAAC,CAACI,IAAI,CAACR,oBAAoB,EAAEK,QAAQ,CAAC;EAC3H;EACAI,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC5B,KAAK,CAACD,OAAO,EAAEC,OAAO,CAAC;IACvB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACH,WAAW,CAACG,IAAI;IACjC,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE;MAC/B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB;IACA,IAAI,OAAOR,KAAK,CAACW,iBAAiB,KAAK,UAAU,EAAE;MACjDX,KAAK,CAACW,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACJ,WAAW,CAAC;IACjD,CAAC,MAAM;MACL,IAAI,CAACK,KAAK,GAAG,IAAIZ,KAAK,CAACQ,OAAO,CAAC,CAACI,KAAK;IACvC;;IAEA;AACJ;AACA;AACA;IACI,IAAIH,OAAO,IAAI,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAII,MAAM,CAACC,MAAM,CAACL,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,IAAI,IAAI,CAAC,EAAE;MAC3G,MAAM;QACJM;MACF,CAAC,GAAGN,OAAO;MACX,IAAI,CAACM,KAAK,GAAGA,KAAK;MAClB,IAAIA,KAAK,YAAYf,KAAK,IAAI,OAAO,IAAIe,KAAK,EAAE;QAC9C,IAAI,CAACH,KAAK,GAAG,GAAG,IAAI,CAACA,KAAK,YAAYG,KAAK,CAACH,KAAK,EAAE;MACrD;IACF;EACF;AACF;AACA,eAAeb,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}