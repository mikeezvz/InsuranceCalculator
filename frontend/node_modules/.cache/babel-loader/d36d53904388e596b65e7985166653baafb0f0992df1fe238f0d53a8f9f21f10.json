{"ast":null,"code":"import { identical, curryN } from 'ramda';\n\n/**\n * Checks if value is a positive zero (+0).\n *\n * @func isPositiveZero\n * @memberof RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegativeZero|isNegativeZero}\n * @example\n *\n * RA.isPositiveZero(+0); //=> true\n * RA.isPositiveZero(0); //=> true\n * RA.isPositiveZero(-0); //=> false\n * RA.isPositiveZero(null); //=> false\n */\nvar isPositiveZero = curryN(1, identical(+0));\nexport default isPositiveZero;","map":{"version":3,"names":["identical","curryN","isPositiveZero"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isPositiveZero.js"],"sourcesContent":["import { identical, curryN } from 'ramda';\n\n/**\n * Checks if value is a positive zero (+0).\n *\n * @func isPositiveZero\n * @memberof RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegativeZero|isNegativeZero}\n * @example\n *\n * RA.isPositiveZero(+0); //=> true\n * RA.isPositiveZero(0); //=> true\n * RA.isPositiveZero(-0); //=> false\n * RA.isPositiveZero(null); //=> false\n */\nvar isPositiveZero = curryN(1, identical(+0));\nexport default isPositiveZero;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAGD,MAAM,CAAC,CAAC,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,eAAeE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}