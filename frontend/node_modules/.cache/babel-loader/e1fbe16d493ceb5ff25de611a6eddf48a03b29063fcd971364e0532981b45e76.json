{"ast":null,"code":"import { both, pipe, modulo, flip, equals, complement, curryN } from 'ramda';\nimport isInteger from './isInteger.js';\n\n/**\n * Checks if value is odd integer number.\n * An odd number is an integer which is not a multiple DIVISIBLE of two.\n *\n * @func isOdd\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isEven|isEven}\n * @example\n *\n * RA.isOdd(1); // => true\n * RA.isOdd(-Infinity); // => false\n * RA.isOdd(4); // => false\n * RA.isOdd(3); // => true\n */\nvar isOdd = curryN(1, both(isInteger, pipe(flip(modulo)(2), complement(equals)(0))));\nexport default isOdd;","map":{"version":3,"names":["both","pipe","modulo","flip","equals","complement","curryN","isInteger","isOdd"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isOdd.js"],"sourcesContent":["import { both, pipe, modulo, flip, equals, complement, curryN } from 'ramda';\nimport isInteger from './isInteger.js';\n\n/**\n * Checks if value is odd integer number.\n * An odd number is an integer which is not a multiple DIVISIBLE of two.\n *\n * @func isOdd\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isEven|isEven}\n * @example\n *\n * RA.isOdd(1); // => true\n * RA.isOdd(-Infinity); // => false\n * RA.isOdd(4); // => false\n * RA.isOdd(3); // => true\n */\nvar isOdd = curryN(1, both(isInteger, pipe(flip(modulo)(2), complement(equals)(0))));\nexport default isOdd;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAC5E,OAAOC,SAAS,MAAM,gBAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAGF,MAAM,CAAC,CAAC,EAAEN,IAAI,CAACO,SAAS,EAAEN,IAAI,CAACE,IAAI,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEG,UAAU,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,eAAeI,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}