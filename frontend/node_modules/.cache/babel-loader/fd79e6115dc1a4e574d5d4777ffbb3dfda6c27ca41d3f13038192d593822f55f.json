{"ast":null,"code":"import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Math.sign.js';\nexport var signPonyfill = curryN(1, ponyfill);\n\n/**\n * Returns the sign of a number, indicating whether the number is positive, negative or zero.\n *\n * @func sign\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.15.0|v2.15.0}\n * @category Math\n * @sig Number | String -> Number\n * @param {number} number A number\n * @return {number} A number representing the sign of the given argument. If the argument is a positive number, negative number, positive zero or negative zero, the function will return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned\n * @example\n *\n * RA.sign(3); //  1\n * RA.sign(-3); // -1\n * RA.sign('-3'); // -1\n * RA.sign(0); //  0\n * RA.sign(-0); // -0\n * RA.sign(NaN); // NaN\n * RA.sign('foo'); // NaN\n */\n\nvar sign = isFunction(Math.sign) ? curryN(1, bind(Math.sign, Math)) : signPonyfill;\nexport default sign;","map":{"version":3,"names":["bind","curryN","isFunction","ponyfill","signPonyfill","sign","Math"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/sign.js"],"sourcesContent":["import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Math.sign.js';\nexport var signPonyfill = curryN(1, ponyfill);\n\n/**\n * Returns the sign of a number, indicating whether the number is positive, negative or zero.\n *\n * @func sign\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.15.0|v2.15.0}\n * @category Math\n * @sig Number | String -> Number\n * @param {number} number A number\n * @return {number} A number representing the sign of the given argument. If the argument is a positive number, negative number, positive zero or negative zero, the function will return 1, -1, 0 or -0 respectively. Otherwise, NaN is returned\n * @example\n *\n * RA.sign(3); //  1\n * RA.sign(-3); // -1\n * RA.sign('-3'); // -1\n * RA.sign(0); //  0\n * RA.sign(-0); // -0\n * RA.sign(NaN); // NaN\n * RA.sign('foo'); // NaN\n */\n\nvar sign = isFunction(Math.sign) ? curryN(1, bind(Math.sign, Math)) : signPonyfill;\nexport default sign;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,OAAO;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,mCAAmC;AACxD,OAAO,IAAIC,YAAY,GAAGH,MAAM,CAAC,CAAC,EAAEE,QAAQ,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIE,IAAI,GAAGH,UAAU,CAACI,IAAI,CAACD,IAAI,CAAC,GAAGJ,MAAM,CAAC,CAAC,EAAED,IAAI,CAACM,IAAI,CAACD,IAAI,EAAEC,IAAI,CAAC,CAAC,GAAGF,YAAY;AAClF,eAAeC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}