{"ast":null,"code":"import { curryN, pipe, type, identical } from 'ramda';\nimport isFunction from './isFunction.js';\n\n/**\n * Checks if input value is `Array`.\n *\n * @func isArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.3.0|v0.3.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotArray|isNotArray}\n * @example\n *\n * RA.isArray([]); //=> true\n * RA.isArray(null); //=> false\n * RA.isArray({}); //=> false\n */\nvar isArray = curryN(1, isFunction(Array.isArray) ? Array.isArray : pipe(type, identical('Array')));\nexport default isArray;","map":{"version":3,"names":["curryN","pipe","type","identical","isFunction","isArray","Array"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isArray.js"],"sourcesContent":["import { curryN, pipe, type, identical } from 'ramda';\nimport isFunction from './isFunction.js';\n\n/**\n * Checks if input value is `Array`.\n *\n * @func isArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.3.0|v0.3.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotArray|isNotArray}\n * @example\n *\n * RA.isArray([]); //=> true\n * RA.isArray(null); //=> false\n * RA.isArray({}); //=> false\n */\nvar isArray = curryN(1, isFunction(Array.isArray) ? Array.isArray : pipe(type, identical('Array')));\nexport default isArray;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,OAAO;AACrD,OAAOC,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAGL,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACE,KAAK,CAACD,OAAO,CAAC,GAAGC,KAAK,CAACD,OAAO,GAAGJ,IAAI,CAACC,IAAI,EAAEC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AACnG,eAAeE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}