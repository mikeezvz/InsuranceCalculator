{"ast":null,"code":"import { pathSatisfies, path, pick } from 'ramda';\nimport { isFunction } from 'ramda-adjunct';\nimport { visit, cloneDeep } from '@swagger-api/apidom-core';\nimport Visitor from \"./Visitor.mjs\";\nimport FallbackVisitor from \"./FallbackVisitor.mjs\";\n/**\n * This is a base Type for every visitor that does\n * internal look-ups to retrieve other child visitors.\n */\nclass SpecificationVisitor extends Visitor {\n  specObj;\n  passingOptionsNames = ['specObj'];\n  constructor({\n    specObj,\n    ...rest\n  }) {\n    super({\n      ...rest\n    });\n    this.specObj = specObj;\n  }\n  retrievePassingOptions() {\n    return pick(this.passingOptionsNames, this);\n  }\n  retrieveFixedFields(specPath) {\n    const fixedFields = path(['visitors', ...specPath, 'fixedFields'], this.specObj);\n    if (typeof fixedFields === 'object' && fixedFields !== null) {\n      return Object.keys(fixedFields);\n    }\n    return [];\n  }\n  retrieveVisitor(specPath) {\n    if (pathSatisfies(isFunction, ['visitors', ...specPath], this.specObj)) {\n      return path(['visitors', ...specPath], this.specObj);\n    }\n    return path(['visitors', ...specPath, '$visitor'], this.specObj);\n  }\n  retrieveVisitorInstance(specPath, options = {}) {\n    const passingOpts = this.retrievePassingOptions();\n    const VisitorClz = this.retrieveVisitor(specPath);\n    const visitorOpts = {\n      ...passingOpts,\n      ...options\n    };\n    return new VisitorClz(visitorOpts);\n  }\n  toRefractedElement(specPath, element, options = {}) {\n    /**\n     * This is `Visitor shortcut`: mechanism for short circuiting the traversal and replacing\n     * it by basic node cloning.\n     *\n     * Visiting the element is equivalent to cloning it  if the prototype of a visitor\n     * is the same as the prototype of FallbackVisitor. If that's the case, we can avoid\n     * bootstrapping the traversal cycle for fields that don't require any special visiting.\n     */\n    const visitor = this.retrieveVisitorInstance(specPath, options);\n    if (visitor instanceof FallbackVisitor && (visitor === null || visitor === void 0 ? void 0 : visitor.constructor) === FallbackVisitor) {\n      return cloneDeep(element);\n    }\n    visit(element, visitor, options);\n    return visitor.element;\n  }\n}\nexport default SpecificationVisitor;","map":{"version":3,"names":["pathSatisfies","path","pick","isFunction","visit","cloneDeep","Visitor","FallbackVisitor","SpecificationVisitor","specObj","passingOptionsNames","constructor","rest","retrievePassingOptions","retrieveFixedFields","specPath","fixedFields","Object","keys","retrieveVisitor","retrieveVisitorInstance","options","passingOpts","VisitorClz","visitorOpts","toRefractedElement","element","visitor"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-json-schema-draft-4/es/refractor/visitors/SpecificationVisitor.mjs"],"sourcesContent":["import { pathSatisfies, path, pick } from 'ramda';\nimport { isFunction } from 'ramda-adjunct';\nimport { visit, cloneDeep } from '@swagger-api/apidom-core';\nimport Visitor from \"./Visitor.mjs\";\nimport FallbackVisitor from \"./FallbackVisitor.mjs\";\n/**\n * This is a base Type for every visitor that does\n * internal look-ups to retrieve other child visitors.\n */\nclass SpecificationVisitor extends Visitor {\n  specObj;\n  passingOptionsNames = ['specObj'];\n  constructor({\n    specObj,\n    ...rest\n  }) {\n    super({\n      ...rest\n    });\n    this.specObj = specObj;\n  }\n  retrievePassingOptions() {\n    return pick(this.passingOptionsNames, this);\n  }\n  retrieveFixedFields(specPath) {\n    const fixedFields = path(['visitors', ...specPath, 'fixedFields'], this.specObj);\n    if (typeof fixedFields === 'object' && fixedFields !== null) {\n      return Object.keys(fixedFields);\n    }\n    return [];\n  }\n  retrieveVisitor(specPath) {\n    if (pathSatisfies(isFunction, ['visitors', ...specPath], this.specObj)) {\n      return path(['visitors', ...specPath], this.specObj);\n    }\n    return path(['visitors', ...specPath, '$visitor'], this.specObj);\n  }\n  retrieveVisitorInstance(specPath, options = {}) {\n    const passingOpts = this.retrievePassingOptions();\n    const VisitorClz = this.retrieveVisitor(specPath);\n    const visitorOpts = {\n      ...passingOpts,\n      ...options\n    };\n    return new VisitorClz(visitorOpts);\n  }\n  toRefractedElement(specPath, element, options = {}) {\n    /**\n     * This is `Visitor shortcut`: mechanism for short circuiting the traversal and replacing\n     * it by basic node cloning.\n     *\n     * Visiting the element is equivalent to cloning it  if the prototype of a visitor\n     * is the same as the prototype of FallbackVisitor. If that's the case, we can avoid\n     * bootstrapping the traversal cycle for fields that don't require any special visiting.\n     */\n    const visitor = this.retrieveVisitorInstance(specPath, options);\n    if (visitor instanceof FallbackVisitor && (visitor === null || visitor === void 0 ? void 0 : visitor.constructor) === FallbackVisitor) {\n      return cloneDeep(element);\n    }\n    visit(element, visitor, options);\n    return visitor.element;\n  }\n}\nexport default SpecificationVisitor;"],"mappings":"AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,IAAI,QAAQ,OAAO;AACjD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,EAAEC,SAAS,QAAQ,0BAA0B;AAC3D,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,eAAe,MAAM,uBAAuB;AACnD;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAASF,OAAO,CAAC;EACzCG,OAAO;EACPC,mBAAmB,GAAG,CAAC,SAAS,CAAC;EACjCC,WAAWA,CAAC;IACVF,OAAO;IACP,GAAGG;EACL,CAAC,EAAE;IACD,KAAK,CAAC;MACJ,GAAGA;IACL,CAAC,CAAC;IACF,IAAI,CAACH,OAAO,GAAGA,OAAO;EACxB;EACAI,sBAAsBA,CAAA,EAAG;IACvB,OAAOX,IAAI,CAAC,IAAI,CAACQ,mBAAmB,EAAE,IAAI,CAAC;EAC7C;EACAI,mBAAmBA,CAACC,QAAQ,EAAE;IAC5B,MAAMC,WAAW,GAAGf,IAAI,CAAC,CAAC,UAAU,EAAE,GAAGc,QAAQ,EAAE,aAAa,CAAC,EAAE,IAAI,CAACN,OAAO,CAAC;IAChF,IAAI,OAAOO,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;MAC3D,OAAOC,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC;IACjC;IACA,OAAO,EAAE;EACX;EACAG,eAAeA,CAACJ,QAAQ,EAAE;IACxB,IAAIf,aAAa,CAACG,UAAU,EAAE,CAAC,UAAU,EAAE,GAAGY,QAAQ,CAAC,EAAE,IAAI,CAACN,OAAO,CAAC,EAAE;MACtE,OAAOR,IAAI,CAAC,CAAC,UAAU,EAAE,GAAGc,QAAQ,CAAC,EAAE,IAAI,CAACN,OAAO,CAAC;IACtD;IACA,OAAOR,IAAI,CAAC,CAAC,UAAU,EAAE,GAAGc,QAAQ,EAAE,UAAU,CAAC,EAAE,IAAI,CAACN,OAAO,CAAC;EAClE;EACAW,uBAAuBA,CAACL,QAAQ,EAAEM,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9C,MAAMC,WAAW,GAAG,IAAI,CAACT,sBAAsB,CAAC,CAAC;IACjD,MAAMU,UAAU,GAAG,IAAI,CAACJ,eAAe,CAACJ,QAAQ,CAAC;IACjD,MAAMS,WAAW,GAAG;MAClB,GAAGF,WAAW;MACd,GAAGD;IACL,CAAC;IACD,OAAO,IAAIE,UAAU,CAACC,WAAW,CAAC;EACpC;EACAC,kBAAkBA,CAACV,QAAQ,EAAEW,OAAO,EAAEL,OAAO,GAAG,CAAC,CAAC,EAAE;IAClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMM,OAAO,GAAG,IAAI,CAACP,uBAAuB,CAACL,QAAQ,EAAEM,OAAO,CAAC;IAC/D,IAAIM,OAAO,YAAYpB,eAAe,IAAI,CAACoB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAChB,WAAW,MAAMJ,eAAe,EAAE;MACrI,OAAOF,SAAS,CAACqB,OAAO,CAAC;IAC3B;IACAtB,KAAK,CAACsB,OAAO,EAAEC,OAAO,EAAEN,OAAO,CAAC;IAChC,OAAOM,OAAO,CAACD,OAAO;EACxB;AACF;AACA,eAAelB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}