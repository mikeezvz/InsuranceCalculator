{"ast":null,"code":"import { reduce } from 'ramda';\nimport { isPrimitiveElement, toValue } from '@swagger-api/apidom-core';\nimport { SchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport * as url from \"../../../util/url.mjs\";\nexport const resolveSchema$refField = (retrievalURI, schemaElement) => {\n  if (typeof schemaElement.$ref === 'undefined') {\n    return undefined;\n  }\n  const hash = url.getHash(toValue(schemaElement.$ref));\n  const inherited$id = toValue(schemaElement.meta.get('inherited$id'));\n  const $refBaseURI = reduce((acc, uri) => {\n    return url.resolve(acc, url.sanitize(url.stripHash(uri)));\n  }, retrievalURI, [...inherited$id, toValue(schemaElement.$ref)]);\n  return `${$refBaseURI}${hash === '#' ? '' : hash}`;\n};\nexport const resolveSchema$idField = (retrievalURI, schemaElement) => {\n  if (typeof schemaElement.$id === 'undefined') {\n    return undefined;\n  }\n  const inherited$id = toValue(schemaElement.meta.get('inherited$id'));\n  return reduce((acc, $id) => {\n    return url.resolve(acc, url.sanitize(url.stripHash($id)));\n  }, retrievalURI, [...inherited$id, toValue(schemaElement.$id)]);\n};\n\n/**\n * Cached version of SchemaElement.refract.\n */\nexport const refractToSchemaElement = element => {\n  if (refractToSchemaElement.cache.has(element)) {\n    return refractToSchemaElement.cache.get(element);\n  }\n  const refracted = SchemaElement.refract(element);\n  refractToSchemaElement.cache.set(element, refracted);\n  return refracted;\n};\nrefractToSchemaElement.cache = new WeakMap();\nexport const maybeRefractToSchemaElement = element => {\n  /**\n   * Conditional version of refractToSchemaElement, that acts as an identity\n   * function for all non-primitive Element instances.\n   */\n  if (isPrimitiveElement(element)) {\n    return refractToSchemaElement(element);\n  }\n  return element;\n};","map":{"version":3,"names":["reduce","isPrimitiveElement","toValue","SchemaElement","url","resolveSchema$refField","retrievalURI","schemaElement","$ref","undefined","hash","getHash","inherited$id","meta","get","$refBaseURI","acc","uri","resolve","sanitize","stripHash","resolveSchema$idField","$id","refractToSchemaElement","element","cache","has","refracted","refract","set","WeakMap","maybeRefractToSchemaElement"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/dereference/strategies/openapi-3-1/util.mjs"],"sourcesContent":["import { reduce } from 'ramda';\nimport { isPrimitiveElement, toValue } from '@swagger-api/apidom-core';\nimport { SchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport * as url from \"../../../util/url.mjs\";\nexport const resolveSchema$refField = (retrievalURI, schemaElement) => {\n  if (typeof schemaElement.$ref === 'undefined') {\n    return undefined;\n  }\n  const hash = url.getHash(toValue(schemaElement.$ref));\n  const inherited$id = toValue(schemaElement.meta.get('inherited$id'));\n  const $refBaseURI = reduce((acc, uri) => {\n    return url.resolve(acc, url.sanitize(url.stripHash(uri)));\n  }, retrievalURI, [...inherited$id, toValue(schemaElement.$ref)]);\n  return `${$refBaseURI}${hash === '#' ? '' : hash}`;\n};\nexport const resolveSchema$idField = (retrievalURI, schemaElement) => {\n  if (typeof schemaElement.$id === 'undefined') {\n    return undefined;\n  }\n  const inherited$id = toValue(schemaElement.meta.get('inherited$id'));\n  return reduce((acc, $id) => {\n    return url.resolve(acc, url.sanitize(url.stripHash($id)));\n  }, retrievalURI, [...inherited$id, toValue(schemaElement.$id)]);\n};\n\n/**\n * Cached version of SchemaElement.refract.\n */\nexport const refractToSchemaElement = element => {\n  if (refractToSchemaElement.cache.has(element)) {\n    return refractToSchemaElement.cache.get(element);\n  }\n  const refracted = SchemaElement.refract(element);\n  refractToSchemaElement.cache.set(element, refracted);\n  return refracted;\n};\nrefractToSchemaElement.cache = new WeakMap();\nexport const maybeRefractToSchemaElement = element => {\n  /**\n   * Conditional version of refractToSchemaElement, that acts as an identity\n   * function for all non-primitive Element instances.\n   */\n  if (isPrimitiveElement(element)) {\n    return refractToSchemaElement(element);\n  }\n  return element;\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,kBAAkB,EAAEC,OAAO,QAAQ,0BAA0B;AACtE,SAASC,aAAa,QAAQ,oCAAoC;AAClE,OAAO,KAAKC,GAAG,MAAM,uBAAuB;AAC5C,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,YAAY,EAAEC,aAAa,KAAK;EACrE,IAAI,OAAOA,aAAa,CAACC,IAAI,KAAK,WAAW,EAAE;IAC7C,OAAOC,SAAS;EAClB;EACA,MAAMC,IAAI,GAAGN,GAAG,CAACO,OAAO,CAACT,OAAO,CAACK,aAAa,CAACC,IAAI,CAAC,CAAC;EACrD,MAAMI,YAAY,GAAGV,OAAO,CAACK,aAAa,CAACM,IAAI,CAACC,GAAG,CAAC,cAAc,CAAC,CAAC;EACpE,MAAMC,WAAW,GAAGf,MAAM,CAAC,CAACgB,GAAG,EAAEC,GAAG,KAAK;IACvC,OAAOb,GAAG,CAACc,OAAO,CAACF,GAAG,EAAEZ,GAAG,CAACe,QAAQ,CAACf,GAAG,CAACgB,SAAS,CAACH,GAAG,CAAC,CAAC,CAAC;EAC3D,CAAC,EAAEX,YAAY,EAAE,CAAC,GAAGM,YAAY,EAAEV,OAAO,CAACK,aAAa,CAACC,IAAI,CAAC,CAAC,CAAC;EAChE,OAAO,GAAGO,WAAW,GAAGL,IAAI,KAAK,GAAG,GAAG,EAAE,GAAGA,IAAI,EAAE;AACpD,CAAC;AACD,OAAO,MAAMW,qBAAqB,GAAGA,CAACf,YAAY,EAAEC,aAAa,KAAK;EACpE,IAAI,OAAOA,aAAa,CAACe,GAAG,KAAK,WAAW,EAAE;IAC5C,OAAOb,SAAS;EAClB;EACA,MAAMG,YAAY,GAAGV,OAAO,CAACK,aAAa,CAACM,IAAI,CAACC,GAAG,CAAC,cAAc,CAAC,CAAC;EACpE,OAAOd,MAAM,CAAC,CAACgB,GAAG,EAAEM,GAAG,KAAK;IAC1B,OAAOlB,GAAG,CAACc,OAAO,CAACF,GAAG,EAAEZ,GAAG,CAACe,QAAQ,CAACf,GAAG,CAACgB,SAAS,CAACE,GAAG,CAAC,CAAC,CAAC;EAC3D,CAAC,EAAEhB,YAAY,EAAE,CAAC,GAAGM,YAAY,EAAEV,OAAO,CAACK,aAAa,CAACe,GAAG,CAAC,CAAC,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAGC,OAAO,IAAI;EAC/C,IAAID,sBAAsB,CAACE,KAAK,CAACC,GAAG,CAACF,OAAO,CAAC,EAAE;IAC7C,OAAOD,sBAAsB,CAACE,KAAK,CAACX,GAAG,CAACU,OAAO,CAAC;EAClD;EACA,MAAMG,SAAS,GAAGxB,aAAa,CAACyB,OAAO,CAACJ,OAAO,CAAC;EAChDD,sBAAsB,CAACE,KAAK,CAACI,GAAG,CAACL,OAAO,EAAEG,SAAS,CAAC;EACpD,OAAOA,SAAS;AAClB,CAAC;AACDJ,sBAAsB,CAACE,KAAK,GAAG,IAAIK,OAAO,CAAC,CAAC;AAC5C,OAAO,MAAMC,2BAA2B,GAAGP,OAAO,IAAI;EACpD;AACF;AACA;AACA;EACE,IAAIvB,kBAAkB,CAACuB,OAAO,CAAC,EAAE;IAC/B,OAAOD,sBAAsB,CAACC,OAAO,CAAC;EACxC;EACA,OAAOA,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}