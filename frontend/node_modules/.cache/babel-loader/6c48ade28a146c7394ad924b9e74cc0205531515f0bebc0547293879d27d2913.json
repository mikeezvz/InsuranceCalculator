{"ast":null,"code":"/**\n * Utility function that works like `Object.apply`, but copies getters and setters properly as well.  Additionally gives\n * the option to exclude properties by name.\n */\nconst copyProps = (dest, src, exclude = []) => {\n  const props = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude) delete props[prop];\n  Object.defineProperties(dest, props);\n};\n/**\n * Returns the full chain of prototypes up until Object.prototype given a starting object.  The order of prototypes will\n * be closest to farthest in the chain.\n */\nconst protoChain = (obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null) return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n};\n/**\n * Identifies the nearest ancestor common to all the given objects in their prototype chains.  For most unrelated\n * objects, this function should return Object.prototype.\n */\nconst nearestCommonProto = (...objs) => {\n  if (objs.length === 0) return undefined;\n  let commonProto = undefined;\n  const protoChains = objs.map(obj => protoChain(obj));\n  while (protoChains.every(protoChain => protoChain.length > 0)) {\n    const protos = protoChains.map(protoChain => protoChain.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every(proto => proto === potentialCommonProto)) commonProto = potentialCommonProto;else break;\n  }\n  return commonProto;\n};\n/**\n * Creates a new prototype object that is a mixture of the given prototypes.  The mixing is achieved by first\n * identifying the nearest common ancestor and using it as the prototype for a new object.  Then all properties/methods\n * downstream of this prototype (ONLY downstream) are copied into the new object.\n *\n * The resulting prototype is more performant than softMixProtos(...), as well as ES5 compatible.  However, it's not as\n * flexible as updates to the source prototypes aren't captured by the mixed result.  See softMixProtos for why you may\n * want to use that instead.\n */\nconst hardMixProtos = (ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  // Keeps track of prototypes we've already visited to avoid copying the same properties multiple times.  We init the\n  // list with the proto chain below the nearest common ancestor because we don't want any of those methods mixed in\n  // when they will already be accessible via prototype access.\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    // Apply the prototype chain in reverse order so that old methods don't override newer ones.\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, ['constructor', ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n};\nconst unique = arr => arr.filter((e, i) => arr.indexOf(e) == i);\n\n/**\n * Finds the ingredient with the given prop, searching in reverse order and breadth-first if searching ingredient\n * prototypes is required.\n */\nconst getIngredientWithProp = (prop, ingredients) => {\n  const protoChains = ingredients.map(ingredient => protoChain(ingredient));\n  // since we search breadth-first, we need to keep track of our depth in the prototype chains\n  let protoDepth = 0;\n  // not all prototype chains are the same depth, so this remains true as long as at least one of the ingredients'\n  // prototype chains has an object at this depth\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    // with the start of each horizontal slice, we assume this is the one that's deeper than any of the proto chains\n    protosAreLeftToSearch = false;\n    // scan through the ingredients right to left\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== undefined && searchTarget !== null) {\n        // if we find something, this is proof that this horizontal slice potentially more objects to search\n        protosAreLeftToSearch = true;\n        // eureka, we found it\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != undefined) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return undefined;\n};\n/**\n * \"Mixes\" ingredients by wrapping them in a Proxy.  The optional prototype argument allows the mixed object to sit\n * downstream of an existing prototype chain.  Note that \"properties\" cannot be added, deleted, or modified.\n */\nconst proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error('Cannot set prototype of Proxies created by ts-mixer');\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error('Cannot define new properties on Proxies created by ts-mixer');\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== undefined || prototype[prop] !== undefined;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === undefined) throw new Error('Cannot set new properties on Proxies created by ts-mixer');\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error('Cannot delete properties on Proxies created by ts-mixer');\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter(key => curr.indexOf(key) < 0)));\n  }\n});\n/**\n * Creates a new proxy-prototype object that is a \"soft\" mixture of the given prototypes.  The mixing is achieved by\n * proxying all property access to the ingredients.  This is not ES5 compatible and less performant.  However, any\n * changes made to the source prototypes will be reflected in the proxy-prototype, which may be desirable.\n */\nconst softMixProtos = (ingredients, constructor) => proxyMix([...ingredients, {\n  constructor\n}]);\nconst settings = {\n  initFunction: null,\n  staticsStrategy: 'copy',\n  prototypeStrategy: 'copy',\n  decoratorInheritance: 'deep'\n};\n\n// Keeps track of constituent classes for every mixin class created by ts-mixer.\nconst mixins = new WeakMap();\nconst getMixinsForClass = clazz => mixins.get(clazz);\nconst registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);\nconst hasMixin = (instance, mixin) => {\n  if (instance instanceof mixin) return true;\n  const constructor = instance.constructor;\n  const visited = new Set();\n  let frontier = new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    // check if the frontier has the mixin we're looking for.  if not, we can say we visited every item in the frontier\n    if (frontier.has(mixin)) return true;\n    frontier.forEach(item => visited.add(item));\n    // build a new frontier based on the associated mixin classes and prototype chains of each frontier item\n    const newFrontier = new Set();\n    frontier.forEach(item => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map(proto => proto.constructor).filter(item => item !== null);\n      if (itemConstituents) itemConstituents.forEach(constituent => {\n        if (!visited.has(constituent) && !frontier.has(constituent)) newFrontier.add(constituent);\n      });\n    });\n    // we have a new frontier, now search again\n    frontier = newFrontier;\n  }\n  // if we get here, we couldn't find the mixin anywhere in the prototype chain or associated mixin classes\n  return false;\n};\nconst mergeObjectsOfDecorators = (o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys) mergedObject[key] = unique([...((_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : []), ...((_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : [])]);\n  return mergedObject;\n};\nconst mergePropertyAndMethodDecorators = (d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n};\nconst mergeDecorators = (d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...((_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : []), ...((_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : [])]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n};\nconst decorators = new Map();\nconst findAllConstituentClasses = (...classes) => {\n  var _a;\n  const allClasses = new Set();\n  const frontier = new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map(proto => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter(c => !allClasses.has(c));\n      for (let newClass of newClasses) frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n};\nconst deepDecoratorSearch = (...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map(clazz => decorators.get(clazz)).filter(decorators => !!decorators);\n  if (decoratorsForClassChain.length == 0) return {};\n  if (decoratorsForClassChain.length == 1) return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nconst directDecoratorSearch = (...classes) => {\n  const classDecorators = classes.map(clazz => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0) return {};\n  if (classDecorators.length === 1) return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nconst getDecoratorsForClass = clazz => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n};\nconst decorateClass = decorator => clazz => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n};\nconst decorateMember = decorator => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === 'function' ? 'static' : 'instance';\n  const decoratorType = typeof object[key] === 'function' ? 'method' : 'property';\n  const clazz = decoratorTargetType === 'static' ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  // @ts-ignore: array is type `A[] | B[]` and item is type `A | B`, so technically a type error, but it's fine\n  decoratorsForKey.push(decorator);\n  // @ts-ignore\n  return decorator(object, key, ...otherArgs);\n};\nconst decorate = decorator => (...args) => {\n  if (args.length === 1) return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n};\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map(constructor => constructor.prototype);\n  // Here we gather up the init functions of the ingredient prototypes, combine them into one init function, and\n  // attach it to the mixed class prototype.  The reason we do this is because we want the init functions to mix\n  // similarly to constructors -- not methods, which simply override each other.\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map(proto => proto[initFunctionName]).filter(func => typeof func === 'function');\n    const combinedInitFunction = function (...args) {\n      for (let initFunction of initFunctions) initFunction.apply(this, args);\n    };\n    const extraProto = {\n      [initFunctionName]: combinedInitFunction\n    };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n    // @ts-ignore: potentially abstract class\n    copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === 'function') this[initFunctionName].apply(this, args);\n  }\n  MixedClass.prototype = settings.prototypeStrategy === 'copy' ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === 'copy' ? hardMixProtos(constructors, null, ['prototype']) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== 'none') {\n    const classDecorators = settings.decoratorInheritance === 'deep' ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\nconst applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators) for (let key in propDecorators) for (let decorator of propDecorators[key]) decorator(target, key);\n  if (methodDecorators) for (let key in methodDecorators) for (let decorator of methodDecorators[key]) decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n};\n/**\n * A decorator version of the `Mixin` function.  You'll want to use this instead of `Mixin` for mixing generic classes.\n */\nconst mix = (...ingredients) => decoratedClass => {\n  // @ts-ignore\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, 'name', {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n};\nexport { Mixin, decorate, hasMixin, mix, settings };","map":{"version":3,"names":["copyProps","dest","src","exclude","props","Object","getOwnPropertyDescriptors","prop","defineProperties","protoChain","obj","currentChain","proto","getPrototypeOf","nearestCommonProto","objs","length","undefined","commonProto","protoChains","map","every","protos","pop","potentialCommonProto","hardMixProtos","ingredients","constructor","_a","base","prototype","mixedProto","create","visitedProtos","i","newProto","indexOf","push","unique","arr","filter","e","getIngredientWithProp","ingredient","protoDepth","protosAreLeftToSearch","searchTarget","getOwnPropertyDescriptor","proxyMix","Proxy","setPrototypeOf","Error","_","defineProperty","has","get","set","val","ingredientWithProp","deleteProperty","ownKeys","getOwnPropertyNames","reduce","prev","curr","concat","key","softMixProtos","settings","initFunction","staticsStrategy","prototypeStrategy","decoratorInheritance","mixins","WeakMap","getMixinsForClass","clazz","registerMixins","mixedClass","constituents","hasMixin","instance","mixin","visited","Set","frontier","add","size","forEach","item","newFrontier","itemConstituents","constituent","mergeObjectsOfDecorators","o1","o2","_b","allKeys","mergedObject","mergePropertyAndMethodDecorators","d1","d2","_c","_d","property","method","mergeDecorators","_e","_f","class","static","decorators","Map","findAllConstituentClasses","classes","allClasses","protoChainClasses","mixinClasses","potentiallyNewClasses","newClasses","c","newClass","delete","deepDecoratorSearch","decoratorsForClassChain","directDecoratorSearch","classDecorators","getDecoratorsForClass","decoratorsForClass","decorateClass","decorator","decorateMember","object","otherArgs","decoratorTargetType","decoratorType","decoratorsForTargetType","decoratorsForType","decoratorsForKey","decorate","args","Mixin","constructors","prototypes","initFunctionName","initFunctions","func","combinedInitFunction","apply","extraProto","MixedClass","Function","DecoratedMixedClass","result","applyPropAndMethodDecorators","propAndMethodDecorators","target","propDecorators","methodDecorators","mix","decoratedClass","value","name","writable"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ts-mixer/dist/esm/index.js"],"sourcesContent":["/**\n * Utility function that works like `Object.apply`, but copies getters and setters properly as well.  Additionally gives\n * the option to exclude properties by name.\n */\nconst copyProps = (dest, src, exclude = []) => {\n    const props = Object.getOwnPropertyDescriptors(src);\n    for (let prop of exclude)\n        delete props[prop];\n    Object.defineProperties(dest, props);\n};\n/**\n * Returns the full chain of prototypes up until Object.prototype given a starting object.  The order of prototypes will\n * be closest to farthest in the chain.\n */\nconst protoChain = (obj, currentChain = [obj]) => {\n    const proto = Object.getPrototypeOf(obj);\n    if (proto === null)\n        return currentChain;\n    return protoChain(proto, [...currentChain, proto]);\n};\n/**\n * Identifies the nearest ancestor common to all the given objects in their prototype chains.  For most unrelated\n * objects, this function should return Object.prototype.\n */\nconst nearestCommonProto = (...objs) => {\n    if (objs.length === 0)\n        return undefined;\n    let commonProto = undefined;\n    const protoChains = objs.map(obj => protoChain(obj));\n    while (protoChains.every(protoChain => protoChain.length > 0)) {\n        const protos = protoChains.map(protoChain => protoChain.pop());\n        const potentialCommonProto = protos[0];\n        if (protos.every(proto => proto === potentialCommonProto))\n            commonProto = potentialCommonProto;\n        else\n            break;\n    }\n    return commonProto;\n};\n/**\n * Creates a new prototype object that is a mixture of the given prototypes.  The mixing is achieved by first\n * identifying the nearest common ancestor and using it as the prototype for a new object.  Then all properties/methods\n * downstream of this prototype (ONLY downstream) are copied into the new object.\n *\n * The resulting prototype is more performant than softMixProtos(...), as well as ES5 compatible.  However, it's not as\n * flexible as updates to the source prototypes aren't captured by the mixed result.  See softMixProtos for why you may\n * want to use that instead.\n */\nconst hardMixProtos = (ingredients, constructor, exclude = []) => {\n    var _a;\n    const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n    const mixedProto = Object.create(base);\n    // Keeps track of prototypes we've already visited to avoid copying the same properties multiple times.  We init the\n    // list with the proto chain below the nearest common ancestor because we don't want any of those methods mixed in\n    // when they will already be accessible via prototype access.\n    const visitedProtos = protoChain(base);\n    for (let prototype of ingredients) {\n        let protos = protoChain(prototype);\n        // Apply the prototype chain in reverse order so that old methods don't override newer ones.\n        for (let i = protos.length - 1; i >= 0; i--) {\n            let newProto = protos[i];\n            if (visitedProtos.indexOf(newProto) === -1) {\n                copyProps(mixedProto, newProto, ['constructor', ...exclude]);\n                visitedProtos.push(newProto);\n            }\n        }\n    }\n    mixedProto.constructor = constructor;\n    return mixedProto;\n};\nconst unique = (arr) => arr.filter((e, i) => arr.indexOf(e) == i);\n\n/**\n * Finds the ingredient with the given prop, searching in reverse order and breadth-first if searching ingredient\n * prototypes is required.\n */\nconst getIngredientWithProp = (prop, ingredients) => {\n    const protoChains = ingredients.map(ingredient => protoChain(ingredient));\n    // since we search breadth-first, we need to keep track of our depth in the prototype chains\n    let protoDepth = 0;\n    // not all prototype chains are the same depth, so this remains true as long as at least one of the ingredients'\n    // prototype chains has an object at this depth\n    let protosAreLeftToSearch = true;\n    while (protosAreLeftToSearch) {\n        // with the start of each horizontal slice, we assume this is the one that's deeper than any of the proto chains\n        protosAreLeftToSearch = false;\n        // scan through the ingredients right to left\n        for (let i = ingredients.length - 1; i >= 0; i--) {\n            const searchTarget = protoChains[i][protoDepth];\n            if (searchTarget !== undefined && searchTarget !== null) {\n                // if we find something, this is proof that this horizontal slice potentially more objects to search\n                protosAreLeftToSearch = true;\n                // eureka, we found it\n                if (Object.getOwnPropertyDescriptor(searchTarget, prop) != undefined) {\n                    return protoChains[i][0];\n                }\n            }\n        }\n        protoDepth++;\n    }\n    return undefined;\n};\n/**\n * \"Mixes\" ingredients by wrapping them in a Proxy.  The optional prototype argument allows the mixed object to sit\n * downstream of an existing prototype chain.  Note that \"properties\" cannot be added, deleted, or modified.\n */\nconst proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {\n    getPrototypeOf() {\n        return prototype;\n    },\n    setPrototypeOf() {\n        throw Error('Cannot set prototype of Proxies created by ts-mixer');\n    },\n    getOwnPropertyDescriptor(_, prop) {\n        return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n    },\n    defineProperty() {\n        throw new Error('Cannot define new properties on Proxies created by ts-mixer');\n    },\n    has(_, prop) {\n        return getIngredientWithProp(prop, ingredients) !== undefined || prototype[prop] !== undefined;\n    },\n    get(_, prop) {\n        return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n    },\n    set(_, prop, val) {\n        const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n        if (ingredientWithProp === undefined)\n            throw new Error('Cannot set new properties on Proxies created by ts-mixer');\n        ingredientWithProp[prop] = val;\n        return true;\n    },\n    deleteProperty() {\n        throw new Error('Cannot delete properties on Proxies created by ts-mixer');\n    },\n    ownKeys() {\n        return ingredients\n            .map(Object.getOwnPropertyNames)\n            .reduce((prev, curr) => curr.concat(prev.filter(key => curr.indexOf(key) < 0)));\n    },\n});\n/**\n * Creates a new proxy-prototype object that is a \"soft\" mixture of the given prototypes.  The mixing is achieved by\n * proxying all property access to the ingredients.  This is not ES5 compatible and less performant.  However, any\n * changes made to the source prototypes will be reflected in the proxy-prototype, which may be desirable.\n */\nconst softMixProtos = (ingredients, constructor) => proxyMix([...ingredients, { constructor }]);\n\nconst settings = {\n    initFunction: null,\n    staticsStrategy: 'copy',\n    prototypeStrategy: 'copy',\n    decoratorInheritance: 'deep',\n};\n\n// Keeps track of constituent classes for every mixin class created by ts-mixer.\nconst mixins = new WeakMap();\nconst getMixinsForClass = (clazz) => mixins.get(clazz);\nconst registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);\nconst hasMixin = (instance, mixin) => {\n    if (instance instanceof mixin)\n        return true;\n    const constructor = instance.constructor;\n    const visited = new Set();\n    let frontier = new Set();\n    frontier.add(constructor);\n    while (frontier.size > 0) {\n        // check if the frontier has the mixin we're looking for.  if not, we can say we visited every item in the frontier\n        if (frontier.has(mixin))\n            return true;\n        frontier.forEach((item) => visited.add(item));\n        // build a new frontier based on the associated mixin classes and prototype chains of each frontier item\n        const newFrontier = new Set();\n        frontier.forEach((item) => {\n            var _a;\n            const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype)\n                .map((proto) => proto.constructor)\n                .filter((item) => item !== null);\n            if (itemConstituents)\n                itemConstituents.forEach((constituent) => {\n                    if (!visited.has(constituent) && !frontier.has(constituent))\n                        newFrontier.add(constituent);\n                });\n        });\n        // we have a new frontier, now search again\n        frontier = newFrontier;\n    }\n    // if we get here, we couldn't find the mixin anywhere in the prototype chain or associated mixin classes\n    return false;\n};\n\nconst mergeObjectsOfDecorators = (o1, o2) => {\n    var _a, _b;\n    const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n    const mergedObject = {};\n    for (let key of allKeys)\n        mergedObject[key] = unique([...((_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : []), ...((_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : [])]);\n    return mergedObject;\n};\nconst mergePropertyAndMethodDecorators = (d1, d2) => {\n    var _a, _b, _c, _d;\n    return ({\n        property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n        method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {}),\n    });\n};\nconst mergeDecorators = (d1, d2) => {\n    var _a, _b, _c, _d, _e, _f;\n    return ({\n        class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n        static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n        instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {}),\n    });\n};\nconst decorators = new Map();\nconst findAllConstituentClasses = (...classes) => {\n    var _a;\n    const allClasses = new Set();\n    const frontier = new Set([...classes]);\n    while (frontier.size > 0) {\n        for (let clazz of frontier) {\n            const protoChainClasses = protoChain(clazz.prototype).map(proto => proto.constructor);\n            const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n            const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n            const newClasses = potentiallyNewClasses.filter(c => !allClasses.has(c));\n            for (let newClass of newClasses)\n                frontier.add(newClass);\n            allClasses.add(clazz);\n            frontier.delete(clazz);\n        }\n    }\n    return [...allClasses];\n};\nconst deepDecoratorSearch = (...classes) => {\n    const decoratorsForClassChain = findAllConstituentClasses(...classes)\n        .map(clazz => decorators.get(clazz))\n        .filter(decorators => !!decorators);\n    if (decoratorsForClassChain.length == 0)\n        return {};\n    if (decoratorsForClassChain.length == 1)\n        return decoratorsForClassChain[0];\n    return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nconst directDecoratorSearch = (...classes) => {\n    const classDecorators = classes.map(clazz => getDecoratorsForClass(clazz));\n    if (classDecorators.length === 0)\n        return {};\n    if (classDecorators.length === 1)\n        return classDecorators[0];\n    return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nconst getDecoratorsForClass = (clazz) => {\n    let decoratorsForClass = decorators.get(clazz);\n    if (!decoratorsForClass) {\n        decoratorsForClass = {};\n        decorators.set(clazz, decoratorsForClass);\n    }\n    return decoratorsForClass;\n};\nconst decorateClass = (decorator) => ((clazz) => {\n    const decoratorsForClass = getDecoratorsForClass(clazz);\n    let classDecorators = decoratorsForClass.class;\n    if (!classDecorators) {\n        classDecorators = [];\n        decoratorsForClass.class = classDecorators;\n    }\n    classDecorators.push(decorator);\n    return decorator(clazz);\n});\nconst decorateMember = (decorator) => ((object, key, ...otherArgs) => {\n    var _a, _b, _c;\n    const decoratorTargetType = typeof object === 'function' ? 'static' : 'instance';\n    const decoratorType = typeof object[key] === 'function' ? 'method' : 'property';\n    const clazz = decoratorTargetType === 'static' ? object : object.constructor;\n    const decoratorsForClass = getDecoratorsForClass(clazz);\n    const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n    decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n    let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n    decoratorsForTargetType[decoratorType] = decoratorsForType;\n    let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n    decoratorsForType[key] = decoratorsForKey;\n    // @ts-ignore: array is type `A[] | B[]` and item is type `A | B`, so technically a type error, but it's fine\n    decoratorsForKey.push(decorator);\n    // @ts-ignore\n    return decorator(object, key, ...otherArgs);\n});\nconst decorate = (decorator) => ((...args) => {\n    if (args.length === 1)\n        return decorateClass(decorator)(args[0]);\n    return decorateMember(decorator)(...args);\n});\n\nfunction Mixin(...constructors) {\n    var _a, _b, _c;\n    const prototypes = constructors.map(constructor => constructor.prototype);\n    // Here we gather up the init functions of the ingredient prototypes, combine them into one init function, and\n    // attach it to the mixed class prototype.  The reason we do this is because we want the init functions to mix\n    // similarly to constructors -- not methods, which simply override each other.\n    const initFunctionName = settings.initFunction;\n    if (initFunctionName !== null) {\n        const initFunctions = prototypes\n            .map(proto => proto[initFunctionName])\n            .filter(func => typeof func === 'function');\n        const combinedInitFunction = function (...args) {\n            for (let initFunction of initFunctions)\n                initFunction.apply(this, args);\n        };\n        const extraProto = { [initFunctionName]: combinedInitFunction };\n        prototypes.push(extraProto);\n    }\n    function MixedClass(...args) {\n        for (const constructor of constructors)\n            // @ts-ignore: potentially abstract class\n            copyProps(this, new constructor(...args));\n        if (initFunctionName !== null && typeof this[initFunctionName] === 'function')\n            this[initFunctionName].apply(this, args);\n    }\n    MixedClass.prototype = settings.prototypeStrategy === 'copy'\n        ? hardMixProtos(prototypes, MixedClass)\n        : softMixProtos(prototypes, MixedClass);\n    Object.setPrototypeOf(MixedClass, settings.staticsStrategy === 'copy'\n        ? hardMixProtos(constructors, null, ['prototype'])\n        : proxyMix(constructors, Function.prototype));\n    let DecoratedMixedClass = MixedClass;\n    if (settings.decoratorInheritance !== 'none') {\n        const classDecorators = settings.decoratorInheritance === 'deep'\n            ? deepDecoratorSearch(...constructors)\n            : directDecoratorSearch(...constructors);\n        for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n            const result = decorator(DecoratedMixedClass);\n            if (result) {\n                DecoratedMixedClass = result;\n            }\n        }\n        applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n        applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n    }\n    registerMixins(DecoratedMixedClass, constructors);\n    return DecoratedMixedClass;\n}\nconst applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {\n    const propDecorators = propAndMethodDecorators.property;\n    const methodDecorators = propAndMethodDecorators.method;\n    if (propDecorators)\n        for (let key in propDecorators)\n            for (let decorator of propDecorators[key])\n                decorator(target, key);\n    if (methodDecorators)\n        for (let key in methodDecorators)\n            for (let decorator of methodDecorators[key])\n                decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n};\n/**\n * A decorator version of the `Mixin` function.  You'll want to use this instead of `Mixin` for mixing generic classes.\n */\nconst mix = (...ingredients) => decoratedClass => {\n    // @ts-ignore\n    const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n    Object.defineProperty(mixedClass, 'name', {\n        value: decoratedClass.name,\n        writable: false,\n    });\n    return mixedClass;\n};\n\nexport { Mixin, decorate, hasMixin, mix, settings };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}