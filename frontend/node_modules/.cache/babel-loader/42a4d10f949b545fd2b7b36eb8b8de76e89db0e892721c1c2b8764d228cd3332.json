{"ast":null,"code":"import { flip, invoker, curry } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/String.padStart.js';\nexport var padStartInvoker = flip(invoker(2, 'padStart'));\nexport var padStartPonyfill = curry(ponyfill);\n\n/**\n * The function pads the current string with a given string\n * (repeated, if needed) so that the resulting string reaches a given length.\n * The padding is applied from the start of the current string.\n *\n * @func padCharsStart\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category String\n * @sig String -> Number -> String -> String\n * @param {string} padString The string to pad the current string with\n * @param {number} targetLength The length of the resulting string once the current string has been padded\n * @param {string} value String value to be padded\n * @return {string} A new string of the specified length with the pad string on the start of current string\n * @see {@link RA.padStart|padStart}, {@link RA.padEnd|padEnd}, {@link RA.padCharsEnd|padCharsEnd}\n * @example\n *\n * RA.padCharsStart('-', 3, 'a'); // => '--a'\n * RA.padCharsStart('foo', 10, 'abc'); // => 'foofoofabc'\n * RA.padCharsStart('123456', 6, 'abc'); // => '123abc'\n */\nvar padCharsStart = isFunction(String.prototype.padStart) ? padStartInvoker : padStartPonyfill;\nexport default padCharsStart;","map":{"version":3,"names":["flip","invoker","curry","isFunction","ponyfill","padStartInvoker","padStartPonyfill","padCharsStart","String","prototype","padStart"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/padCharsStart.js"],"sourcesContent":["import { flip, invoker, curry } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/String.padStart.js';\nexport var padStartInvoker = flip(invoker(2, 'padStart'));\nexport var padStartPonyfill = curry(ponyfill);\n\n/**\n * The function pads the current string with a given string\n * (repeated, if needed) so that the resulting string reaches a given length.\n * The padding is applied from the start of the current string.\n *\n * @func padCharsStart\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.22.0|v2.22.0}\n * @category String\n * @sig String -> Number -> String -> String\n * @param {string} padString The string to pad the current string with\n * @param {number} targetLength The length of the resulting string once the current string has been padded\n * @param {string} value String value to be padded\n * @return {string} A new string of the specified length with the pad string on the start of current string\n * @see {@link RA.padStart|padStart}, {@link RA.padEnd|padEnd}, {@link RA.padCharsEnd|padCharsEnd}\n * @example\n *\n * RA.padCharsStart('-', 3, 'a'); // => '--a'\n * RA.padCharsStart('foo', 10, 'abc'); // => 'foofoofabc'\n * RA.padCharsStart('123456', 6, 'abc'); // => '123abc'\n */\nvar padCharsStart = isFunction(String.prototype.padStart) ? padStartInvoker : padStartPonyfill;\nexport default padCharsStart;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,OAAO,EAAEC,KAAK,QAAQ,OAAO;AAC5C,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAO,IAAIC,eAAe,GAAGL,IAAI,CAACC,OAAO,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;AACzD,OAAO,IAAIK,gBAAgB,GAAGJ,KAAK,CAACE,QAAQ,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,aAAa,GAAGJ,UAAU,CAACK,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC,GAAGL,eAAe,GAAGC,gBAAgB;AAC9F,eAAeC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}