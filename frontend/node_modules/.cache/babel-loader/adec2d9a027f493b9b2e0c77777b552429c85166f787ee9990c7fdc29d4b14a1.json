{"ast":null,"code":"/* eslint-disable camelcase */\nimport YAML, { JSON_SCHEMA } from 'js-yaml';\nimport { ParseResultElement } from '@swagger-api/apidom-core';\nimport { ParserError, Parser } from '@swagger-api/apidom-reference/configuration/empty';\nimport { mediaTypes, OpenApi3_1Element, OpenAPIMediaTypes } from '@swagger-api/apidom-ns-openapi-3-1';\nclass OpenAPIYAML31Parser extends Parser {\n  detectionRegExp = /(?<YAML>^([\"']?)openapi\\2\\s*:\\s*([\"']?)(?<version_yaml>3\\.1\\.(?:[1-9]\\d*|0))\\3(?:\\s+|$))|(?<JSON>\"openapi\"\\s*:\\s*\"(?<version_json>3\\.1\\.(?:[1-9]\\d*|0))\")/m;\n  constructor(options = {}) {\n    super({\n      name: 'openapi-yaml-3-1-swagger-client',\n      ...options,\n      fileExtensions: ['.yaml', '.yml'],\n      mediaTypes: new OpenAPIMediaTypes(...mediaTypes.filterByFormat('generic'), ...mediaTypes.filterByFormat('yaml'))\n    });\n  }\n  async canParse(file) {\n    const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n    const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);\n    if (!hasSupportedFileExtension) return false;\n    if (hasSupportedMediaType) return true;\n    if (!hasSupportedMediaType) {\n      try {\n        const source = file.toString();\n        YAML.load(source);\n        return this.detectionRegExp.test(source);\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async parse(file) {\n    if (this.sourceMap) {\n      throw new ParserError(\"openapi-yaml-3-1-swagger-client parser plugin doesn't support sourceMaps option\");\n    }\n    const parseResultElement = new ParseResultElement();\n    const source = file.toString();\n    try {\n      const pojo = YAML.load(source, {\n        schema: JSON_SCHEMA\n      });\n      if (this.allowEmpty && typeof pojo === 'undefined') {\n        return parseResultElement;\n      }\n      const element = OpenApi3_1Element.refract(pojo, this.refractorOpts);\n      element.classes.push('result');\n      parseResultElement.push(element);\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default OpenAPIYAML31Parser;\n/* eslint-enable camelcase */","map":{"version":3,"names":["YAML","JSON_SCHEMA","ParseResultElement","ParserError","Parser","mediaTypes","OpenApi3_1Element","OpenAPIMediaTypes","OpenAPIYAML31Parser","detectionRegExp","constructor","options","name","fileExtensions","filterByFormat","canParse","file","hasSupportedFileExtension","length","includes","extension","hasSupportedMediaType","mediaType","source","toString","load","test","error","parse","sourceMap","parseResultElement","pojo","schema","allowEmpty","element","refract","refractorOpts","classes","push","uri","cause"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/apidom/reference/parse/parsers/openapi-yaml-3-1/index.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport YAML, { JSON_SCHEMA } from 'js-yaml';\nimport { ParseResultElement } from '@swagger-api/apidom-core';\nimport { ParserError, Parser } from '@swagger-api/apidom-reference/configuration/empty';\nimport { mediaTypes, OpenApi3_1Element, OpenAPIMediaTypes } from '@swagger-api/apidom-ns-openapi-3-1';\nclass OpenAPIYAML31Parser extends Parser {\n  detectionRegExp = /(?<YAML>^([\"']?)openapi\\2\\s*:\\s*([\"']?)(?<version_yaml>3\\.1\\.(?:[1-9]\\d*|0))\\3(?:\\s+|$))|(?<JSON>\"openapi\"\\s*:\\s*\"(?<version_json>3\\.1\\.(?:[1-9]\\d*|0))\")/m;\n  constructor(options = {}) {\n    super({\n      name: 'openapi-yaml-3-1-swagger-client',\n      ...options,\n      fileExtensions: ['.yaml', '.yml'],\n      mediaTypes: new OpenAPIMediaTypes(...mediaTypes.filterByFormat('generic'), ...mediaTypes.filterByFormat('yaml'))\n    });\n  }\n  async canParse(file) {\n    const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n    const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);\n    if (!hasSupportedFileExtension) return false;\n    if (hasSupportedMediaType) return true;\n    if (!hasSupportedMediaType) {\n      try {\n        const source = file.toString();\n        YAML.load(source);\n        return this.detectionRegExp.test(source);\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async parse(file) {\n    if (this.sourceMap) {\n      throw new ParserError(\"openapi-yaml-3-1-swagger-client parser plugin doesn't support sourceMaps option\");\n    }\n    const parseResultElement = new ParseResultElement();\n    const source = file.toString();\n    try {\n      const pojo = YAML.load(source, {\n        schema: JSON_SCHEMA\n      });\n      if (this.allowEmpty && typeof pojo === 'undefined') {\n        return parseResultElement;\n      }\n      const element = OpenApi3_1Element.refract(pojo, this.refractorOpts);\n      element.classes.push('result');\n      parseResultElement.push(element);\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default OpenAPIYAML31Parser;\n/* eslint-enable camelcase */"],"mappings":"AAAA;AACA,OAAOA,IAAI,IAAIC,WAAW,QAAQ,SAAS;AAC3C,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,WAAW,EAAEC,MAAM,QAAQ,mDAAmD;AACvF,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,oCAAoC;AACrG,MAAMC,mBAAmB,SAASJ,MAAM,CAAC;EACvCK,eAAe,GAAG,4JAA4J;EAC9KC,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,KAAK,CAAC;MACJC,IAAI,EAAE,iCAAiC;MACvC,GAAGD,OAAO;MACVE,cAAc,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;MACjCR,UAAU,EAAE,IAAIE,iBAAiB,CAAC,GAAGF,UAAU,CAACS,cAAc,CAAC,SAAS,CAAC,EAAE,GAAGT,UAAU,CAACS,cAAc,CAAC,MAAM,CAAC;IACjH,CAAC,CAAC;EACJ;EACA,MAAMC,QAAQA,CAACC,IAAI,EAAE;IACnB,MAAMC,yBAAyB,GAAG,IAAI,CAACJ,cAAc,CAACK,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAACL,cAAc,CAACM,QAAQ,CAACH,IAAI,CAACI,SAAS,CAAC;IACxH,MAAMC,qBAAqB,GAAG,IAAI,CAAChB,UAAU,CAACc,QAAQ,CAACH,IAAI,CAACM,SAAS,CAAC;IACtE,IAAI,CAACL,yBAAyB,EAAE,OAAO,KAAK;IAC5C,IAAII,qBAAqB,EAAE,OAAO,IAAI;IACtC,IAAI,CAACA,qBAAqB,EAAE;MAC1B,IAAI;QACF,MAAME,MAAM,GAAGP,IAAI,CAACQ,QAAQ,CAAC,CAAC;QAC9BxB,IAAI,CAACyB,IAAI,CAACF,MAAM,CAAC;QACjB,OAAO,IAAI,CAACd,eAAe,CAACiB,IAAI,CAACH,MAAM,CAAC;MAC1C,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd;EACA,MAAMC,KAAKA,CAACZ,IAAI,EAAE;IAChB,IAAI,IAAI,CAACa,SAAS,EAAE;MAClB,MAAM,IAAI1B,WAAW,CAAC,iFAAiF,CAAC;IAC1G;IACA,MAAM2B,kBAAkB,GAAG,IAAI5B,kBAAkB,CAAC,CAAC;IACnD,MAAMqB,MAAM,GAAGP,IAAI,CAACQ,QAAQ,CAAC,CAAC;IAC9B,IAAI;MACF,MAAMO,IAAI,GAAG/B,IAAI,CAACyB,IAAI,CAACF,MAAM,EAAE;QAC7BS,MAAM,EAAE/B;MACV,CAAC,CAAC;MACF,IAAI,IAAI,CAACgC,UAAU,IAAI,OAAOF,IAAI,KAAK,WAAW,EAAE;QAClD,OAAOD,kBAAkB;MAC3B;MACA,MAAMI,OAAO,GAAG5B,iBAAiB,CAAC6B,OAAO,CAACJ,IAAI,EAAE,IAAI,CAACK,aAAa,CAAC;MACnEF,OAAO,CAACG,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC9BR,kBAAkB,CAACQ,IAAI,CAACJ,OAAO,CAAC;MAChC,OAAOJ,kBAAkB;IAC3B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,MAAM,IAAIxB,WAAW,CAAC,kBAAkBa,IAAI,CAACuB,GAAG,GAAG,EAAE;QACnDC,KAAK,EAAEb;MACT,CAAC,CAAC;IACJ;EACF;AACF;AACA,eAAenB,mBAAmB;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}