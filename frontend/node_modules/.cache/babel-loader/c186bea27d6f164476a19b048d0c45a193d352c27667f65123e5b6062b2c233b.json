{"ast":null,"code":"import { isEmpty, propEq } from 'ramda';\nimport { isParseResultElement, ParseResultElement, cloneShallow } from '@swagger-api/apidom-core';\nimport File from \"../File.mjs\";\nimport * as plugins from \"../util/plugins.mjs\";\nimport UnmatchedDereferenceStrategyError from \"../errors/UnmatchedDereferenceStrategyError.mjs\";\nimport DereferenceError from \"../errors/DereferenceError.mjs\";\nimport parse from \"../parse/index.mjs\";\nimport { merge as mergeOptions } from \"../options/util.mjs\";\nimport * as url from \"../util/url.mjs\";\n/**\n * Dereferences ApiDOM with all its external references.\n */\nexport const dereferenceApiDOM = async (element, options) => {\n  // @ts-ignore\n  let parseResult = element;\n  let surrogateWrapping = false;\n\n  // wrap element into parse result\n  if (!isParseResultElement(element)) {\n    const elementClone = cloneShallow(element);\n    elementClone.classes.push('result');\n    parseResult = new ParseResultElement([elementClone]);\n    surrogateWrapping = true;\n  }\n  const file = new File({\n    uri: options.resolve.baseURI,\n    parseResult,\n    mediaType: options.parse.mediaType\n  });\n  const dereferenceStrategies = await plugins.filter('canDereference', [file, options], options.dereference.strategies);\n\n  // we couldn't find any dereference strategy for this File\n  if (isEmpty(dereferenceStrategies)) {\n    throw new UnmatchedDereferenceStrategyError(file.uri);\n  }\n  try {\n    const {\n      result\n    } = await plugins.run('dereference', [file, options], dereferenceStrategies);\n    // unwrap the element from ParseResult assuming first element is the actual result\n    return surrogateWrapping ? result.get(0) : result;\n  } catch (error) {\n    throw new DereferenceError(`Error while dereferencing file \"${file.uri}\"`, {\n      cause: error\n    });\n  }\n};\n\n/**\n * Dereferences a file with all its external references.\n */\nconst dereference = async (uri, options) => {\n  const {\n    refSet\n  } = options.dereference;\n  const sanitizedURI = url.sanitize(uri);\n  let parseResult;\n\n  // if refSet was provided, use it to avoid unnecessary parsing\n  if (refSet !== null && refSet.has(sanitizedURI)) {\n    // @ts-ignore\n    ({\n      value: parseResult\n    } = refSet.find(propEq(sanitizedURI, 'uri')));\n  } else {\n    parseResult = await parse(uri, options);\n  }\n  const mergedOptions = mergeOptions(options, {\n    resolve: {\n      baseURI: sanitizedURI\n    },\n    dereference: {\n      // if refSet was not provided, then we can work in mutable mode\n      immutable: options.dereference.immutable && refSet !== null\n    }\n  });\n  return dereferenceApiDOM(parseResult, mergedOptions);\n};\nexport default dereference;","map":{"version":3,"names":["isEmpty","propEq","isParseResultElement","ParseResultElement","cloneShallow","File","plugins","UnmatchedDereferenceStrategyError","DereferenceError","parse","merge","mergeOptions","url","dereferenceApiDOM","element","options","parseResult","surrogateWrapping","elementClone","classes","push","file","uri","resolve","baseURI","mediaType","dereferenceStrategies","filter","dereference","strategies","result","run","get","error","cause","refSet","sanitizedURI","sanitize","has","value","find","mergedOptions","immutable"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/dereference/index.mjs"],"sourcesContent":["import { isEmpty, propEq } from 'ramda';\nimport { isParseResultElement, ParseResultElement, cloneShallow } from '@swagger-api/apidom-core';\nimport File from \"../File.mjs\";\nimport * as plugins from \"../util/plugins.mjs\";\nimport UnmatchedDereferenceStrategyError from \"../errors/UnmatchedDereferenceStrategyError.mjs\";\nimport DereferenceError from \"../errors/DereferenceError.mjs\";\nimport parse from \"../parse/index.mjs\";\nimport { merge as mergeOptions } from \"../options/util.mjs\";\nimport * as url from \"../util/url.mjs\";\n/**\n * Dereferences ApiDOM with all its external references.\n */\nexport const dereferenceApiDOM = async (element, options) => {\n  // @ts-ignore\n  let parseResult = element;\n  let surrogateWrapping = false;\n\n  // wrap element into parse result\n  if (!isParseResultElement(element)) {\n    const elementClone = cloneShallow(element);\n    elementClone.classes.push('result');\n    parseResult = new ParseResultElement([elementClone]);\n    surrogateWrapping = true;\n  }\n  const file = new File({\n    uri: options.resolve.baseURI,\n    parseResult,\n    mediaType: options.parse.mediaType\n  });\n  const dereferenceStrategies = await plugins.filter('canDereference', [file, options], options.dereference.strategies);\n\n  // we couldn't find any dereference strategy for this File\n  if (isEmpty(dereferenceStrategies)) {\n    throw new UnmatchedDereferenceStrategyError(file.uri);\n  }\n  try {\n    const {\n      result\n    } = await plugins.run('dereference', [file, options], dereferenceStrategies);\n    // unwrap the element from ParseResult assuming first element is the actual result\n    return surrogateWrapping ? result.get(0) : result;\n  } catch (error) {\n    throw new DereferenceError(`Error while dereferencing file \"${file.uri}\"`, {\n      cause: error\n    });\n  }\n};\n\n/**\n * Dereferences a file with all its external references.\n */\nconst dereference = async (uri, options) => {\n  const {\n    refSet\n  } = options.dereference;\n  const sanitizedURI = url.sanitize(uri);\n  let parseResult;\n\n  // if refSet was provided, use it to avoid unnecessary parsing\n  if (refSet !== null && refSet.has(sanitizedURI)) {\n    // @ts-ignore\n    ({\n      value: parseResult\n    } = refSet.find(propEq(sanitizedURI, 'uri')));\n  } else {\n    parseResult = await parse(uri, options);\n  }\n  const mergedOptions = mergeOptions(options, {\n    resolve: {\n      baseURI: sanitizedURI\n    },\n    dereference: {\n      // if refSet was not provided, then we can work in mutable mode\n      immutable: options.dereference.immutable && refSet !== null\n    }\n  });\n  return dereferenceApiDOM(parseResult, mergedOptions);\n};\nexport default dereference;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,SAASC,oBAAoB,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,0BAA0B;AACjG,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,KAAKC,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,iCAAiC,MAAM,iDAAiD;AAC/F,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,KAAK,MAAM,oBAAoB;AACtC,SAASC,KAAK,IAAIC,YAAY,QAAQ,qBAAqB;AAC3D,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AACtC;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EAC3D;EACA,IAAIC,WAAW,GAAGF,OAAO;EACzB,IAAIG,iBAAiB,GAAG,KAAK;;EAE7B;EACA,IAAI,CAACf,oBAAoB,CAACY,OAAO,CAAC,EAAE;IAClC,MAAMI,YAAY,GAAGd,YAAY,CAACU,OAAO,CAAC;IAC1CI,YAAY,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IACnCJ,WAAW,GAAG,IAAIb,kBAAkB,CAAC,CAACe,YAAY,CAAC,CAAC;IACpDD,iBAAiB,GAAG,IAAI;EAC1B;EACA,MAAMI,IAAI,GAAG,IAAIhB,IAAI,CAAC;IACpBiB,GAAG,EAAEP,OAAO,CAACQ,OAAO,CAACC,OAAO;IAC5BR,WAAW;IACXS,SAAS,EAAEV,OAAO,CAACN,KAAK,CAACgB;EAC3B,CAAC,CAAC;EACF,MAAMC,qBAAqB,GAAG,MAAMpB,OAAO,CAACqB,MAAM,CAAC,gBAAgB,EAAE,CAACN,IAAI,EAAEN,OAAO,CAAC,EAAEA,OAAO,CAACa,WAAW,CAACC,UAAU,CAAC;;EAErH;EACA,IAAI7B,OAAO,CAAC0B,qBAAqB,CAAC,EAAE;IAClC,MAAM,IAAInB,iCAAiC,CAACc,IAAI,CAACC,GAAG,CAAC;EACvD;EACA,IAAI;IACF,MAAM;MACJQ;IACF,CAAC,GAAG,MAAMxB,OAAO,CAACyB,GAAG,CAAC,aAAa,EAAE,CAACV,IAAI,EAAEN,OAAO,CAAC,EAAEW,qBAAqB,CAAC;IAC5E;IACA,OAAOT,iBAAiB,GAAGa,MAAM,CAACE,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM;EACnD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAM,IAAIzB,gBAAgB,CAAC,mCAAmCa,IAAI,CAACC,GAAG,GAAG,EAAE;MACzEY,KAAK,EAAED;IACT,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAML,WAAW,GAAG,MAAAA,CAAON,GAAG,EAAEP,OAAO,KAAK;EAC1C,MAAM;IACJoB;EACF,CAAC,GAAGpB,OAAO,CAACa,WAAW;EACvB,MAAMQ,YAAY,GAAGxB,GAAG,CAACyB,QAAQ,CAACf,GAAG,CAAC;EACtC,IAAIN,WAAW;;EAEf;EACA,IAAImB,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACG,GAAG,CAACF,YAAY,CAAC,EAAE;IAC/C;IACA,CAAC;MACCG,KAAK,EAAEvB;IACT,CAAC,GAAGmB,MAAM,CAACK,IAAI,CAACvC,MAAM,CAACmC,YAAY,EAAE,KAAK,CAAC,CAAC;EAC9C,CAAC,MAAM;IACLpB,WAAW,GAAG,MAAMP,KAAK,CAACa,GAAG,EAAEP,OAAO,CAAC;EACzC;EACA,MAAM0B,aAAa,GAAG9B,YAAY,CAACI,OAAO,EAAE;IAC1CQ,OAAO,EAAE;MACPC,OAAO,EAAEY;IACX,CAAC;IACDR,WAAW,EAAE;MACX;MACAc,SAAS,EAAE3B,OAAO,CAACa,WAAW,CAACc,SAAS,IAAIP,MAAM,KAAK;IACzD;EACF,CAAC,CAAC;EACF,OAAOtB,iBAAiB,CAACG,WAAW,EAAEyB,aAAa,CAAC;AACtD,CAAC;AACD,eAAeb,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}