{"ast":null,"code":"import { curry, map, tap } from 'ramda';\n\n/* eslint-disable max-len */\n/**\n * Runs the given list of functions in order with the supplied object, then returns the object.\n * Also known as the normal order sequencing combinator.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func seq\n * @aliases sequencing\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Function\n * @sig [(a -> *), (a -> *), ...] -> a -> a\n * @param {Array} fns The list of functions to call in order with `x` whose return values will be thrown away\n * @param {*} x\n * @return {*} `x`\n * @see {@link http://ramdajs.com/docs/#tap|R.tap}, {@link http://www.cs.rpi.edu/academics/courses/spring11/proglang/handouts/lambda-calculus-chapter.pdf|sequencing combinator explained}\n * @example\n *\n * RA.seq([console.info, console.log])('foo'); //=> prints 'foo' via info then log\n *\n * // usage in composition\n * R.pipe(\n *   R.concat('prefix '),\n *   RA.seq([\n *     console.info, //=> prints 'prefix test'\n *     console.log //=> prints 'prefix test'\n *   ]),\n *   R.toUpper\n * )('test'); //=> 'PREFIX TEST'\n */\n/* eslint-enable max-len */\n\nvar seq = curry(function (fns, x) {\n  return tap(function (tx) {\n    return map(function (fn) {\n      return fn(tx);\n    })(fns);\n  })(x);\n});\nexport default seq;","map":{"version":3,"names":["curry","map","tap","seq","fns","x","tx","fn"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/seq.js"],"sourcesContent":["import { curry, map, tap } from 'ramda';\n\n/* eslint-disable max-len */\n/**\n * Runs the given list of functions in order with the supplied object, then returns the object.\n * Also known as the normal order sequencing combinator.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func seq\n * @aliases sequencing\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.3.0|v2.3.0}\n * @category Function\n * @sig [(a -> *), (a -> *), ...] -> a -> a\n * @param {Array} fns The list of functions to call in order with `x` whose return values will be thrown away\n * @param {*} x\n * @return {*} `x`\n * @see {@link http://ramdajs.com/docs/#tap|R.tap}, {@link http://www.cs.rpi.edu/academics/courses/spring11/proglang/handouts/lambda-calculus-chapter.pdf|sequencing combinator explained}\n * @example\n *\n * RA.seq([console.info, console.log])('foo'); //=> prints 'foo' via info then log\n *\n * // usage in composition\n * R.pipe(\n *   R.concat('prefix '),\n *   RA.seq([\n *     console.info, //=> prints 'prefix test'\n *     console.log //=> prints 'prefix test'\n *   ]),\n *   R.toUpper\n * )('test'); //=> 'PREFIX TEST'\n */\n/* eslint-enable max-len */\n\nvar seq = curry(function (fns, x) {\n  return tap(function (tx) {\n    return map(function (fn) {\n      return fn(tx);\n    })(fns);\n  })(x);\n});\nexport default seq;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,GAAG,EAAEC,GAAG,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,GAAG,GAAGH,KAAK,CAAC,UAAUI,GAAG,EAAEC,CAAC,EAAE;EAChC,OAAOH,GAAG,CAAC,UAAUI,EAAE,EAAE;IACvB,OAAOL,GAAG,CAAC,UAAUM,EAAE,EAAE;MACvB,OAAOA,EAAE,CAACD,EAAE,CAAC;IACf,CAAC,CAAC,CAACF,GAAG,CAAC;EACT,CAAC,CAAC,CAACC,CAAC,CAAC;AACP,CAAC,CAAC;AACF,eAAeF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}