{"ast":null,"code":"import { invoker } from 'ramda';\n\n/**\n * Composable shortcut for `Promise.catch`.\n * The catchP function returns a Promise. It takes two arguments: a callback function for the failure of the Promise\n * and the promise instance itself.\n *\n * @func catchP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Function\n * @sig (a -> Promise b | b) -> Promise b\n * @param {Function} onRejected A Function called if the Promise is rejected. This function has one argument, the rejection reason.\n * @param {Promise} promise Any Promise\n * @return {Promise} Returns a Promise with dealt rejected cases\n * @see {@link RA.thenP|thenP}, {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n *\n * @example\n *\n * RA.catchP(() => 'b', Promise.resolve('a')); //=> Promise('a')\n * RA.catchP(() => 'b', Promise.reject('a')); //=> Promise('b')\n */\nvar catchP = invoker(1, 'catch');\nexport default catchP;","map":{"version":3,"names":["invoker","catchP"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/catchP.js"],"sourcesContent":["import { invoker } from 'ramda';\n\n/**\n * Composable shortcut for `Promise.catch`.\n * The catchP function returns a Promise. It takes two arguments: a callback function for the failure of the Promise\n * and the promise instance itself.\n *\n * @func catchP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Function\n * @sig (a -> Promise b | b) -> Promise b\n * @param {Function} onRejected A Function called if the Promise is rejected. This function has one argument, the rejection reason.\n * @param {Promise} promise Any Promise\n * @return {Promise} Returns a Promise with dealt rejected cases\n * @see {@link RA.thenP|thenP}, {@link RA.resolveP|resolveP}, {@link RA.rejectP|rejectP}, {@link RA.allP|allP}\n *\n * @example\n *\n * RA.catchP(() => 'b', Promise.resolve('a')); //=> Promise('a')\n * RA.catchP(() => 'b', Promise.reject('a')); //=> Promise('b')\n */\nvar catchP = invoker(1, 'catch');\nexport default catchP;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC;AAChC,eAAeC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}