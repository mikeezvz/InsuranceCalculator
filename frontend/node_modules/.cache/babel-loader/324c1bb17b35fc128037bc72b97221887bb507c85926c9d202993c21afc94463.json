{"ast":null,"code":"import { ascend, identity, map, path, pipe, sortWith, useWith } from 'ramda';\nvar pathToAscendSort = pipe(path, ascend);\nvar mapPathsToAscendSort = map(pathToAscendSort);\n\n/**\n * Sort a list of objects by a list of paths (if first path value is equivalent, sort by second, etc).\n *\n * @func sortByPaths\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/3.1.0|v3.1.0}\n * @category List\n * @sig [[k]] -> [{k: v}] -> [{k: v}]\n * @param {Array.<Array.<string>>} paths A list of paths in the list param to sort by\n * @param {Array.<object>} list A list of objects to be sorted\n * @return {Array.<object>} A new list sorted by the paths in the paths param\n * @example\n *\n * const alice = {\n *   name: 'Alice',\n *   address: {\n *     street: 31,\n *     zipCode: 97777,\n *   },\n * };\n * const bob = {\n *   name: 'Bob',\n *   address: {\n *     street: 31,\n *     zipCode: 55555,\n *   },\n * };\n * const clara = {\n *   name: 'Clara',\n *   address: {\n *     street: 32,\n *     zipCode: 90210,\n *   },\n * };\n * const people = [clara, bob, alice]\n *\n * RA.sortByPaths([\n *   ['address', 'street'],\n *   ['address', 'zipCode'],\n * ], people); // => [bob, alice, clara]\n *\n * RA.sortByPaths([\n *   ['address', 'zipCode'],\n *   ['address', 'street'],\n * ], people); // => [bob, clara, alice]\n */\n\nvar sortByPaths = useWith(sortWith, [mapPathsToAscendSort, identity]);\nexport default sortByPaths;","map":{"version":3,"names":["ascend","identity","map","path","pipe","sortWith","useWith","pathToAscendSort","mapPathsToAscendSort","sortByPaths"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/sortByPaths.js"],"sourcesContent":["import { ascend, identity, map, path, pipe, sortWith, useWith } from 'ramda';\nvar pathToAscendSort = pipe(path, ascend);\nvar mapPathsToAscendSort = map(pathToAscendSort);\n\n/**\n * Sort a list of objects by a list of paths (if first path value is equivalent, sort by second, etc).\n *\n * @func sortByPaths\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/3.1.0|v3.1.0}\n * @category List\n * @sig [[k]] -> [{k: v}] -> [{k: v}]\n * @param {Array.<Array.<string>>} paths A list of paths in the list param to sort by\n * @param {Array.<object>} list A list of objects to be sorted\n * @return {Array.<object>} A new list sorted by the paths in the paths param\n * @example\n *\n * const alice = {\n *   name: 'Alice',\n *   address: {\n *     street: 31,\n *     zipCode: 97777,\n *   },\n * };\n * const bob = {\n *   name: 'Bob',\n *   address: {\n *     street: 31,\n *     zipCode: 55555,\n *   },\n * };\n * const clara = {\n *   name: 'Clara',\n *   address: {\n *     street: 32,\n *     zipCode: 90210,\n *   },\n * };\n * const people = [clara, bob, alice]\n *\n * RA.sortByPaths([\n *   ['address', 'street'],\n *   ['address', 'zipCode'],\n * ], people); // => [bob, alice, clara]\n *\n * RA.sortByPaths([\n *   ['address', 'zipCode'],\n *   ['address', 'street'],\n * ], people); // => [bob, clara, alice]\n */\n\nvar sortByPaths = useWith(sortWith, [mapPathsToAscendSort, identity]);\nexport default sortByPaths;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAC5E,IAAIC,gBAAgB,GAAGH,IAAI,CAACD,IAAI,EAAEH,MAAM,CAAC;AACzC,IAAIQ,oBAAoB,GAAGN,GAAG,CAACK,gBAAgB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIE,WAAW,GAAGH,OAAO,CAACD,QAAQ,EAAE,CAACG,oBAAoB,EAAEP,QAAQ,CAAC,CAAC;AACrE,eAAeQ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}