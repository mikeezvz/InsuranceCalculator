{"ast":null,"code":"import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Promise.allSettled.js';\nexport var allSettledPPonyfill = curryN(1, ponyfill);\n\n/**\n * Returns a promise that is fulfilled with an array of promise state snapshots,\n * but only after all the original promises have settled, i.e. become either fulfilled or rejected.\n * We say that a promise is settled if it is not pending, i.e. if it is either fulfilled or rejected.\n *\n * @func allSettledP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.18.0|v2.18.0}\n * @category Function\n * @typedef Settlement = { status: String, value: * }\n * @sig [Promise a] -> Promise [Settlement a]\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} Returns a promise that is fulfilled with an array of promise state snapshots\n * @see {@link RA.allP|allP}\n * @example\n *\n * RA.allSettledP([\n *   Promise.resolve(1),\n *   2,\n *   Promise.reject(3),\n * ]); //=> Promise([{ status: 'fulfilled', value: 1 }, { status: 'fulfilled', value: 2 }, { status: 'rejected', reason: 3 }])\n */\nvar allSettledP = isFunction(Promise.allSettled) ? curryN(1, bind(Promise.allSettled, Promise)) : allSettledPPonyfill;\nexport default allSettledP;","map":{"version":3,"names":["bind","curryN","isFunction","ponyfill","allSettledPPonyfill","allSettledP","Promise","allSettled"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/allSettledP.js"],"sourcesContent":["import { bind, curryN } from 'ramda';\nimport isFunction from './isFunction.js';\nimport ponyfill from './internal/ponyfills/Promise.allSettled.js';\nexport var allSettledPPonyfill = curryN(1, ponyfill);\n\n/**\n * Returns a promise that is fulfilled with an array of promise state snapshots,\n * but only after all the original promises have settled, i.e. become either fulfilled or rejected.\n * We say that a promise is settled if it is not pending, i.e. if it is either fulfilled or rejected.\n *\n * @func allSettledP\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.18.0|v2.18.0}\n * @category Function\n * @typedef Settlement = { status: String, value: * }\n * @sig [Promise a] -> Promise [Settlement a]\n * @param {Iterable.<*>} iterable An iterable object such as an Array or String\n * @return {Promise} Returns a promise that is fulfilled with an array of promise state snapshots\n * @see {@link RA.allP|allP}\n * @example\n *\n * RA.allSettledP([\n *   Promise.resolve(1),\n *   2,\n *   Promise.reject(3),\n * ]); //=> Promise([{ status: 'fulfilled', value: 1 }, { status: 'fulfilled', value: 2 }, { status: 'rejected', reason: 3 }])\n */\nvar allSettledP = isFunction(Promise.allSettled) ? curryN(1, bind(Promise.allSettled, Promise)) : allSettledPPonyfill;\nexport default allSettledP;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,OAAO;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,4CAA4C;AACjE,OAAO,IAAIC,mBAAmB,GAAGH,MAAM,CAAC,CAAC,EAAEE,QAAQ,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,WAAW,GAAGH,UAAU,CAACI,OAAO,CAACC,UAAU,CAAC,GAAGN,MAAM,CAAC,CAAC,EAAED,IAAI,CAACM,OAAO,CAACC,UAAU,EAAED,OAAO,CAAC,CAAC,GAAGF,mBAAmB;AACrH,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}