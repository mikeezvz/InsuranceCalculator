{"ast":null,"code":"import _concat from \"./internal/_concat.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> (a -> a) -> [a] -> [a]\n * @param {Number} idx The index.\n * @param {Function} fn The function to apply.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\n *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']\n * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]\n * @symb R.adjust(0, f, [a, b]) = [f(a), b]\n */\nvar adjust = /*#__PURE__*/_curry3(function adjust(idx, fn, list) {\n  var len = list.length;\n  if (idx >= len || idx < -len) {\n    return list;\n  }\n  var _idx = (len + idx) % len;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\nexport default adjust;","map":{"version":3,"names":["_concat","_curry3","adjust","idx","fn","list","len","length","_idx","_list"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda/es/adjust.js"],"sourcesContent":["import _concat from \"./internal/_concat.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> (a -> a) -> [a] -> [a]\n * @param {Number} idx The index.\n * @param {Function} fn The function to apply.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\n *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']\n * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]\n * @symb R.adjust(0, f, [a, b]) = [f(a), b]\n */\nvar adjust = /*#__PURE__*/_curry3(function adjust(idx, fn, list) {\n  var len = list.length;\n  if (idx >= len || idx < -len) {\n    return list;\n  }\n  var _idx = (len + idx) % len;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\nexport default adjust;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,OAAO,MAAM,uBAAuB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAG,aAAaD,OAAO,CAAC,SAASC,MAAMA,CAACC,GAAG,EAAEC,EAAE,EAAEC,IAAI,EAAE;EAC/D,IAAIC,GAAG,GAAGD,IAAI,CAACE,MAAM;EACrB,IAAIJ,GAAG,IAAIG,GAAG,IAAIH,GAAG,GAAG,CAACG,GAAG,EAAE;IAC5B,OAAOD,IAAI;EACb;EACA,IAAIG,IAAI,GAAG,CAACF,GAAG,GAAGH,GAAG,IAAIG,GAAG;EAC5B,IAAIG,KAAK,GAAGT,OAAO,CAACK,IAAI,CAAC;EACzBI,KAAK,CAACD,IAAI,CAAC,GAAGJ,EAAE,CAACC,IAAI,CAACG,IAAI,CAAC,CAAC;EAC5B,OAAOC,KAAK;AACd,CAAC,CAAC;AACF,eAAeP,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}