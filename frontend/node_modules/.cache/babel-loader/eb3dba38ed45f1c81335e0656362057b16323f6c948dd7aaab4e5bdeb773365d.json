{"ast":null,"code":"import { isArrayElement, deepmerge } from '@swagger-api/apidom-core';\nimport { isSchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport toPath from '../utils/to-path.js';\nclass AllOfVisitor {\n  options;\n  SchemaElement = {\n    leave(schemaElement, key, parent, path, ancestors) {\n      // do nothing\n      if (typeof schemaElement.allOf === 'undefined') return undefined;\n\n      // collect error and return if allOf keyword is not an array\n      if (!isArrayElement(schemaElement.allOf)) {\n        var _this$options$derefer, _this$options$derefer2;\n        const error = new TypeError('allOf must be an array');\n        error.fullPath = [...toPath([...ancestors, parent, schemaElement]), 'allOf'];\n        (_this$options$derefer = this.options.dereference.dereferenceOpts) === null || _this$options$derefer === void 0 || (_this$options$derefer = _this$options$derefer.errors) === null || _this$options$derefer === void 0 || (_this$options$derefer2 = _this$options$derefer.push) === null || _this$options$derefer2 === void 0 || _this$options$derefer2.call(_this$options$derefer, error);\n        return undefined;\n      }\n\n      // remove allOf keyword if empty\n      if (schemaElement.allOf.isEmpty) {\n        schemaElement.remove('allOf');\n        return undefined;\n      }\n\n      // collect errors if allOf keyword contains anything else than Schema Object\n      const includesSchemaElementOnly = schemaElement.allOf.content.every(isSchemaElement);\n      if (!includesSchemaElementOnly) {\n        var _this$options$derefer3, _this$options$derefer4;\n        const error = new TypeError('Elements in allOf must be objects');\n        error.fullPath = [...toPath([...ancestors, parent, schemaElement]), 'allOf'];\n        (_this$options$derefer3 = this.options.dereference.dereferenceOpts) === null || _this$options$derefer3 === void 0 || (_this$options$derefer3 = _this$options$derefer3.errors) === null || _this$options$derefer3 === void 0 || (_this$options$derefer4 = _this$options$derefer3.push) === null || _this$options$derefer4 === void 0 || _this$options$derefer4.call(_this$options$derefer3, error);\n        return undefined;\n      }\n      while (schemaElement.hasKey('allOf')) {\n        const {\n          allOf\n        } = schemaElement;\n        schemaElement.remove('allOf');\n        const allOfMerged = deepmerge.all([...allOf.content, schemaElement]);\n\n        /**\n         * If there was not an original $$ref value, make sure to remove\n         * any $$ref value that may exist from the result of `allOf` merges.\n         */\n        if (!schemaElement.hasKey('$$ref')) {\n          allOfMerged.remove('$$ref');\n        }\n\n        /**\n         * If there was an example keyword in the original schema,\n         * keep it instead of merging with example from other schema.\n         */\n        if (schemaElement.hasKey('example')) {\n          const member = allOfMerged.getMember('example');\n          if (member) {\n            member.value = schemaElement.get('example');\n          }\n        }\n\n        /**\n         * If there was an examples keyword in the original schema,\n         * keep it instead of merging with examples from other schema.\n         */\n        if (schemaElement.hasKey('examples')) {\n          const member = allOfMerged.getMember('examples');\n          if (member) {\n            member.value = schemaElement.get('examples');\n          }\n        }\n        schemaElement.content = allOfMerged.content;\n      }\n      return undefined;\n    }\n  };\n  constructor({\n    options\n  }) {\n    this.options = options;\n  }\n}\nexport default AllOfVisitor;","map":{"version":3,"names":["isArrayElement","deepmerge","isSchemaElement","toPath","AllOfVisitor","options","SchemaElement","leave","schemaElement","key","parent","path","ancestors","allOf","undefined","_this$options$derefer","_this$options$derefer2","error","TypeError","fullPath","dereference","dereferenceOpts","errors","push","call","isEmpty","remove","includesSchemaElementOnly","content","every","_this$options$derefer3","_this$options$derefer4","hasKey","allOfMerged","all","member","getMember","value","get","constructor"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/swagger-client/es/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/visitors/all-of.js"],"sourcesContent":["import { isArrayElement, deepmerge } from '@swagger-api/apidom-core';\nimport { isSchemaElement } from '@swagger-api/apidom-ns-openapi-3-1';\nimport toPath from '../utils/to-path.js';\nclass AllOfVisitor {\n  options;\n  SchemaElement = {\n    leave(schemaElement, key, parent, path, ancestors) {\n      // do nothing\n      if (typeof schemaElement.allOf === 'undefined') return undefined;\n\n      // collect error and return if allOf keyword is not an array\n      if (!isArrayElement(schemaElement.allOf)) {\n        var _this$options$derefer, _this$options$derefer2;\n        const error = new TypeError('allOf must be an array');\n        error.fullPath = [...toPath([...ancestors, parent, schemaElement]), 'allOf'];\n        (_this$options$derefer = this.options.dereference.dereferenceOpts) === null || _this$options$derefer === void 0 || (_this$options$derefer = _this$options$derefer.errors) === null || _this$options$derefer === void 0 || (_this$options$derefer2 = _this$options$derefer.push) === null || _this$options$derefer2 === void 0 || _this$options$derefer2.call(_this$options$derefer, error);\n        return undefined;\n      }\n\n      // remove allOf keyword if empty\n      if (schemaElement.allOf.isEmpty) {\n        schemaElement.remove('allOf');\n        return undefined;\n      }\n\n      // collect errors if allOf keyword contains anything else than Schema Object\n      const includesSchemaElementOnly = schemaElement.allOf.content.every(isSchemaElement);\n      if (!includesSchemaElementOnly) {\n        var _this$options$derefer3, _this$options$derefer4;\n        const error = new TypeError('Elements in allOf must be objects');\n        error.fullPath = [...toPath([...ancestors, parent, schemaElement]), 'allOf'];\n        (_this$options$derefer3 = this.options.dereference.dereferenceOpts) === null || _this$options$derefer3 === void 0 || (_this$options$derefer3 = _this$options$derefer3.errors) === null || _this$options$derefer3 === void 0 || (_this$options$derefer4 = _this$options$derefer3.push) === null || _this$options$derefer4 === void 0 || _this$options$derefer4.call(_this$options$derefer3, error);\n        return undefined;\n      }\n      while (schemaElement.hasKey('allOf')) {\n        const {\n          allOf\n        } = schemaElement;\n        schemaElement.remove('allOf');\n        const allOfMerged = deepmerge.all([...allOf.content, schemaElement]);\n\n        /**\n         * If there was not an original $$ref value, make sure to remove\n         * any $$ref value that may exist from the result of `allOf` merges.\n         */\n        if (!schemaElement.hasKey('$$ref')) {\n          allOfMerged.remove('$$ref');\n        }\n\n        /**\n         * If there was an example keyword in the original schema,\n         * keep it instead of merging with example from other schema.\n         */\n        if (schemaElement.hasKey('example')) {\n          const member = allOfMerged.getMember('example');\n          if (member) {\n            member.value = schemaElement.get('example');\n          }\n        }\n\n        /**\n         * If there was an examples keyword in the original schema,\n         * keep it instead of merging with examples from other schema.\n         */\n        if (schemaElement.hasKey('examples')) {\n          const member = allOfMerged.getMember('examples');\n          if (member) {\n            member.value = schemaElement.get('examples');\n          }\n        }\n        schemaElement.content = allOfMerged.content;\n      }\n      return undefined;\n    }\n  };\n  constructor({\n    options\n  }) {\n    this.options = options;\n  }\n}\nexport default AllOfVisitor;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,SAAS,QAAQ,0BAA0B;AACpE,SAASC,eAAe,QAAQ,oCAAoC;AACpE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,MAAMC,YAAY,CAAC;EACjBC,OAAO;EACPC,aAAa,GAAG;IACdC,KAAKA,CAACC,aAAa,EAAEC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAE;MACjD;MACA,IAAI,OAAOJ,aAAa,CAACK,KAAK,KAAK,WAAW,EAAE,OAAOC,SAAS;;MAEhE;MACA,IAAI,CAACd,cAAc,CAACQ,aAAa,CAACK,KAAK,CAAC,EAAE;QACxC,IAAIE,qBAAqB,EAAEC,sBAAsB;QACjD,MAAMC,KAAK,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;QACrDD,KAAK,CAACE,QAAQ,GAAG,CAAC,GAAGhB,MAAM,CAAC,CAAC,GAAGS,SAAS,EAAEF,MAAM,EAAEF,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC;QAC5E,CAACO,qBAAqB,GAAG,IAAI,CAACV,OAAO,CAACe,WAAW,CAACC,eAAe,MAAM,IAAI,IAAIN,qBAAqB,KAAK,KAAK,CAAC,IAAI,CAACA,qBAAqB,GAAGA,qBAAqB,CAACO,MAAM,MAAM,IAAI,IAAIP,qBAAqB,KAAK,KAAK,CAAC,IAAI,CAACC,sBAAsB,GAAGD,qBAAqB,CAACQ,IAAI,MAAM,IAAI,IAAIP,sBAAsB,KAAK,KAAK,CAAC,IAAIA,sBAAsB,CAACQ,IAAI,CAACT,qBAAqB,EAAEE,KAAK,CAAC;QAC1X,OAAOH,SAAS;MAClB;;MAEA;MACA,IAAIN,aAAa,CAACK,KAAK,CAACY,OAAO,EAAE;QAC/BjB,aAAa,CAACkB,MAAM,CAAC,OAAO,CAAC;QAC7B,OAAOZ,SAAS;MAClB;;MAEA;MACA,MAAMa,yBAAyB,GAAGnB,aAAa,CAACK,KAAK,CAACe,OAAO,CAACC,KAAK,CAAC3B,eAAe,CAAC;MACpF,IAAI,CAACyB,yBAAyB,EAAE;QAC9B,IAAIG,sBAAsB,EAAEC,sBAAsB;QAClD,MAAMd,KAAK,GAAG,IAAIC,SAAS,CAAC,mCAAmC,CAAC;QAChED,KAAK,CAACE,QAAQ,GAAG,CAAC,GAAGhB,MAAM,CAAC,CAAC,GAAGS,SAAS,EAAEF,MAAM,EAAEF,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC;QAC5E,CAACsB,sBAAsB,GAAG,IAAI,CAACzB,OAAO,CAACe,WAAW,CAACC,eAAe,MAAM,IAAI,IAAIS,sBAAsB,KAAK,KAAK,CAAC,IAAI,CAACA,sBAAsB,GAAGA,sBAAsB,CAACR,MAAM,MAAM,IAAI,IAAIQ,sBAAsB,KAAK,KAAK,CAAC,IAAI,CAACC,sBAAsB,GAAGD,sBAAsB,CAACP,IAAI,MAAM,IAAI,IAAIQ,sBAAsB,KAAK,KAAK,CAAC,IAAIA,sBAAsB,CAACP,IAAI,CAACM,sBAAsB,EAAEb,KAAK,CAAC;QACjY,OAAOH,SAAS;MAClB;MACA,OAAON,aAAa,CAACwB,MAAM,CAAC,OAAO,CAAC,EAAE;QACpC,MAAM;UACJnB;QACF,CAAC,GAAGL,aAAa;QACjBA,aAAa,CAACkB,MAAM,CAAC,OAAO,CAAC;QAC7B,MAAMO,WAAW,GAAGhC,SAAS,CAACiC,GAAG,CAAC,CAAC,GAAGrB,KAAK,CAACe,OAAO,EAAEpB,aAAa,CAAC,CAAC;;QAEpE;AACR;AACA;AACA;QACQ,IAAI,CAACA,aAAa,CAACwB,MAAM,CAAC,OAAO,CAAC,EAAE;UAClCC,WAAW,CAACP,MAAM,CAAC,OAAO,CAAC;QAC7B;;QAEA;AACR;AACA;AACA;QACQ,IAAIlB,aAAa,CAACwB,MAAM,CAAC,SAAS,CAAC,EAAE;UACnC,MAAMG,MAAM,GAAGF,WAAW,CAACG,SAAS,CAAC,SAAS,CAAC;UAC/C,IAAID,MAAM,EAAE;YACVA,MAAM,CAACE,KAAK,GAAG7B,aAAa,CAAC8B,GAAG,CAAC,SAAS,CAAC;UAC7C;QACF;;QAEA;AACR;AACA;AACA;QACQ,IAAI9B,aAAa,CAACwB,MAAM,CAAC,UAAU,CAAC,EAAE;UACpC,MAAMG,MAAM,GAAGF,WAAW,CAACG,SAAS,CAAC,UAAU,CAAC;UAChD,IAAID,MAAM,EAAE;YACVA,MAAM,CAACE,KAAK,GAAG7B,aAAa,CAAC8B,GAAG,CAAC,UAAU,CAAC;UAC9C;QACF;QACA9B,aAAa,CAACoB,OAAO,GAAGK,WAAW,CAACL,OAAO;MAC7C;MACA,OAAOd,SAAS;IAClB;EACF,CAAC;EACDyB,WAAWA,CAAC;IACVlC;EACF,CAAC,EAAE;IACD,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;AACF;AACA,eAAeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}