{"ast":null,"code":"import { curry, identical, all } from 'ramda';\n\n/**\n * Returns true if all items in the list are equivalent to user provided value using `R.identical` for equality comparisons.\n *\n * @func allIdenticalTo\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.11.0|v2.11.0}\n * @category List\n * @sig a -> [b] -> Boolean\n * @param {*} val User provided value to check the `list` against\n * @param {Array} list The list of values\n * @return {boolean}\n * @see {@link RA.allIdentical|allIdentical}, {@link http://ramdajs.com/docs/#identical|R.identical}\n * @example\n *\n * RA.allIdenticalTo(1, [ 1, 2, 3, 4 ]); //=> false\n * RA.allIdenticalTo(1, [ 1, 1, 1, 1 ]); //=> true\n * RA.allIdenticalTo(1, []); //=> true\n * RA.allIdenticalTo({}, [ {}, {} ]); //=> false\n *\n */\nvar allIdenticalTo = curry(function (val, list) {\n  return all(identical(val), list);\n});\nexport default allIdenticalTo;","map":{"version":3,"names":["curry","identical","all","allIdenticalTo","val","list"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/allIdenticalTo.js"],"sourcesContent":["import { curry, identical, all } from 'ramda';\n\n/**\n * Returns true if all items in the list are equivalent to user provided value using `R.identical` for equality comparisons.\n *\n * @func allIdenticalTo\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.11.0|v2.11.0}\n * @category List\n * @sig a -> [b] -> Boolean\n * @param {*} val User provided value to check the `list` against\n * @param {Array} list The list of values\n * @return {boolean}\n * @see {@link RA.allIdentical|allIdentical}, {@link http://ramdajs.com/docs/#identical|R.identical}\n * @example\n *\n * RA.allIdenticalTo(1, [ 1, 2, 3, 4 ]); //=> false\n * RA.allIdenticalTo(1, [ 1, 1, 1, 1 ]); //=> true\n * RA.allIdenticalTo(1, []); //=> true\n * RA.allIdenticalTo({}, [ {}, {} ]); //=> false\n *\n */\nvar allIdenticalTo = curry(function (val, list) {\n  return all(identical(val), list);\n});\nexport default allIdenticalTo;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,GAAG,QAAQ,OAAO;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAGH,KAAK,CAAC,UAAUI,GAAG,EAAEC,IAAI,EAAE;EAC9C,OAAOH,GAAG,CAACD,SAAS,CAACG,GAAG,CAAC,EAAEC,IAAI,CAAC;AAClC,CAAC,CAAC;AACF,eAAeF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}