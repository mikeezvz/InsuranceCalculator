{"ast":null,"code":"import { Ast as AST, Parser } from 'apg-lite';\nimport Grammar from \"../path-templating.mjs\";\nimport slashCallback from \"./callbacks/slash.mjs\";\nimport pathTemplateCallback from \"./callbacks/path-template.mjs\";\nimport pathCallback from \"./callbacks/path.mjs\";\nimport pathLiteralCallback from \"./callbacks/path-literal.mjs\";\nimport queryCallback from \"./callbacks/query.mjs\";\nimport queryMarkerCallback from \"./callbacks/query-marker.mjs\";\nimport fragmentCallback from \"./callbacks/fragment.mjs\";\nimport fragmentMarkerCallback from \"./callbacks/fragment-marker.mjs\";\nimport templateExpressionCallback from \"./callbacks/template-expression.mjs\";\nimport templateExpressionParamNameCallback from \"./callbacks/template-expression-param-name.mjs\";\nconst grammar = new Grammar();\nconst parse = pathTemplate => {\n  const parser = new Parser();\n  parser.ast = new AST();\n  parser.ast.callbacks['path-template'] = pathTemplateCallback;\n  parser.ast.callbacks['path'] = pathCallback;\n  parser.ast.callbacks['query'] = queryCallback;\n  parser.ast.callbacks['query-marker'] = queryMarkerCallback;\n  parser.ast.callbacks['fragment'] = fragmentCallback;\n  parser.ast.callbacks['fragment-marker'] = fragmentMarkerCallback;\n  parser.ast.callbacks['slash'] = slashCallback;\n  parser.ast.callbacks['path-literal'] = pathLiteralCallback;\n  parser.ast.callbacks['template-expression'] = templateExpressionCallback;\n  parser.ast.callbacks['template-expression-param-name'] = templateExpressionParamNameCallback;\n  const result = parser.parse(grammar, 'path-template', pathTemplate);\n  return {\n    result,\n    ast: parser.ast\n  };\n};\nexport default parse;","map":{"version":3,"names":["Ast","AST","Parser","Grammar","slashCallback","pathTemplateCallback","pathCallback","pathLiteralCallback","queryCallback","queryMarkerCallback","fragmentCallback","fragmentMarkerCallback","templateExpressionCallback","templateExpressionParamNameCallback","grammar","parse","pathTemplate","parser","ast","callbacks","result"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/openapi-path-templating/es/parse/index.mjs"],"sourcesContent":["import { Ast as AST, Parser } from 'apg-lite';\nimport Grammar from \"../path-templating.mjs\";\nimport slashCallback from \"./callbacks/slash.mjs\";\nimport pathTemplateCallback from \"./callbacks/path-template.mjs\";\nimport pathCallback from \"./callbacks/path.mjs\";\nimport pathLiteralCallback from \"./callbacks/path-literal.mjs\";\nimport queryCallback from \"./callbacks/query.mjs\";\nimport queryMarkerCallback from \"./callbacks/query-marker.mjs\";\nimport fragmentCallback from \"./callbacks/fragment.mjs\";\nimport fragmentMarkerCallback from \"./callbacks/fragment-marker.mjs\";\nimport templateExpressionCallback from \"./callbacks/template-expression.mjs\";\nimport templateExpressionParamNameCallback from \"./callbacks/template-expression-param-name.mjs\";\nconst grammar = new Grammar();\nconst parse = pathTemplate => {\n  const parser = new Parser();\n  parser.ast = new AST();\n  parser.ast.callbacks['path-template'] = pathTemplateCallback;\n  parser.ast.callbacks['path'] = pathCallback;\n  parser.ast.callbacks['query'] = queryCallback;\n  parser.ast.callbacks['query-marker'] = queryMarkerCallback;\n  parser.ast.callbacks['fragment'] = fragmentCallback;\n  parser.ast.callbacks['fragment-marker'] = fragmentMarkerCallback;\n  parser.ast.callbacks['slash'] = slashCallback;\n  parser.ast.callbacks['path-literal'] = pathLiteralCallback;\n  parser.ast.callbacks['template-expression'] = templateExpressionCallback;\n  parser.ast.callbacks['template-expression-param-name'] = templateExpressionParamNameCallback;\n  const result = parser.parse(grammar, 'path-template', pathTemplate);\n  return {\n    result,\n    ast: parser.ast\n  };\n};\nexport default parse;"],"mappings":"AAAA,SAASA,GAAG,IAAIC,GAAG,EAAEC,MAAM,QAAQ,UAAU;AAC7C,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,oBAAoB,MAAM,+BAA+B;AAChE,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,gBAAgB,MAAM,0BAA0B;AACvD,OAAOC,sBAAsB,MAAM,iCAAiC;AACpE,OAAOC,0BAA0B,MAAM,qCAAqC;AAC5E,OAAOC,mCAAmC,MAAM,gDAAgD;AAChG,MAAMC,OAAO,GAAG,IAAIX,OAAO,CAAC,CAAC;AAC7B,MAAMY,KAAK,GAAGC,YAAY,IAAI;EAC5B,MAAMC,MAAM,GAAG,IAAIf,MAAM,CAAC,CAAC;EAC3Be,MAAM,CAACC,GAAG,GAAG,IAAIjB,GAAG,CAAC,CAAC;EACtBgB,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,eAAe,CAAC,GAAGd,oBAAoB;EAC5DY,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,MAAM,CAAC,GAAGb,YAAY;EAC3CW,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,OAAO,CAAC,GAAGX,aAAa;EAC7CS,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,cAAc,CAAC,GAAGV,mBAAmB;EAC1DQ,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,UAAU,CAAC,GAAGT,gBAAgB;EACnDO,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,iBAAiB,CAAC,GAAGR,sBAAsB;EAChEM,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,OAAO,CAAC,GAAGf,aAAa;EAC7Ca,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,cAAc,CAAC,GAAGZ,mBAAmB;EAC1DU,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,qBAAqB,CAAC,GAAGP,0BAA0B;EACxEK,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,gCAAgC,CAAC,GAAGN,mCAAmC;EAC5F,MAAMO,MAAM,GAAGH,MAAM,CAACF,KAAK,CAACD,OAAO,EAAE,eAAe,EAAEE,YAAY,CAAC;EACnE,OAAO;IACLI,MAAM;IACNF,GAAG,EAAED,MAAM,CAACC;EACd,CAAC;AACH,CAAC;AACD,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}