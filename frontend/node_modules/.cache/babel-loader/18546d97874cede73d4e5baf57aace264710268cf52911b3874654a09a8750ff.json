{"ast":null,"code":"import { curry, map } from 'ramda';\n\n// This implementation was highly inspired by the implementations\n// in ramda-lens library.\n//\n// https://github.com/ramda/ramda-lens\n\n// isomorphic :: ((a -> b), (b -> a)) -> Isomorphism\n//     Isomorphism = x -> y\nvar isomorphic = function isomorphic(to, from) {\n  var isomorphism = function isomorphism(x) {\n    return to(x);\n  };\n  isomorphism.from = from;\n  return isomorphism;\n};\n\n// isomorphisms :: ((a -> b), (b -> a)) -> (a -> b)\nvar isomorphisms = function isomorphisms(to, from) {\n  return isomorphic(curry(function (toFunctorFn, target) {\n    return map(from, toFunctorFn(to(target)));\n  }), curry(function (toFunctorFn, target) {\n    return map(to, toFunctorFn(from(target)));\n  }));\n};\n\n// from :: Isomorphism -> a -> b\nvar from = curry(function (isomorphism, x) {\n  return isomorphism.from(x);\n});\n\n/**\n * Defines an isomorphism that will work like a lens. It takes two functions.\n * The function that converts and the function that recovers.\n *\n * @func lensIso\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|1.19.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> (a -> s) -> Lens s a\n * @param {!function} to The function that converts\n * @param {!function} from The function that recovers\n * @return {!function} The isomorphic lens\n * @see {@link http://ramdajs.com/docs/#lens|R.lens}\n *\n * @example\n *\n * const lensJSON = RA.lensIso(JSON.parse, JSON.stringify);\n *\n * R.over(lensJSON, assoc('b', 2), '{\"a\":1}'); //=> '{\"a\":1,\"b\":2}'\n * R.over(RA.lensIso.from(lensJSON), R.replace('}', ',\"b\":2}'), { a: 1 }); // => { a: 1, b: 2 }\n */\nvar lensIso = curry(isomorphisms);\nlensIso.from = from;\nexport default lensIso;","map":{"version":3,"names":["curry","map","isomorphic","to","from","isomorphism","x","isomorphisms","toFunctorFn","target","lensIso"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/lensIso.js"],"sourcesContent":["import { curry, map } from 'ramda';\n\n// This implementation was highly inspired by the implementations\n// in ramda-lens library.\n//\n// https://github.com/ramda/ramda-lens\n\n// isomorphic :: ((a -> b), (b -> a)) -> Isomorphism\n//     Isomorphism = x -> y\nvar isomorphic = function isomorphic(to, from) {\n  var isomorphism = function isomorphism(x) {\n    return to(x);\n  };\n  isomorphism.from = from;\n  return isomorphism;\n};\n\n// isomorphisms :: ((a -> b), (b -> a)) -> (a -> b)\nvar isomorphisms = function isomorphisms(to, from) {\n  return isomorphic(curry(function (toFunctorFn, target) {\n    return map(from, toFunctorFn(to(target)));\n  }), curry(function (toFunctorFn, target) {\n    return map(to, toFunctorFn(from(target)));\n  }));\n};\n\n// from :: Isomorphism -> a -> b\nvar from = curry(function (isomorphism, x) {\n  return isomorphism.from(x);\n});\n\n/**\n * Defines an isomorphism that will work like a lens. It takes two functions.\n * The function that converts and the function that recovers.\n *\n * @func lensIso\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.19.0|1.19.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> (a -> s) -> Lens s a\n * @param {!function} to The function that converts\n * @param {!function} from The function that recovers\n * @return {!function} The isomorphic lens\n * @see {@link http://ramdajs.com/docs/#lens|R.lens}\n *\n * @example\n *\n * const lensJSON = RA.lensIso(JSON.parse, JSON.stringify);\n *\n * R.over(lensJSON, assoc('b', 2), '{\"a\":1}'); //=> '{\"a\":1,\"b\":2}'\n * R.over(RA.lensIso.from(lensJSON), R.replace('}', ',\"b\":2}'), { a: 1 }); // => { a: 1, b: 2 }\n */\nvar lensIso = curry(isomorphisms);\nlensIso.from = from;\nexport default lensIso;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,GAAG,QAAQ,OAAO;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,EAAE,EAAEC,IAAI,EAAE;EAC7C,IAAIC,WAAW,GAAG,SAASA,WAAWA,CAACC,CAAC,EAAE;IACxC,OAAOH,EAAE,CAACG,CAAC,CAAC;EACd,CAAC;EACDD,WAAW,CAACD,IAAI,GAAGA,IAAI;EACvB,OAAOC,WAAW;AACpB,CAAC;;AAED;AACA,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAACJ,EAAE,EAAEC,IAAI,EAAE;EACjD,OAAOF,UAAU,CAACF,KAAK,CAAC,UAAUQ,WAAW,EAAEC,MAAM,EAAE;IACrD,OAAOR,GAAG,CAACG,IAAI,EAAEI,WAAW,CAACL,EAAE,CAACM,MAAM,CAAC,CAAC,CAAC;EAC3C,CAAC,CAAC,EAAET,KAAK,CAAC,UAAUQ,WAAW,EAAEC,MAAM,EAAE;IACvC,OAAOR,GAAG,CAACE,EAAE,EAAEK,WAAW,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC;EAC3C,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA,IAAIL,IAAI,GAAGJ,KAAK,CAAC,UAAUK,WAAW,EAAEC,CAAC,EAAE;EACzC,OAAOD,WAAW,CAACD,IAAI,CAACE,CAAC,CAAC;AAC5B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,OAAO,GAAGV,KAAK,CAACO,YAAY,CAAC;AACjCG,OAAO,CAACN,IAAI,GAAGA,IAAI;AACnB,eAAeM,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}