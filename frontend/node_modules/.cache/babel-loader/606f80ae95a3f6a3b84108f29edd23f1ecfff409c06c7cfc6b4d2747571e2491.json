{"ast":null,"code":"import { visit, dereference, refract as baseRefract, dispatchRefractorPlugins } from '@swagger-api/apidom-core';\nimport { path } from 'ramda';\nimport specification from \"./specification.mjs\";\nimport { keyMap, getNodeType } from \"../traversal/visitor.mjs\";\nimport createToolbox from \"./toolbox.mjs\";\nconst refract = (value, {\n  specPath = ['visitors', 'document', 'objects', 'OpenApi', '$visitor'],\n  plugins = []\n} = {}) => {\n  const element = baseRefract(value);\n  const resolvedSpec = dereference(specification);\n\n  /**\n   * This is where generic ApiDOM becomes semantic (namespace applied).\n   * We don't allow consumers to hook into this translation.\n   * Though we allow consumers to define their onw plugins on already transformed ApiDOM.\n   */\n  const RootVisitorClass = path(specPath, resolvedSpec);\n  const rootVisitor = new RootVisitorClass({\n    specObj: resolvedSpec\n  });\n  visit(element, rootVisitor);\n\n  /**\n   * Running plugins visitors means extra single traversal === performance hit.\n   */\n  return dispatchRefractorPlugins(rootVisitor.element, plugins, {\n    toolboxCreator: createToolbox,\n    visitorOptions: {\n      keyMap,\n      nodeTypeGetter: getNodeType\n    }\n  });\n};\nexport const createRefractor = specPath => (value, options = {}) => refract(value, {\n  specPath,\n  ...options\n});\nexport default refract;","map":{"version":3,"names":["visit","dereference","refract","baseRefract","dispatchRefractorPlugins","path","specification","keyMap","getNodeType","createToolbox","value","specPath","plugins","element","resolvedSpec","RootVisitorClass","rootVisitor","specObj","toolboxCreator","visitorOptions","nodeTypeGetter","createRefractor","options"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-1/es/refractor/index.mjs"],"sourcesContent":["import { visit, dereference, refract as baseRefract, dispatchRefractorPlugins } from '@swagger-api/apidom-core';\nimport { path } from 'ramda';\nimport specification from \"./specification.mjs\";\nimport { keyMap, getNodeType } from \"../traversal/visitor.mjs\";\nimport createToolbox from \"./toolbox.mjs\";\nconst refract = (value, {\n  specPath = ['visitors', 'document', 'objects', 'OpenApi', '$visitor'],\n  plugins = []\n} = {}) => {\n  const element = baseRefract(value);\n  const resolvedSpec = dereference(specification);\n\n  /**\n   * This is where generic ApiDOM becomes semantic (namespace applied).\n   * We don't allow consumers to hook into this translation.\n   * Though we allow consumers to define their onw plugins on already transformed ApiDOM.\n   */\n  const RootVisitorClass = path(specPath, resolvedSpec);\n  const rootVisitor = new RootVisitorClass({\n    specObj: resolvedSpec\n  });\n  visit(element, rootVisitor);\n\n  /**\n   * Running plugins visitors means extra single traversal === performance hit.\n   */\n  return dispatchRefractorPlugins(rootVisitor.element, plugins, {\n    toolboxCreator: createToolbox,\n    visitorOptions: {\n      keyMap,\n      nodeTypeGetter: getNodeType\n    }\n  });\n};\nexport const createRefractor = specPath => (value, options = {}) => refract(value, {\n  specPath,\n  ...options\n});\nexport default refract;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,WAAW,EAAEC,OAAO,IAAIC,WAAW,EAAEC,wBAAwB,QAAQ,0BAA0B;AAC/G,SAASC,IAAI,QAAQ,OAAO;AAC5B,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,SAASC,MAAM,EAAEC,WAAW,QAAQ,0BAA0B;AAC9D,OAAOC,aAAa,MAAM,eAAe;AACzC,MAAMP,OAAO,GAAGA,CAACQ,KAAK,EAAE;EACtBC,QAAQ,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC;EACrEC,OAAO,GAAG;AACZ,CAAC,GAAG,CAAC,CAAC,KAAK;EACT,MAAMC,OAAO,GAAGV,WAAW,CAACO,KAAK,CAAC;EAClC,MAAMI,YAAY,GAAGb,WAAW,CAACK,aAAa,CAAC;;EAE/C;AACF;AACA;AACA;AACA;EACE,MAAMS,gBAAgB,GAAGV,IAAI,CAACM,QAAQ,EAAEG,YAAY,CAAC;EACrD,MAAME,WAAW,GAAG,IAAID,gBAAgB,CAAC;IACvCE,OAAO,EAAEH;EACX,CAAC,CAAC;EACFd,KAAK,CAACa,OAAO,EAAEG,WAAW,CAAC;;EAE3B;AACF;AACA;EACE,OAAOZ,wBAAwB,CAACY,WAAW,CAACH,OAAO,EAAED,OAAO,EAAE;IAC5DM,cAAc,EAAET,aAAa;IAC7BU,cAAc,EAAE;MACdZ,MAAM;MACNa,cAAc,EAAEZ;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMa,eAAe,GAAGV,QAAQ,IAAI,CAACD,KAAK,EAAEY,OAAO,GAAG,CAAC,CAAC,KAAKpB,OAAO,CAACQ,KAAK,EAAE;EACjFC,QAAQ;EACR,GAAGW;AACL,CAAC,CAAC;AACF,eAAepB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}