{"ast":null,"code":"import { formatFlowPlain, formatFlowSingleQuoted, formatFlowDoubleQuoted, formatBlockLiteral, formatBlockFolded } from \"./canonical-format.mjs\";\nimport { YamlStyle } from \"../nodes/YamlStyle.mjs\";\nimport { YamlNodeKind } from \"../nodes/YamlTag.mjs\";\nclass ScalarTag {\n  static test(node) {\n    return node.tag.kind === YamlNodeKind.Scalar && typeof node.content === 'string';\n  }\n  static canonicalFormat(node) {\n    let canonicalForm = node.content;\n    const nodeClone = node.clone();\n    if (node.style === YamlStyle.Plain) {\n      canonicalForm = formatFlowPlain(node.content);\n    } else if (node.style === YamlStyle.SingleQuoted) {\n      canonicalForm = formatFlowSingleQuoted(node.content);\n    } else if (node.style === YamlStyle.DoubleQuoted) {\n      canonicalForm = formatFlowDoubleQuoted(node.content);\n    } else if (node.style === YamlStyle.Literal) {\n      canonicalForm = formatBlockLiteral(node.content);\n    } else if (node.style === YamlStyle.Folded) {\n      canonicalForm = formatBlockFolded(node.content);\n    }\n    nodeClone.content = canonicalForm;\n    return nodeClone;\n  }\n  static resolve(node) {\n    return node;\n  }\n}\nexport default ScalarTag;","map":{"version":3,"names":["formatFlowPlain","formatFlowSingleQuoted","formatFlowDoubleQuoted","formatBlockLiteral","formatBlockFolded","YamlStyle","YamlNodeKind","ScalarTag","test","node","tag","kind","Scalar","content","canonicalFormat","canonicalForm","nodeClone","clone","style","Plain","SingleQuoted","DoubleQuoted","Literal","Folded","resolve"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ast/es/yaml/schemas/ScalarTag.mjs"],"sourcesContent":["import { formatFlowPlain, formatFlowSingleQuoted, formatFlowDoubleQuoted, formatBlockLiteral, formatBlockFolded } from \"./canonical-format.mjs\";\nimport { YamlStyle } from \"../nodes/YamlStyle.mjs\";\nimport { YamlNodeKind } from \"../nodes/YamlTag.mjs\";\nclass ScalarTag {\n  static test(node) {\n    return node.tag.kind === YamlNodeKind.Scalar && typeof node.content === 'string';\n  }\n  static canonicalFormat(node) {\n    let canonicalForm = node.content;\n    const nodeClone = node.clone();\n    if (node.style === YamlStyle.Plain) {\n      canonicalForm = formatFlowPlain(node.content);\n    } else if (node.style === YamlStyle.SingleQuoted) {\n      canonicalForm = formatFlowSingleQuoted(node.content);\n    } else if (node.style === YamlStyle.DoubleQuoted) {\n      canonicalForm = formatFlowDoubleQuoted(node.content);\n    } else if (node.style === YamlStyle.Literal) {\n      canonicalForm = formatBlockLiteral(node.content);\n    } else if (node.style === YamlStyle.Folded) {\n      canonicalForm = formatBlockFolded(node.content);\n    }\n    nodeClone.content = canonicalForm;\n    return nodeClone;\n  }\n  static resolve(node) {\n    return node;\n  }\n}\nexport default ScalarTag;"],"mappings":"AAAA,SAASA,eAAe,EAAEC,sBAAsB,EAAEC,sBAAsB,EAAEC,kBAAkB,EAAEC,iBAAiB,QAAQ,wBAAwB;AAC/I,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,YAAY,QAAQ,sBAAsB;AACnD,MAAMC,SAAS,CAAC;EACd,OAAOC,IAAIA,CAACC,IAAI,EAAE;IAChB,OAAOA,IAAI,CAACC,GAAG,CAACC,IAAI,KAAKL,YAAY,CAACM,MAAM,IAAI,OAAOH,IAAI,CAACI,OAAO,KAAK,QAAQ;EAClF;EACA,OAAOC,eAAeA,CAACL,IAAI,EAAE;IAC3B,IAAIM,aAAa,GAAGN,IAAI,CAACI,OAAO;IAChC,MAAMG,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAAC,CAAC;IAC9B,IAAIR,IAAI,CAACS,KAAK,KAAKb,SAAS,CAACc,KAAK,EAAE;MAClCJ,aAAa,GAAGf,eAAe,CAACS,IAAI,CAACI,OAAO,CAAC;IAC/C,CAAC,MAAM,IAAIJ,IAAI,CAACS,KAAK,KAAKb,SAAS,CAACe,YAAY,EAAE;MAChDL,aAAa,GAAGd,sBAAsB,CAACQ,IAAI,CAACI,OAAO,CAAC;IACtD,CAAC,MAAM,IAAIJ,IAAI,CAACS,KAAK,KAAKb,SAAS,CAACgB,YAAY,EAAE;MAChDN,aAAa,GAAGb,sBAAsB,CAACO,IAAI,CAACI,OAAO,CAAC;IACtD,CAAC,MAAM,IAAIJ,IAAI,CAACS,KAAK,KAAKb,SAAS,CAACiB,OAAO,EAAE;MAC3CP,aAAa,GAAGZ,kBAAkB,CAACM,IAAI,CAACI,OAAO,CAAC;IAClD,CAAC,MAAM,IAAIJ,IAAI,CAACS,KAAK,KAAKb,SAAS,CAACkB,MAAM,EAAE;MAC1CR,aAAa,GAAGX,iBAAiB,CAACK,IAAI,CAACI,OAAO,CAAC;IACjD;IACAG,SAAS,CAACH,OAAO,GAAGE,aAAa;IACjC,OAAOC,SAAS;EAClB;EACA,OAAOQ,OAAOA,CAACf,IAAI,EAAE;IACnB,OAAOA,IAAI;EACb;AACF;AACA,eAAeF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}