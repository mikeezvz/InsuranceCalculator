{"ast":null,"code":"import { either, curryN } from 'ramda';\nimport isFloat from './isFloat.js';\nimport isInteger from './isInteger.js';\n\n/**\n * Checks if value is a valid `Number`. A valid `Number` is a number that is not `NaN`, `Infinity`\n * or `-Infinity`.\n *\n * @func isValidNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotValidNumber|isNotValidNumber}\n * @example\n *\n * RA.isValidNumber(1); //=> true\n * RA.isValidNumber(''); //=> false\n * RA.isValidNumber(NaN); //=> false\n * RA.isValidNumber(Infinity); //=> false\n * RA.isValidNumber(-Infinity); //=> false\n */\nvar isValidNumber = curryN(1, either(isInteger, isFloat));\nexport default isValidNumber;","map":{"version":3,"names":["either","curryN","isFloat","isInteger","isValidNumber"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/isValidNumber.js"],"sourcesContent":["import { either, curryN } from 'ramda';\nimport isFloat from './isFloat.js';\nimport isInteger from './isInteger.js';\n\n/**\n * Checks if value is a valid `Number`. A valid `Number` is a number that is not `NaN`, `Infinity`\n * or `-Infinity`.\n *\n * @func isValidNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotValidNumber|isNotValidNumber}\n * @example\n *\n * RA.isValidNumber(1); //=> true\n * RA.isValidNumber(''); //=> false\n * RA.isValidNumber(NaN); //=> false\n * RA.isValidNumber(Infinity); //=> false\n * RA.isValidNumber(-Infinity); //=> false\n */\nvar isValidNumber = curryN(1, either(isInteger, isFloat));\nexport default isValidNumber;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,QAAQ,OAAO;AACtC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,SAAS,MAAM,gBAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAGH,MAAM,CAAC,CAAC,EAAED,MAAM,CAACG,SAAS,EAAED,OAAO,CAAC,CAAC;AACzD,eAAeE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}