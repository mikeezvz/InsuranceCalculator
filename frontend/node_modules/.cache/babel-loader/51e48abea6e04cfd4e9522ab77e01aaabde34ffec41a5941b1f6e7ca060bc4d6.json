{"ast":null,"code":"import { view, curryN, equals, pipe } from 'ramda';\n\n/**\n * Returns `true` if data structure focused by the given lens equals provided value.\n *\n * @func lensEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Lens s a -> b -> s -> Boolean\n * @see {@link RA.lensNotEq|lensNotEq}\n * @param {function} lens Van Laarhoven lens\n * @param {*} value The value to compare the focused data structure with\n * @param {*} data The data structure\n * @return {boolean} `true` if the focused data structure equals value, `false` otherwise\n *\n * @example\n *\n * RA.lensEq(R.lensIndex(0), 1, [0, 1, 2]); // => false\n * RA.lensEq(R.lensIndex(1), 1, [0, 1, 2]); // => true\n * RA.lensEq(R.lensPath(['a', 'b']), 'foo', { a: { b: 'foo' } }) // => true\n */\nvar lensEq = curryN(3, function (lens, val, data) {\n  return pipe(view(lens), equals(val))(data);\n});\nexport default lensEq;","map":{"version":3,"names":["view","curryN","equals","pipe","lensEq","lens","val","data"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/lensEq.js"],"sourcesContent":["import { view, curryN, equals, pipe } from 'ramda';\n\n/**\n * Returns `true` if data structure focused by the given lens equals provided value.\n *\n * @func lensEq\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.13.0|1.13.0}\n * @category Relation\n * @typedef Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig  Lens s a -> b -> s -> Boolean\n * @see {@link RA.lensNotEq|lensNotEq}\n * @param {function} lens Van Laarhoven lens\n * @param {*} value The value to compare the focused data structure with\n * @param {*} data The data structure\n * @return {boolean} `true` if the focused data structure equals value, `false` otherwise\n *\n * @example\n *\n * RA.lensEq(R.lensIndex(0), 1, [0, 1, 2]); // => false\n * RA.lensEq(R.lensIndex(1), 1, [0, 1, 2]); // => true\n * RA.lensEq(R.lensPath(['a', 'b']), 'foo', { a: { b: 'foo' } }) // => true\n */\nvar lensEq = curryN(3, function (lens, val, data) {\n  return pipe(view(lens), equals(val))(data);\n});\nexport default lensEq;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAGH,MAAM,CAAC,CAAC,EAAE,UAAUI,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAChD,OAAOJ,IAAI,CAACH,IAAI,CAACK,IAAI,CAAC,EAAEH,MAAM,CAACI,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC;AAC5C,CAAC,CAAC;AACF,eAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}