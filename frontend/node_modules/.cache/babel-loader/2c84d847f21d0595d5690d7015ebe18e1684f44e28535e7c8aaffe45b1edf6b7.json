{"ast":null,"code":"import { ParseResultElement, StringElement } from '@swagger-api/apidom-core';\nimport ParserError from \"../../../errors/ParserError.mjs\";\nimport Parser from \"../Parser.mjs\";\n/**\n * Everything that is not recognized by other parsers will be considered by this parser\n * as a binary data and will be encoded to Base64 format.\n */\nclass BinaryParser extends Parser {\n  constructor(options) {\n    super({\n      ...(options !== null && options !== void 0 ? options : {}),\n      name: 'binary'\n    });\n  }\n  canParse(file) {\n    return this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  parse(file) {\n    try {\n      /**\n       * More information about binary strings and btoa function in following link:\n       *   https://developer.mozilla.org/en-US/docs/Web/API/btoa\n       *\n       * @example\n       * ArrayBuffer to base64 conversion:\n       *\n       * const binaryString = String.fromCharCode.apply(null, file.data);\n       * base64String = btoa(binaryString);\n       */\n      const binaryString = unescape(encodeURIComponent(file.toString()));\n      const base64String = btoa(binaryString);\n      const parseResultElement = new ParseResultElement();\n      if (base64String.length !== 0) {\n        const base64StringElement = new StringElement(base64String);\n        base64StringElement.classes.push('result');\n        parseResultElement.push(base64StringElement);\n      }\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default BinaryParser;","map":{"version":3,"names":["ParseResultElement","StringElement","ParserError","Parser","BinaryParser","constructor","options","name","canParse","file","fileExtensions","length","includes","extension","parse","binaryString","unescape","encodeURIComponent","toString","base64String","btoa","parseResultElement","base64StringElement","classes","push","error","uri","cause"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/parse/parsers/binary/index-browser.mjs"],"sourcesContent":["import { ParseResultElement, StringElement } from '@swagger-api/apidom-core';\nimport ParserError from \"../../../errors/ParserError.mjs\";\nimport Parser from \"../Parser.mjs\";\n/**\n * Everything that is not recognized by other parsers will be considered by this parser\n * as a binary data and will be encoded to Base64 format.\n */\nclass BinaryParser extends Parser {\n  constructor(options) {\n    super({\n      ...(options !== null && options !== void 0 ? options : {}),\n      name: 'binary'\n    });\n  }\n  canParse(file) {\n    return this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  parse(file) {\n    try {\n      /**\n       * More information about binary strings and btoa function in following link:\n       *   https://developer.mozilla.org/en-US/docs/Web/API/btoa\n       *\n       * @example\n       * ArrayBuffer to base64 conversion:\n       *\n       * const binaryString = String.fromCharCode.apply(null, file.data);\n       * base64String = btoa(binaryString);\n       */\n      const binaryString = unescape(encodeURIComponent(file.toString()));\n      const base64String = btoa(binaryString);\n      const parseResultElement = new ParseResultElement();\n      if (base64String.length !== 0) {\n        const base64StringElement = new StringElement(base64String);\n        base64StringElement.classes.push('result');\n        parseResultElement.push(base64StringElement);\n      }\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default BinaryParser;"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,aAAa,QAAQ,0BAA0B;AAC5E,OAAOC,WAAW,MAAM,iCAAiC;AACzD,OAAOC,MAAM,MAAM,eAAe;AAClC;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASD,MAAM,CAAC;EAChCE,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC;MACJ,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,CAAC,CAAC,CAAC;MAC1DC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;EACAC,QAAQA,CAACC,IAAI,EAAE;IACb,OAAO,IAAI,CAACC,cAAc,CAACC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAACD,cAAc,CAACE,QAAQ,CAACH,IAAI,CAACI,SAAS,CAAC;EAC/F;;EAEA;EACAC,KAAKA,CAACL,IAAI,EAAE;IACV,IAAI;MACF;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,MAAMM,YAAY,GAAGC,QAAQ,CAACC,kBAAkB,CAACR,IAAI,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClE,MAAMC,YAAY,GAAGC,IAAI,CAACL,YAAY,CAAC;MACvC,MAAMM,kBAAkB,GAAG,IAAIrB,kBAAkB,CAAC,CAAC;MACnD,IAAImB,YAAY,CAACR,MAAM,KAAK,CAAC,EAAE;QAC7B,MAAMW,mBAAmB,GAAG,IAAIrB,aAAa,CAACkB,YAAY,CAAC;QAC3DG,mBAAmB,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC1CH,kBAAkB,CAACG,IAAI,CAACF,mBAAmB,CAAC;MAC9C;MACA,OAAOD,kBAAkB;IAC3B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAM,IAAIvB,WAAW,CAAC,kBAAkBO,IAAI,CAACiB,GAAG,GAAG,EAAE;QACnDC,KAAK,EAAEF;MACT,CAAC,CAAC;IACJ;EACF;AACF;AACA,eAAerB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}