{"ast":null,"code":"const isNull = require('lodash/isNull');\nconst isString = require('lodash/isString');\nconst isNumber = require('lodash/isNumber');\nconst isBoolean = require('lodash/isBoolean');\nconst isObject = require('lodash/isObject');\nconst JSONSerialiser = require('./serialisers/JSONSerialiser');\nconst elements = require('./elements');\n\n/**\n * @class\n *\n * A refract element implementation with an extensible namespace, able to\n * load other namespaces into it.\n *\n * The namespace allows you to register your own classes to be instantiated\n * when a particular refract element is encountered, and allows you to specify\n * which elements get instantiated for existing Javascript objects.\n */\nclass Namespace {\n  constructor(options) {\n    this.elementMap = {};\n    this.elementDetection = [];\n    this.Element = elements.Element;\n    this.KeyValuePair = elements.KeyValuePair;\n    if (!options || !options.noDefault) {\n      this.useDefault();\n    }\n\n    // These provide the defaults for new elements.\n    this._attributeElementKeys = [];\n    this._attributeElementArrayKeys = [];\n  }\n\n  /**\n   * Use a namespace plugin or load a generic plugin.\n   *\n   * @param plugin\n   */\n  use(plugin) {\n    if (plugin.namespace) {\n      plugin.namespace({\n        base: this\n      });\n    }\n    if (plugin.load) {\n      plugin.load({\n        base: this\n      });\n    }\n    return this;\n  }\n\n  /*\n   * Use the default namespace. This preloads all the default elements\n   * into this registry instance.\n   */\n  useDefault() {\n    // Set up classes for default elements\n    this.register('null', elements.NullElement).register('string', elements.StringElement).register('number', elements.NumberElement).register('boolean', elements.BooleanElement).register('array', elements.ArrayElement).register('object', elements.ObjectElement).register('member', elements.MemberElement).register('ref', elements.RefElement).register('link', elements.LinkElement);\n\n    // Add instance detection functions to convert existing objects into\n    // the corresponding refract elements.\n    this.detect(isNull, elements.NullElement, false).detect(isString, elements.StringElement, false).detect(isNumber, elements.NumberElement, false).detect(isBoolean, elements.BooleanElement, false).detect(Array.isArray, elements.ArrayElement, false).detect(isObject, elements.ObjectElement, false);\n    return this;\n  }\n\n  /**\n   * Register a new element class for an element.\n   *\n   * @param {string} name\n   * @param elementClass\n   */\n  register(name, ElementClass) {\n    this._elements = undefined;\n    this.elementMap[name] = ElementClass;\n    return this;\n  }\n\n  /**\n   * Unregister a previously registered class for an element.\n   *\n   * @param {string} name\n   */\n  unregister(name) {\n    this._elements = undefined;\n    delete this.elementMap[name];\n    return this;\n  }\n\n  /*\n   * Add a new detection function to determine which element\n   * class to use when converting existing js instances into\n   * refract element.\n   */\n  detect(test, ElementClass, givenPrepend) {\n    const prepend = givenPrepend === undefined ? true : givenPrepend;\n    if (prepend) {\n      this.elementDetection.unshift([test, ElementClass]);\n    } else {\n      this.elementDetection.push([test, ElementClass]);\n    }\n    return this;\n  }\n\n  /*\n   * Convert an existing Javascript object into refract element instances, which\n   * can be further processed or serialized into refract.\n   * If the item passed in is already refracted, then it is returned\n   * unmodified.\n   */\n  toElement(value) {\n    if (value instanceof this.Element) {\n      return value;\n    }\n    let element;\n    for (let i = 0; i < this.elementDetection.length; i += 1) {\n      const test = this.elementDetection[i][0];\n      const ElementClass = this.elementDetection[i][1];\n      if (test(value)) {\n        element = new ElementClass(value);\n        break;\n      }\n    }\n    return element;\n  }\n\n  /*\n   * Get an element class given an element name.\n   */\n  getElementClass(element) {\n    const ElementClass = this.elementMap[element];\n    if (ElementClass === undefined) {\n      // Fall back to the base element. We may not know what\n      // to do with the `content`, but downstream software\n      // may know.\n      return this.Element;\n    }\n    return ElementClass;\n  }\n\n  /*\n   * Convert a refract document into refract element instances.\n   */\n  fromRefract(doc) {\n    return this.serialiser.deserialise(doc);\n  }\n\n  /*\n   * Convert an element to a Refracted JSON object.\n   */\n  toRefract(element) {\n    return this.serialiser.serialise(element);\n  }\n\n  /*\n   * Get an object that contains all registered element classes, where\n   * the key is the PascalCased element name and the value is the class.\n   */\n  get elements() {\n    if (this._elements === undefined) {\n      this._elements = {\n        Element: this.Element\n      };\n      Object.keys(this.elementMap).forEach(name => {\n        // Currently, all registered element types use a camelCaseName.\n        // Converting to PascalCase is as simple as upper-casing the first\n        // letter.\n        const pascal = name[0].toUpperCase() + name.substr(1);\n        this._elements[pascal] = this.elementMap[name];\n      });\n    }\n    return this._elements;\n  }\n\n  /**\n   * Convinience method for getting a JSON Serialiser configured with the\n   * current namespace\n   *\n   * @type JSONSerialiser\n   * @readonly\n   *\n   * @memberof Namespace.prototype\n   */\n  get serialiser() {\n    return new JSONSerialiser(this);\n  }\n}\nJSONSerialiser.prototype.Namespace = Namespace;\nmodule.exports = Namespace;","map":{"version":3,"names":["isNull","require","isString","isNumber","isBoolean","isObject","JSONSerialiser","elements","Namespace","constructor","options","elementMap","elementDetection","Element","KeyValuePair","noDefault","useDefault","_attributeElementKeys","_attributeElementArrayKeys","use","plugin","namespace","base","load","register","NullElement","StringElement","NumberElement","BooleanElement","ArrayElement","ObjectElement","MemberElement","RefElement","LinkElement","detect","Array","isArray","name","ElementClass","_elements","undefined","unregister","test","givenPrepend","prepend","unshift","push","toElement","value","element","i","length","getElementClass","fromRefract","doc","serialiser","deserialise","toRefract","serialise","Object","keys","forEach","pascal","toUpperCase","substr","prototype","module","exports"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/minim/lib/Namespace.js"],"sourcesContent":["const isNull = require('lodash/isNull');\nconst isString = require('lodash/isString');\nconst isNumber = require('lodash/isNumber');\nconst isBoolean = require('lodash/isBoolean');\nconst isObject = require('lodash/isObject');\n\nconst JSONSerialiser = require('./serialisers/JSONSerialiser');\nconst elements = require('./elements');\n\n/**\n * @class\n *\n * A refract element implementation with an extensible namespace, able to\n * load other namespaces into it.\n *\n * The namespace allows you to register your own classes to be instantiated\n * when a particular refract element is encountered, and allows you to specify\n * which elements get instantiated for existing Javascript objects.\n */\nclass Namespace {\n  constructor(options) {\n    this.elementMap = {};\n    this.elementDetection = [];\n    this.Element = elements.Element;\n    this.KeyValuePair = elements.KeyValuePair;\n\n    if (!options || !options.noDefault) {\n      this.useDefault();\n    }\n\n    // These provide the defaults for new elements.\n    this._attributeElementKeys = [];\n    this._attributeElementArrayKeys = [];\n  }\n\n  /**\n   * Use a namespace plugin or load a generic plugin.\n   *\n   * @param plugin\n   */\n  use(plugin) {\n    if (plugin.namespace) {\n      plugin.namespace({ base: this });\n    }\n    if (plugin.load) {\n      plugin.load({ base: this });\n    }\n    return this;\n  }\n\n  /*\n   * Use the default namespace. This preloads all the default elements\n   * into this registry instance.\n   */\n  useDefault() {\n    // Set up classes for default elements\n    this\n      .register('null', elements.NullElement)\n      .register('string', elements.StringElement)\n      .register('number', elements.NumberElement)\n      .register('boolean', elements.BooleanElement)\n      .register('array', elements.ArrayElement)\n      .register('object', elements.ObjectElement)\n      .register('member', elements.MemberElement)\n      .register('ref', elements.RefElement)\n      .register('link', elements.LinkElement);\n\n    // Add instance detection functions to convert existing objects into\n    // the corresponding refract elements.\n    this\n      .detect(isNull, elements.NullElement, false)\n      .detect(isString, elements.StringElement, false)\n      .detect(isNumber, elements.NumberElement, false)\n      .detect(isBoolean, elements.BooleanElement, false)\n      .detect(Array.isArray, elements.ArrayElement, false)\n      .detect(isObject, elements.ObjectElement, false);\n\n    return this;\n  }\n\n  /**\n   * Register a new element class for an element.\n   *\n   * @param {string} name\n   * @param elementClass\n   */\n  register(name, ElementClass) {\n    this._elements = undefined;\n    this.elementMap[name] = ElementClass;\n    return this;\n  }\n\n  /**\n   * Unregister a previously registered class for an element.\n   *\n   * @param {string} name\n   */\n  unregister(name) {\n    this._elements = undefined;\n    delete this.elementMap[name];\n    return this;\n  }\n\n  /*\n   * Add a new detection function to determine which element\n   * class to use when converting existing js instances into\n   * refract element.\n   */\n  detect(test, ElementClass, givenPrepend) {\n    const prepend = givenPrepend === undefined ? true : givenPrepend;\n\n    if (prepend) {\n      this.elementDetection.unshift([test, ElementClass]);\n    } else {\n      this.elementDetection.push([test, ElementClass]);\n    }\n\n    return this;\n  }\n\n  /*\n   * Convert an existing Javascript object into refract element instances, which\n   * can be further processed or serialized into refract.\n   * If the item passed in is already refracted, then it is returned\n   * unmodified.\n   */\n  toElement(value) {\n    if (value instanceof this.Element) { return value; }\n\n    let element;\n\n    for (let i = 0; i < this.elementDetection.length; i += 1) {\n      const test = this.elementDetection[i][0];\n      const ElementClass = this.elementDetection[i][1];\n\n      if (test(value)) {\n        element = new ElementClass(value);\n        break;\n      }\n    }\n\n    return element;\n  }\n\n  /*\n   * Get an element class given an element name.\n   */\n  getElementClass(element) {\n    const ElementClass = this.elementMap[element];\n\n    if (ElementClass === undefined) {\n      // Fall back to the base element. We may not know what\n      // to do with the `content`, but downstream software\n      // may know.\n      return this.Element;\n    }\n\n    return ElementClass;\n  }\n\n  /*\n   * Convert a refract document into refract element instances.\n   */\n  fromRefract(doc) {\n    return this.serialiser.deserialise(doc);\n  }\n\n  /*\n   * Convert an element to a Refracted JSON object.\n   */\n  toRefract(element) {\n    return this.serialiser.serialise(element);\n  }\n\n  /*\n   * Get an object that contains all registered element classes, where\n   * the key is the PascalCased element name and the value is the class.\n   */\n  get elements() {\n    if (this._elements === undefined) {\n      this._elements = {\n        Element: this.Element,\n      };\n\n      Object.keys(this.elementMap).forEach((name) => {\n        // Currently, all registered element types use a camelCaseName.\n        // Converting to PascalCase is as simple as upper-casing the first\n        // letter.\n        const pascal = name[0].toUpperCase() + name.substr(1);\n        this._elements[pascal] = this.elementMap[name];\n      });\n    }\n\n    return this._elements;\n  }\n\n  /**\n   * Convinience method for getting a JSON Serialiser configured with the\n   * current namespace\n   *\n   * @type JSONSerialiser\n   * @readonly\n   *\n   * @memberof Namespace.prototype\n   */\n  get serialiser() {\n    return new JSONSerialiser(this);\n  }\n}\n\nJSONSerialiser.prototype.Namespace = Namespace;\n\nmodule.exports = Namespace;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}