{"ast":null,"code":"import { isEmpty } from 'ramda';\nimport { isParseResultElement, ParseResultElement, cloneShallow } from '@swagger-api/apidom-core';\nimport { merge as mergeOptions } from \"../options/util.mjs\";\nimport parse from \"../parse/index.mjs\";\nimport * as plugins from \"../util/plugins.mjs\";\nimport File from \"../File.mjs\";\nimport ResolveError from \"../errors/ResolverError.mjs\";\nimport UnmatchedResolveStrategyError from \"../errors/UnmatchedResolveStrategyError.mjs\";\nimport * as url from \"../util/url.mjs\";\n/**\n * Resolves ApiDOM with all its external references.\n */\nexport const resolveApiDOM = async (element, options) => {\n  // @ts-ignore\n  let parseResult = element;\n\n  // wrap element into parse result\n  if (!isParseResultElement(element)) {\n    // shallow clone of the element\n    const elementClone = cloneShallow(element);\n    elementClone.classes.push('result');\n    parseResult = new ParseResultElement([elementClone]);\n  }\n  const sanitizedURI = url.sanitize(url.stripHash(options.resolve.baseURI));\n  const file = new File({\n    uri: sanitizedURI,\n    parseResult,\n    mediaType: options.parse.mediaType\n  });\n  const resolveStrategies = await plugins.filter('canResolve', [file, options], options.resolve.strategies);\n\n  // we couldn't find any resolver for this File\n  if (isEmpty(resolveStrategies)) {\n    throw new UnmatchedResolveStrategyError(file.uri);\n  }\n  try {\n    const {\n      result\n    } = await plugins.run('resolve', [file, options], resolveStrategies);\n    return result;\n  } catch (error) {\n    throw new ResolveError(`Error while resolving file \"${file.uri}\"`, {\n      cause: error\n    });\n  }\n};\n\n/**\n * Resolves a file with all its external references.\n */\nconst resolve = async (uri, options) => {\n  const parseResult = await parse(uri, options);\n  const mergedOptions = mergeOptions(options, {\n    resolve: {\n      baseURI: url.sanitize(uri)\n    }\n  });\n  return resolveApiDOM(parseResult, mergedOptions);\n};\nexport default resolve;","map":{"version":3,"names":["isEmpty","isParseResultElement","ParseResultElement","cloneShallow","merge","mergeOptions","parse","plugins","File","ResolveError","UnmatchedResolveStrategyError","url","resolveApiDOM","element","options","parseResult","elementClone","classes","push","sanitizedURI","sanitize","stripHash","resolve","baseURI","file","uri","mediaType","resolveStrategies","filter","strategies","result","run","error","cause","mergedOptions"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/resolve/index.mjs"],"sourcesContent":["import { isEmpty } from 'ramda';\nimport { isParseResultElement, ParseResultElement, cloneShallow } from '@swagger-api/apidom-core';\nimport { merge as mergeOptions } from \"../options/util.mjs\";\nimport parse from \"../parse/index.mjs\";\nimport * as plugins from \"../util/plugins.mjs\";\nimport File from \"../File.mjs\";\nimport ResolveError from \"../errors/ResolverError.mjs\";\nimport UnmatchedResolveStrategyError from \"../errors/UnmatchedResolveStrategyError.mjs\";\nimport * as url from \"../util/url.mjs\";\n/**\n * Resolves ApiDOM with all its external references.\n */\nexport const resolveApiDOM = async (element, options) => {\n  // @ts-ignore\n  let parseResult = element;\n\n  // wrap element into parse result\n  if (!isParseResultElement(element)) {\n    // shallow clone of the element\n    const elementClone = cloneShallow(element);\n    elementClone.classes.push('result');\n    parseResult = new ParseResultElement([elementClone]);\n  }\n  const sanitizedURI = url.sanitize(url.stripHash(options.resolve.baseURI));\n  const file = new File({\n    uri: sanitizedURI,\n    parseResult,\n    mediaType: options.parse.mediaType\n  });\n  const resolveStrategies = await plugins.filter('canResolve', [file, options], options.resolve.strategies);\n\n  // we couldn't find any resolver for this File\n  if (isEmpty(resolveStrategies)) {\n    throw new UnmatchedResolveStrategyError(file.uri);\n  }\n  try {\n    const {\n      result\n    } = await plugins.run('resolve', [file, options], resolveStrategies);\n    return result;\n  } catch (error) {\n    throw new ResolveError(`Error while resolving file \"${file.uri}\"`, {\n      cause: error\n    });\n  }\n};\n\n/**\n * Resolves a file with all its external references.\n */\nconst resolve = async (uri, options) => {\n  const parseResult = await parse(uri, options);\n  const mergedOptions = mergeOptions(options, {\n    resolve: {\n      baseURI: url.sanitize(uri)\n    }\n  });\n  return resolveApiDOM(parseResult, mergedOptions);\n};\nexport default resolve;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,oBAAoB,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,0BAA0B;AACjG,SAASC,KAAK,IAAIC,YAAY,QAAQ,qBAAqB;AAC3D,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,KAAKC,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,6BAA6B,MAAM,6CAA6C;AACvF,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AACtC;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EACvD;EACA,IAAIC,WAAW,GAAGF,OAAO;;EAEzB;EACA,IAAI,CAACZ,oBAAoB,CAACY,OAAO,CAAC,EAAE;IAClC;IACA,MAAMG,YAAY,GAAGb,YAAY,CAACU,OAAO,CAAC;IAC1CG,YAAY,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IACnCH,WAAW,GAAG,IAAIb,kBAAkB,CAAC,CAACc,YAAY,CAAC,CAAC;EACtD;EACA,MAAMG,YAAY,GAAGR,GAAG,CAACS,QAAQ,CAACT,GAAG,CAACU,SAAS,CAACP,OAAO,CAACQ,OAAO,CAACC,OAAO,CAAC,CAAC;EACzE,MAAMC,IAAI,GAAG,IAAIhB,IAAI,CAAC;IACpBiB,GAAG,EAAEN,YAAY;IACjBJ,WAAW;IACXW,SAAS,EAAEZ,OAAO,CAACR,KAAK,CAACoB;EAC3B,CAAC,CAAC;EACF,MAAMC,iBAAiB,GAAG,MAAMpB,OAAO,CAACqB,MAAM,CAAC,YAAY,EAAE,CAACJ,IAAI,EAAEV,OAAO,CAAC,EAAEA,OAAO,CAACQ,OAAO,CAACO,UAAU,CAAC;;EAEzG;EACA,IAAI7B,OAAO,CAAC2B,iBAAiB,CAAC,EAAE;IAC9B,MAAM,IAAIjB,6BAA6B,CAACc,IAAI,CAACC,GAAG,CAAC;EACnD;EACA,IAAI;IACF,MAAM;MACJK;IACF,CAAC,GAAG,MAAMvB,OAAO,CAACwB,GAAG,CAAC,SAAS,EAAE,CAACP,IAAI,EAAEV,OAAO,CAAC,EAAEa,iBAAiB,CAAC;IACpE,OAAOG,MAAM;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIvB,YAAY,CAAC,+BAA+Be,IAAI,CAACC,GAAG,GAAG,EAAE;MACjEQ,KAAK,EAAED;IACT,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAMV,OAAO,GAAG,MAAAA,CAAOG,GAAG,EAAEX,OAAO,KAAK;EACtC,MAAMC,WAAW,GAAG,MAAMT,KAAK,CAACmB,GAAG,EAAEX,OAAO,CAAC;EAC7C,MAAMoB,aAAa,GAAG7B,YAAY,CAACS,OAAO,EAAE;IAC1CQ,OAAO,EAAE;MACPC,OAAO,EAAEZ,GAAG,CAACS,QAAQ,CAACK,GAAG;IAC3B;EACF,CAAC,CAAC;EACF,OAAOb,aAAa,CAACG,WAAW,EAAEmB,aAAa,CAAC;AAClD,CAAC;AACD,eAAeZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}