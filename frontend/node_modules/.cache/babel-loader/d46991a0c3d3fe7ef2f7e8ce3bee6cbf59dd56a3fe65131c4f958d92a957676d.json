{"ast":null,"code":"import { Mixin } from 'ts-mixer';\nimport { T as stubTrue, always } from 'ramda';\nimport { cloneDeep } from '@swagger-api/apidom-core';\nimport PathsElement from \"../../../../elements/Paths.mjs\";\nimport PatternedFieldsVisitor from \"../../generics/PatternedFieldsVisitor.mjs\";\nimport FallbackVisitor from \"../../FallbackVisitor.mjs\";\nimport { isPathItemElement } from \"../../../../predicates.mjs\";\nclass PathsVisitor extends Mixin(PatternedFieldsVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new PathsElement();\n    this.specPath = always(['document', 'objects', 'PathItem']);\n    this.canSupportSpecificationExtensions = true;\n    this.fieldPatternPredicate = stubTrue;\n  }\n  ObjectElement(objectElement) {\n    const result = PatternedFieldsVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // decorate every PathItemElement with path metadata\n    this.element.filter(isPathItemElement)\n    // @ts-ignore\n    .forEach((pathItemElement, key) => {\n      key.classes.push('openapi-path-template');\n      key.classes.push('path-template');\n      pathItemElement.setMetaProperty('path', cloneDeep(key));\n    });\n    return result;\n  }\n}\nexport default PathsVisitor;","map":{"version":3,"names":["Mixin","T","stubTrue","always","cloneDeep","PathsElement","PatternedFieldsVisitor","FallbackVisitor","isPathItemElement","PathsVisitor","constructor","options","element","specPath","canSupportSpecificationExtensions","fieldPatternPredicate","ObjectElement","objectElement","result","prototype","call","filter","forEach","pathItemElement","key","classes","push","setMetaProperty"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-0/es/refractor/visitors/open-api-3-0/paths/index.mjs"],"sourcesContent":["import { Mixin } from 'ts-mixer';\nimport { T as stubTrue, always } from 'ramda';\nimport { cloneDeep } from '@swagger-api/apidom-core';\nimport PathsElement from \"../../../../elements/Paths.mjs\";\nimport PatternedFieldsVisitor from \"../../generics/PatternedFieldsVisitor.mjs\";\nimport FallbackVisitor from \"../../FallbackVisitor.mjs\";\nimport { isPathItemElement } from \"../../../../predicates.mjs\";\nclass PathsVisitor extends Mixin(PatternedFieldsVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new PathsElement();\n    this.specPath = always(['document', 'objects', 'PathItem']);\n    this.canSupportSpecificationExtensions = true;\n    this.fieldPatternPredicate = stubTrue;\n  }\n  ObjectElement(objectElement) {\n    const result = PatternedFieldsVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // decorate every PathItemElement with path metadata\n    this.element.filter(isPathItemElement)\n    // @ts-ignore\n    .forEach((pathItemElement, key) => {\n      key.classes.push('openapi-path-template');\n      key.classes.push('path-template');\n      pathItemElement.setMetaProperty('path', cloneDeep(key));\n    });\n    return result;\n  }\n}\nexport default PathsVisitor;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAChC,SAASC,CAAC,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC7C,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAOC,YAAY,MAAM,gCAAgC;AACzD,OAAOC,sBAAsB,MAAM,2CAA2C;AAC9E,OAAOC,eAAe,MAAM,2BAA2B;AACvD,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,MAAMC,YAAY,SAAST,KAAK,CAACM,sBAAsB,EAAEC,eAAe,CAAC,CAAC;EACxEG,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,OAAO,GAAG,IAAIP,YAAY,CAAC,CAAC;IACjC,IAAI,CAACQ,QAAQ,GAAGV,MAAM,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAC3D,IAAI,CAACW,iCAAiC,GAAG,IAAI;IAC7C,IAAI,CAACC,qBAAqB,GAAGb,QAAQ;EACvC;EACAc,aAAaA,CAACC,aAAa,EAAE;IAC3B,MAAMC,MAAM,GAAGZ,sBAAsB,CAACa,SAAS,CAACH,aAAa,CAACI,IAAI,CAAC,IAAI,EAAEH,aAAa,CAAC;;IAEvF;IACA,IAAI,CAACL,OAAO,CAACS,MAAM,CAACb,iBAAiB;IACrC;IAAA,CACCc,OAAO,CAAC,CAACC,eAAe,EAAEC,GAAG,KAAK;MACjCA,GAAG,CAACC,OAAO,CAACC,IAAI,CAAC,uBAAuB,CAAC;MACzCF,GAAG,CAACC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;MACjCH,eAAe,CAACI,eAAe,CAAC,MAAM,EAAEvB,SAAS,CAACoB,GAAG,CAAC,CAAC;IACzD,CAAC,CAAC;IACF,OAAON,MAAM;EACf;AACF;AACA,eAAeT,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}