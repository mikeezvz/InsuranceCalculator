{"ast":null,"code":"import { isEmpty } from 'ramda';\nimport * as plugins from \"../util/plugins.mjs\";\nimport ResolveError from \"../errors/ResolveError.mjs\";\nimport UnmatchedResolverError from \"../errors/UnmatchedResolverError.mjs\";\n/**\n * Reads the given file, using the configured resolver plugins.\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const readFile = async (file, options) => {\n  const optsBoundResolvers = options.resolve.resolvers.map(resolver => {\n    const clonedResolver = Object.create(resolver);\n    return Object.assign(clonedResolver, options.resolve.resolverOpts);\n  });\n  const resolvers = await plugins.filter('canRead', [file, options], optsBoundResolvers);\n\n  // we couldn't find any resolver for this File\n  if (isEmpty(resolvers)) {\n    throw new UnmatchedResolverError(file.uri);\n  }\n  try {\n    const {\n      result\n    } = await plugins.run('read', [file], resolvers);\n    return result;\n  } catch (error) {\n    throw new ResolveError(`Error while reading file \"${file.uri}\"`, {\n      cause: error\n    });\n  }\n};","map":{"version":3,"names":["isEmpty","plugins","ResolveError","UnmatchedResolverError","readFile","file","options","optsBoundResolvers","resolve","resolvers","map","resolver","clonedResolver","Object","create","assign","resolverOpts","filter","uri","result","run","error","cause"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-reference/es/resolve/util.mjs"],"sourcesContent":["import { isEmpty } from 'ramda';\nimport * as plugins from \"../util/plugins.mjs\";\nimport ResolveError from \"../errors/ResolveError.mjs\";\nimport UnmatchedResolverError from \"../errors/UnmatchedResolverError.mjs\";\n/**\n * Reads the given file, using the configured resolver plugins.\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const readFile = async (file, options) => {\n  const optsBoundResolvers = options.resolve.resolvers.map(resolver => {\n    const clonedResolver = Object.create(resolver);\n    return Object.assign(clonedResolver, options.resolve.resolverOpts);\n  });\n  const resolvers = await plugins.filter('canRead', [file, options], optsBoundResolvers);\n\n  // we couldn't find any resolver for this File\n  if (isEmpty(resolvers)) {\n    throw new UnmatchedResolverError(file.uri);\n  }\n  try {\n    const {\n      result\n    } = await plugins.run('read', [file], resolvers);\n    return result;\n  } catch (error) {\n    throw new ResolveError(`Error while reading file \"${file.uri}\"`, {\n      cause: error\n    });\n  }\n};"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAO,KAAKC,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,sBAAsB,MAAM,sCAAsC;AACzE;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,KAAK;EAC/C,MAAMC,kBAAkB,GAAGD,OAAO,CAACE,OAAO,CAACC,SAAS,CAACC,GAAG,CAACC,QAAQ,IAAI;IACnE,MAAMC,cAAc,GAAGC,MAAM,CAACC,MAAM,CAACH,QAAQ,CAAC;IAC9C,OAAOE,MAAM,CAACE,MAAM,CAACH,cAAc,EAAEN,OAAO,CAACE,OAAO,CAACQ,YAAY,CAAC;EACpE,CAAC,CAAC;EACF,MAAMP,SAAS,GAAG,MAAMR,OAAO,CAACgB,MAAM,CAAC,SAAS,EAAE,CAACZ,IAAI,EAAEC,OAAO,CAAC,EAAEC,kBAAkB,CAAC;;EAEtF;EACA,IAAIP,OAAO,CAACS,SAAS,CAAC,EAAE;IACtB,MAAM,IAAIN,sBAAsB,CAACE,IAAI,CAACa,GAAG,CAAC;EAC5C;EACA,IAAI;IACF,MAAM;MACJC;IACF,CAAC,GAAG,MAAMlB,OAAO,CAACmB,GAAG,CAAC,MAAM,EAAE,CAACf,IAAI,CAAC,EAAEI,SAAS,CAAC;IAChD,OAAOU,MAAM;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAInB,YAAY,CAAC,6BAA6BG,IAAI,CAACa,GAAG,GAAG,EAAE;MAC/DI,KAAK,EAAED;IACT,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}