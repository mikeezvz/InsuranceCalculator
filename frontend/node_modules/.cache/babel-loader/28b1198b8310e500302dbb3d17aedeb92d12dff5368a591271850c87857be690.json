{"ast":null,"code":"import { curry, equals, when } from 'ramda';\nimport renameKeysWith from './renameKeysWith.js';\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * key `key` renamed according to logic of renaming function.\n *\n * Keep in mind that in case the new key name already existed on the object,\n * the behaviour is undefined and the result may vary between various JS engines!\n *\n * @func renameKeyWith\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Object\n * @sig (k -> k) -> k -> {k: v} -> {k: v}\n * @param {Function} fn Function that renames the keys\n * @param {!string} key Key to rename\n * @param {!Object} obj Provided object\n * @return {!Object} New object with renamed key\n * @see {@link RA.renameKeysWith|renameKeysWith}\n * @example\n *\n * RA.renameKeyWith(R.concat('a'), 'A', { A: 1 }) //=> { aA: 1 }\n */\nvar renameKeyWith = curry(function (fn, key, obj) {\n  return renameKeysWith(when(equals(key), fn), obj);\n});\nexport default renameKeyWith;","map":{"version":3,"names":["curry","equals","when","renameKeysWith","renameKeyWith","fn","key","obj"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/renameKeyWith.js"],"sourcesContent":["import { curry, equals, when } from 'ramda';\nimport renameKeysWith from './renameKeysWith.js';\n\n/**\n * Creates a new object with the own properties of the provided object, but the\n * key `key` renamed according to logic of renaming function.\n *\n * Keep in mind that in case the new key name already existed on the object,\n * the behaviour is undefined and the result may vary between various JS engines!\n *\n * @func renameKeyWith\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.29.0|v2.29.0}\n * @category Object\n * @sig (k -> k) -> k -> {k: v} -> {k: v}\n * @param {Function} fn Function that renames the keys\n * @param {!string} key Key to rename\n * @param {!Object} obj Provided object\n * @return {!Object} New object with renamed key\n * @see {@link RA.renameKeysWith|renameKeysWith}\n * @example\n *\n * RA.renameKeyWith(R.concat('a'), 'A', { A: 1 }) //=> { aA: 1 }\n */\nvar renameKeyWith = curry(function (fn, key, obj) {\n  return renameKeysWith(when(equals(key), fn), obj);\n});\nexport default renameKeyWith;"],"mappings":"AAAA,SAASA,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,OAAO;AAC3C,OAAOC,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAGJ,KAAK,CAAC,UAAUK,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAChD,OAAOJ,cAAc,CAACD,IAAI,CAACD,MAAM,CAACK,GAAG,CAAC,EAAED,EAAE,CAAC,EAAEE,GAAG,CAAC;AACnD,CAAC,CAAC;AACF,eAAeH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}