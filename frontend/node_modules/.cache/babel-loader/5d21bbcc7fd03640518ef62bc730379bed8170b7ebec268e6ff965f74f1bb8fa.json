{"ast":null,"code":"import { Mixin } from 'ts-mixer';\nimport { always } from 'ramda';\nimport { toValue } from '@swagger-api/apidom-core';\nimport CallbackElement from \"../../../../elements/Callback.mjs\";\nimport PatternedFieldsVisitor from \"../../generics/PatternedFieldsVisitor.mjs\";\nimport FallbackVisitor from \"../../FallbackVisitor.mjs\";\nimport MapVisitor from \"../../generics/MapVisitor.mjs\";\nimport { isPathItemElement } from \"../../../../predicates.mjs\";\nclass CallbackVisitor extends Mixin(PatternedFieldsVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new CallbackElement();\n    this.specPath = always(['document', 'objects', 'PathItem']);\n    this.canSupportSpecificationExtensions = true;\n    this.fieldPatternPredicate = value => /{(?<expression>[^}]{1,2083})}/.test(String(value)); // 2,083 characters is the maximum length of a URL in Chrome\n  }\n  ObjectElement(objectElement) {\n    const result = MapVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // decorate every PathItemElement with Callback Object expression metadata\n    this.element.filter(isPathItemElement)\n    // @ts-ignore\n    .forEach((pathItemElement, key) => {\n      pathItemElement.setMetaProperty('runtime-expression', toValue(key));\n    });\n    return result;\n  }\n}\nexport default CallbackVisitor;","map":{"version":3,"names":["Mixin","always","toValue","CallbackElement","PatternedFieldsVisitor","FallbackVisitor","MapVisitor","isPathItemElement","CallbackVisitor","constructor","options","element","specPath","canSupportSpecificationExtensions","fieldPatternPredicate","value","test","String","ObjectElement","objectElement","result","prototype","call","filter","forEach","pathItemElement","key","setMetaProperty"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/@swagger-api/apidom-ns-openapi-3-0/es/refractor/visitors/open-api-3-0/callback/index.mjs"],"sourcesContent":["import { Mixin } from 'ts-mixer';\nimport { always } from 'ramda';\nimport { toValue } from '@swagger-api/apidom-core';\nimport CallbackElement from \"../../../../elements/Callback.mjs\";\nimport PatternedFieldsVisitor from \"../../generics/PatternedFieldsVisitor.mjs\";\nimport FallbackVisitor from \"../../FallbackVisitor.mjs\";\nimport MapVisitor from \"../../generics/MapVisitor.mjs\";\nimport { isPathItemElement } from \"../../../../predicates.mjs\";\nclass CallbackVisitor extends Mixin(PatternedFieldsVisitor, FallbackVisitor) {\n  constructor(options) {\n    super(options);\n    this.element = new CallbackElement();\n    this.specPath = always(['document', 'objects', 'PathItem']);\n    this.canSupportSpecificationExtensions = true;\n    this.fieldPatternPredicate = value => /{(?<expression>[^}]{1,2083})}/.test(String(value)); // 2,083 characters is the maximum length of a URL in Chrome\n  }\n  ObjectElement(objectElement) {\n    const result = MapVisitor.prototype.ObjectElement.call(this, objectElement);\n\n    // decorate every PathItemElement with Callback Object expression metadata\n    this.element.filter(isPathItemElement)\n    // @ts-ignore\n    .forEach((pathItemElement, key) => {\n      pathItemElement.setMetaProperty('runtime-expression', toValue(key));\n    });\n    return result;\n  }\n}\nexport default CallbackVisitor;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAChC,SAASC,MAAM,QAAQ,OAAO;AAC9B,SAASC,OAAO,QAAQ,0BAA0B;AAClD,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,OAAOC,sBAAsB,MAAM,2CAA2C;AAC9E,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAOC,UAAU,MAAM,+BAA+B;AACtD,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,MAAMC,eAAe,SAASR,KAAK,CAACI,sBAAsB,EAAEC,eAAe,CAAC,CAAC;EAC3EI,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,OAAO,GAAG,IAAIR,eAAe,CAAC,CAAC;IACpC,IAAI,CAACS,QAAQ,GAAGX,MAAM,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAC3D,IAAI,CAACY,iCAAiC,GAAG,IAAI;IAC7C,IAAI,CAACC,qBAAqB,GAAGC,KAAK,IAAI,+BAA+B,CAACC,IAAI,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7F;EACAG,aAAaA,CAACC,aAAa,EAAE;IAC3B,MAAMC,MAAM,GAAGd,UAAU,CAACe,SAAS,CAACH,aAAa,CAACI,IAAI,CAAC,IAAI,EAAEH,aAAa,CAAC;;IAE3E;IACA,IAAI,CAACR,OAAO,CAACY,MAAM,CAAChB,iBAAiB;IACrC;IAAA,CACCiB,OAAO,CAAC,CAACC,eAAe,EAAEC,GAAG,KAAK;MACjCD,eAAe,CAACE,eAAe,CAAC,oBAAoB,EAAEzB,OAAO,CAACwB,GAAG,CAAC,CAAC;IACrE,CAAC,CAAC;IACF,OAAON,MAAM;EACf;AACF;AACA,eAAeZ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}