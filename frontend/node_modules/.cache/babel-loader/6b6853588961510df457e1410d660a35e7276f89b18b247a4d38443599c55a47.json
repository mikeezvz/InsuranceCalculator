{"ast":null,"code":"import { ifElse, always } from 'ramda';\nimport isCoercible from './internal/isCoercible.js';\n\n/**\n * Converts value to a number.\n *\n * @func toNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.36.0|v2.36.0}\n * @category Type\n * @param {*} val The value to convert\n * @return {Number}\n * @example\n *\n * RA.toNumber(3.2); //=> 3.2\n * RA.toNumber(Number.MIN_VALUE); //=> 5e-324\n * RA.toNumber(Infinity); //=> Infinity\n * RA.toNumber('3.2'); //=> 3.2\n * RA.toNumber(Symbol('3.2')); //=> NaN\n */\nvar toNumber = ifElse(isCoercible, Number, always(NaN));\nexport default toNumber;","map":{"version":3,"names":["ifElse","always","isCoercible","toNumber","Number","NaN"],"sources":["/home/mikezvz/Documents/GitHub/InsuranceCalculator/frontend/node_modules/ramda-adjunct/es/toNumber.js"],"sourcesContent":["import { ifElse, always } from 'ramda';\nimport isCoercible from './internal/isCoercible.js';\n\n/**\n * Converts value to a number.\n *\n * @func toNumber\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.36.0|v2.36.0}\n * @category Type\n * @param {*} val The value to convert\n * @return {Number}\n * @example\n *\n * RA.toNumber(3.2); //=> 3.2\n * RA.toNumber(Number.MIN_VALUE); //=> 5e-324\n * RA.toNumber(Infinity); //=> Infinity\n * RA.toNumber('3.2'); //=> 3.2\n * RA.toNumber(Symbol('3.2')); //=> NaN\n */\nvar toNumber = ifElse(isCoercible, Number, always(NaN));\nexport default toNumber;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,QAAQ,OAAO;AACtC,OAAOC,WAAW,MAAM,2BAA2B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAGH,MAAM,CAACE,WAAW,EAAEE,MAAM,EAAEH,MAAM,CAACI,GAAG,CAAC,CAAC;AACvD,eAAeF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}